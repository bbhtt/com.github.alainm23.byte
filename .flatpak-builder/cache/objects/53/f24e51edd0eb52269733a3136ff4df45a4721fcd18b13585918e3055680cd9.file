/* NewPlaylist.c generated by valac 0.40.11, the Vala compiler
 * generated from NewPlaylist.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gdk/gdk.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>


#define WIDGETS_TYPE_NEW_PLAYLIST (widgets_new_playlist_get_type ())
#define WIDGETS_NEW_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_NEW_PLAYLIST, WidgetsNewPlaylist))
#define WIDGETS_NEW_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_NEW_PLAYLIST, WidgetsNewPlaylistClass))
#define WIDGETS_IS_NEW_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_NEW_PLAYLIST))
#define WIDGETS_IS_NEW_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_NEW_PLAYLIST))
#define WIDGETS_NEW_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_NEW_PLAYLIST, WidgetsNewPlaylistClass))

typedef struct _WidgetsNewPlaylist WidgetsNewPlaylist;
typedef struct _WidgetsNewPlaylistClass WidgetsNewPlaylistClass;
typedef struct _WidgetsNewPlaylistPrivate WidgetsNewPlaylistPrivate;
enum  {
	WIDGETS_NEW_PLAYLIST_0_PROPERTY,
	WIDGETS_NEW_PLAYLIST_NUM_PROPERTIES
};
static GParamSpec* widgets_new_playlist_properties[WIDGETS_NEW_PLAYLIST_NUM_PROPERTIES];
typedef struct _Block36Data Block36Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define OBJECTS_TYPE_PLAYLIST (objects_playlist_get_type ())
#define OBJECTS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylist))
#define OBJECTS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))
#define OBJECTS_IS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_IS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))

typedef struct _ObjectsPlaylist ObjectsPlaylist;
typedef struct _ObjectsPlaylistClass ObjectsPlaylistClass;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
typedef struct _ObjectsPlaylistPrivate ObjectsPlaylistPrivate;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

struct _WidgetsNewPlaylist {
	GtkEventBox parent_instance;
	WidgetsNewPlaylistPrivate * priv;
};

struct _WidgetsNewPlaylistClass {
	GtkEventBoxClass parent_class;
};

struct _Block36Data {
	int _ref_count_;
	WidgetsNewPlaylist* self;
	GtkEntry* title_entry;
	GtkStack* stack;
};

struct _ObjectsPlaylist {
	GObject parent_instance;
	ObjectsPlaylistPrivate * priv;
	gint id;
	gchar* title;
	gchar* note;
	gchar* date_added;
	gchar* date_updated;
	gint num_tracks;
};

struct _ObjectsPlaylistClass {
	GObjectClass parent_class;
};


static gpointer widgets_new_playlist_parent_class = NULL;
extern ServicesDatabase* byte_database;

GType widgets_new_playlist_get_type (void) G_GNUC_CONST;
WidgetsNewPlaylist* widgets_new_playlist_new (void);
WidgetsNewPlaylist* widgets_new_playlist_construct (GType object_type);
static GObject * widgets_new_playlist_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
static Block36Data* block36_data_ref (Block36Data* _data36_);
static void block36_data_unref (void * _userdata_);
GType widgets_cover_get_type (void) G_GNUC_CONST;
WidgetsCover* widgets_cover_new_from_file (const gchar* filepath,
                                           gint pixel_size,
                                           const gchar* type);
WidgetsCover* widgets_cover_construct_from_file (GType object_type,
                                                 const gchar* filepath,
                                                 gint pixel_size,
                                                 const gchar* type);
static gboolean _widgets_new_playlist___lambda374_ (Block36Data* _data36_,
                                             GdkEvent* event);
static gboolean __widgets_new_playlist___lambda374__gtk_widget_event (GtkWidget* _sender,
                                                               GdkEvent* event,
                                                               gpointer self);
static gboolean _widgets_new_playlist___lambda375_ (Block36Data* _data36_,
                                             GdkEventKey* key);
static gboolean __widgets_new_playlist___lambda375__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                           GdkEventKey* event,
                                                                           gpointer self);
static void _widgets_new_playlist___lambda376_ (Block36Data* _data36_);
GType objects_playlist_get_type (void) G_GNUC_CONST;
ObjectsPlaylist* objects_playlist_new (gint id,
                                       const gchar* title,
                                       const gchar* note,
                                       const gchar* date_added,
                                       const gchar* date_updated,
                                       gint num_tracks);
ObjectsPlaylist* objects_playlist_construct (GType object_type,
                                             gint id,
                                             const gchar* title,
                                             const gchar* note,
                                             const gchar* date_added,
                                             const gchar* date_updated,
                                             gint num_tracks);
GType services_database_get_type (void) G_GNUC_CONST;
gint services_database_insert_playlist (ServicesDatabase* self,
                                        ObjectsPlaylist* playlist);
static void __widgets_new_playlist___lambda376__gtk_entry_activate (GtkEntry* _sender,
                                                             gpointer self);


WidgetsNewPlaylist*
widgets_new_playlist_construct (GType object_type)
{
	WidgetsNewPlaylist * self = NULL;
	self = (WidgetsNewPlaylist*) g_object_new (object_type, NULL);
	return self;
}


WidgetsNewPlaylist*
widgets_new_playlist_new (void)
{
	return widgets_new_playlist_construct (WIDGETS_TYPE_NEW_PLAYLIST);
}


static Block36Data*
block36_data_ref (Block36Data* _data36_)
{
	g_atomic_int_inc (&_data36_->_ref_count_);
	return _data36_;
}


static void
block36_data_unref (void * _userdata_)
{
	Block36Data* _data36_;
	_data36_ = (Block36Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data36_->_ref_count_)) {
		WidgetsNewPlaylist* self;
		self = _data36_->self;
		_g_object_unref0 (_data36_->stack);
		_g_object_unref0 (_data36_->title_entry);
		_g_object_unref0 (self);
		g_slice_free (Block36Data, _data36_);
	}
}


static gboolean
_widgets_new_playlist___lambda374_ (Block36Data* _data36_,
                                    GdkEvent* event)
{
	WidgetsNewPlaylist* self;
	gboolean result = FALSE;
	GdkEventType _tmp0_;
	self = _data36_->self;
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp0_ = event->type;
	if (_tmp0_ == GDK_BUTTON_PRESS) {
		GtkStack* _tmp1_;
		GtkEntry* _tmp2_;
		_tmp1_ = _data36_->stack;
		gtk_stack_set_visible_child_name (_tmp1_, "playlist_grid");
		_tmp2_ = _data36_->title_entry;
		gtk_widget_grab_focus ((GtkWidget*) _tmp2_);
	}
}


static gboolean
__widgets_new_playlist___lambda374__gtk_widget_event (GtkWidget* _sender,
                                                      GdkEvent* event,
                                                      gpointer self)
{
	gboolean result;
	result = _widgets_new_playlist___lambda374_ (self, event);
	return result;
}


static gboolean
_widgets_new_playlist___lambda375_ (Block36Data* _data36_,
                                    GdkEventKey* key)
{
	WidgetsNewPlaylist* self;
	gboolean result = FALSE;
	guint _tmp0_;
	self = _data36_->self;
	g_return_val_if_fail (key != NULL, FALSE);
	_tmp0_ = key->keyval;
	if (_tmp0_ == ((guint) 65307)) {
		GtkStack* _tmp1_;
		GtkEntry* _tmp2_;
		_tmp1_ = _data36_->stack;
		gtk_stack_set_visible_child_name (_tmp1_, "add_eventbox");
		_tmp2_ = _data36_->title_entry;
		gtk_entry_set_text (_tmp2_, "");
	}
	result = FALSE;
	return result;
}


static gboolean
__widgets_new_playlist___lambda375__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                  GdkEventKey* event,
                                                                  gpointer self)
{
	gboolean result;
	result = _widgets_new_playlist___lambda375_ (self, event);
	return result;
}


static gchar*
g_date_time_to_string (GDateTime* self)
{
	gchar* result = NULL;
	gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_date_time_format (self, "%FT%H:%M:%S%z");
	result = _tmp0_;
	return result;
}


static void
_widgets_new_playlist___lambda376_ (Block36Data* _data36_)
{
	WidgetsNewPlaylist* self;
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	self = _data36_->self;
	_tmp0_ = _data36_->title_entry;
	_tmp1_ = gtk_entry_get_text (_tmp0_);
	_tmp2_ = _tmp1_;
	if (g_strcmp0 (_tmp2_, "") != 0) {
		ObjectsPlaylist* playlist = NULL;
		GDateTime* _tmp3_;
		GDateTime* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
		GDateTime* _tmp7_;
		GDateTime* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		ObjectsPlaylist* _tmp11_;
		ObjectsPlaylist* _tmp12_;
		ObjectsPlaylist* _tmp13_;
		GtkEntry* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
		gchar* _tmp17_;
		ServicesDatabase* _tmp18_;
		ObjectsPlaylist* _tmp19_;
		GtkStack* _tmp20_;
		GtkEntry* _tmp21_;
		_tmp3_ = g_date_time_new_now_local ();
		_tmp4_ = _tmp3_;
		_tmp5_ = g_date_time_to_string (_tmp4_);
		_tmp6_ = _tmp5_;
		_tmp7_ = g_date_time_new_now_local ();
		_tmp8_ = _tmp7_;
		_tmp9_ = g_date_time_to_string (_tmp8_);
		_tmp10_ = _tmp9_;
		_tmp11_ = objects_playlist_new (0, "", "", _tmp6_, _tmp10_, 0);
		_tmp12_ = _tmp11_;
		_g_free0 (_tmp10_);
		_g_date_time_unref0 (_tmp8_);
		_g_free0 (_tmp6_);
		_g_date_time_unref0 (_tmp4_);
		playlist = _tmp12_;
		_tmp13_ = playlist;
		_tmp14_ = _data36_->title_entry;
		_tmp15_ = gtk_entry_get_text (_tmp14_);
		_tmp16_ = _tmp15_;
		_tmp17_ = g_strdup (_tmp16_);
		_g_free0 (_tmp13_->title);
		_tmp13_->title = _tmp17_;
		_tmp18_ = byte_database;
		_tmp19_ = playlist;
		services_database_insert_playlist (_tmp18_, _tmp19_);
		_tmp20_ = _data36_->stack;
		gtk_stack_set_visible_child_name (_tmp20_, "add_eventbox");
		_tmp21_ = _data36_->title_entry;
		gtk_entry_set_text (_tmp21_, "");
		_g_object_unref0 (playlist);
	}
}


static void
__widgets_new_playlist___lambda376__gtk_entry_activate (GtkEntry* _sender,
                                                        gpointer self)
{
	_widgets_new_playlist___lambda376_ (self);
}


static GObject *
widgets_new_playlist_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsNewPlaylist * self;
	Block36Data* _data36_;
	WidgetsCover* add_image = NULL;
	WidgetsCover* _tmp0_;
	GtkLabel* add_label = NULL;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GtkLabel* _tmp3_;
	GtkLabel* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkGrid* add_grid = NULL;
	GtkGrid* _tmp9_;
	GtkGrid* _tmp10_;
	GtkStyleContext* _tmp11_;
	GtkGrid* _tmp12_;
	GtkGrid* _tmp13_;
	WidgetsCover* _tmp14_;
	GtkGrid* _tmp15_;
	GtkLabel* _tmp16_;
	GtkEventBox* add_eventbox = NULL;
	GtkEventBox* _tmp17_;
	GtkEventBox* _tmp18_;
	GtkEventBox* _tmp19_;
	GtkGrid* _tmp20_;
	WidgetsCover* image_cover = NULL;
	WidgetsCover* _tmp21_;
	GtkEntry* _tmp22_;
	GtkEntry* _tmp23_;
	GtkEntry* _tmp24_;
	GtkEntry* _tmp25_;
	GtkStyleContext* _tmp26_;
	GtkEntry* _tmp27_;
	GtkGrid* playlist_grid = NULL;
	GtkGrid* _tmp28_;
	GtkGrid* _tmp29_;
	WidgetsCover* _tmp30_;
	GtkGrid* _tmp31_;
	GtkEntry* _tmp32_;
	GtkStack* _tmp33_;
	GtkStack* _tmp34_;
	GtkStack* _tmp35_;
	GtkStack* _tmp36_;
	GtkStack* _tmp37_;
	GtkStack* _tmp38_;
	GtkStack* _tmp39_;
	GtkEventBox* _tmp40_;
	GtkStack* _tmp41_;
	GtkGrid* _tmp42_;
	GtkStack* _tmp43_;
	GtkEventBox* _tmp44_;
	GtkEntry* _tmp45_;
	GtkEntry* _tmp46_;
	parent_class = G_OBJECT_CLASS (widgets_new_playlist_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_NEW_PLAYLIST, WidgetsNewPlaylist);
	_data36_ = g_slice_new0 (Block36Data);
	_data36_->_ref_count_ = 1;
	_data36_->self = g_object_ref (self);
	gtk_widget_add_events ((GtkWidget*) self, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
	_tmp0_ = widgets_cover_new_from_file ("/usr/share/com.github.alainm23.byte/playlist-add.svg", 48, "playlist");
	g_object_ref_sink (_tmp0_);
	add_image = _tmp0_;
	_tmp1_ = g_strdup_printf ("<b>%s</b>", _ ("New Playlist"));
	_tmp2_ = _tmp1_;
	_tmp3_ = (GtkLabel*) gtk_label_new (_tmp2_);
	g_object_ref_sink (_tmp3_);
	_tmp4_ = _tmp3_;
	_g_free0 (_tmp2_);
	add_label = _tmp4_;
	_tmp5_ = add_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp5_, GTK_ALIGN_CENTER);
	_tmp6_ = add_label;
	gtk_label_set_use_markup (_tmp6_, TRUE);
	_tmp7_ = add_label;
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
	gtk_style_context_add_class (_tmp8_, "h3");
	_tmp9_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp9_);
	add_grid = _tmp9_;
	_tmp10_ = add_grid;
	_tmp11_ = gtk_widget_get_style_context ((GtkWidget*) _tmp10_);
	gtk_style_context_add_class (_tmp11_, "new-task");
	_tmp12_ = add_grid;
	gtk_grid_set_column_spacing (_tmp12_, 9);
	_tmp13_ = add_grid;
	_tmp14_ = add_image;
	gtk_container_add ((GtkContainer*) _tmp13_, (GtkWidget*) _tmp14_);
	_tmp15_ = add_grid;
	_tmp16_ = add_label;
	gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp16_);
	_tmp17_ = (GtkEventBox*) gtk_event_box_new ();
	g_object_ref_sink (_tmp17_);
	add_eventbox = _tmp17_;
	_tmp18_ = add_eventbox;
	gtk_widget_set_valign ((GtkWidget*) _tmp18_, GTK_ALIGN_CENTER);
	_tmp19_ = add_eventbox;
	_tmp20_ = add_grid;
	gtk_container_add ((GtkContainer*) _tmp19_, (GtkWidget*) _tmp20_);
	_tmp21_ = widgets_cover_new_from_file ("/usr/share/com.github.alainm23.byte/playlist-add.svg", 48, "playlist");
	g_object_ref_sink (_tmp21_);
	image_cover = _tmp21_;
	_tmp22_ = (GtkEntry*) gtk_entry_new ();
	g_object_ref_sink (_tmp22_);
	_data36_->title_entry = _tmp22_;
	_tmp23_ = _data36_->title_entry;
	gtk_widget_set_valign ((GtkWidget*) _tmp23_, GTK_ALIGN_CENTER);
	_tmp24_ = _data36_->title_entry;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp24_, TRUE);
	_tmp25_ = _data36_->title_entry;
	_tmp26_ = gtk_widget_get_style_context ((GtkWidget*) _tmp25_);
	gtk_style_context_add_class (_tmp26_, "add-playlist-entry");
	_tmp27_ = _data36_->title_entry;
	gtk_entry_set_placeholder_text (_tmp27_, _ ("Project name"));
	_tmp28_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp28_);
	playlist_grid = _tmp28_;
	_tmp29_ = playlist_grid;
	_tmp30_ = image_cover;
	gtk_container_add ((GtkContainer*) _tmp29_, (GtkWidget*) _tmp30_);
	_tmp31_ = playlist_grid;
	_tmp32_ = _data36_->title_entry;
	gtk_container_add ((GtkContainer*) _tmp31_, (GtkWidget*) _tmp32_);
	_tmp33_ = (GtkStack*) gtk_stack_new ();
	g_object_ref_sink (_tmp33_);
	_data36_->stack = _tmp33_;
	_tmp34_ = _data36_->stack;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp34_, 3);
	_tmp35_ = _data36_->stack;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp35_, 12);
	_tmp36_ = _data36_->stack;
	gtk_widget_set_valign ((GtkWidget*) _tmp36_, GTK_ALIGN_CENTER);
	_tmp37_ = _data36_->stack;
	gtk_stack_set_transition_type (_tmp37_, GTK_STACK_TRANSITION_TYPE_CROSSFADE);
	_tmp38_ = _data36_->stack;
	gtk_stack_set_transition_duration (_tmp38_, (guint) 120);
	_tmp39_ = _data36_->stack;
	_tmp40_ = add_eventbox;
	gtk_stack_add_named (_tmp39_, (GtkWidget*) _tmp40_, "add_eventbox");
	_tmp41_ = _data36_->stack;
	_tmp42_ = playlist_grid;
	gtk_stack_add_named (_tmp41_, (GtkWidget*) _tmp42_, "playlist_grid");
	_tmp43_ = _data36_->stack;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp43_);
	_tmp44_ = add_eventbox;
	g_signal_connect_data ((GtkWidget*) _tmp44_, "event", (GCallback) __widgets_new_playlist___lambda374__gtk_widget_event, block36_data_ref (_data36_), (GClosureNotify) block36_data_unref, 0);
	_tmp45_ = _data36_->title_entry;
	g_signal_connect_data ((GtkWidget*) _tmp45_, "key-release-event", (GCallback) __widgets_new_playlist___lambda375__gtk_widget_key_release_event, block36_data_ref (_data36_), (GClosureNotify) block36_data_unref, 0);
	_tmp46_ = _data36_->title_entry;
	g_signal_connect_data (_tmp46_, "activate", (GCallback) __widgets_new_playlist___lambda376__gtk_entry_activate, block36_data_ref (_data36_), (GClosureNotify) block36_data_unref, 0);
	_g_object_unref0 (playlist_grid);
	_g_object_unref0 (image_cover);
	_g_object_unref0 (add_eventbox);
	_g_object_unref0 (add_grid);
	_g_object_unref0 (add_label);
	_g_object_unref0 (add_image);
	block36_data_unref (_data36_);
	_data36_ = NULL;
	return obj;
}


static void
widgets_new_playlist_class_init (WidgetsNewPlaylistClass * klass)
{
	widgets_new_playlist_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->constructor = widgets_new_playlist_constructor;
}


static void
widgets_new_playlist_instance_init (WidgetsNewPlaylist * self)
{
}


GType
widgets_new_playlist_get_type (void)
{
	static volatile gsize widgets_new_playlist_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_new_playlist_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsNewPlaylistClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_new_playlist_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsNewPlaylist), 0, (GInstanceInitFunc) widgets_new_playlist_instance_init, NULL };
		GType widgets_new_playlist_type_id;
		widgets_new_playlist_type_id = g_type_register_static (gtk_event_box_get_type (), "WidgetsNewPlaylist", &g_define_type_info, 0);
		g_once_init_leave (&widgets_new_playlist_type_id__volatile, widgets_new_playlist_type_id);
	}
	return widgets_new_playlist_type_id__volatile;
}



