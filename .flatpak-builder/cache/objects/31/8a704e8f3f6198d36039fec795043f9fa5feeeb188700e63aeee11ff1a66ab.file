/* MediaKey.c generated by valac 0.40.11, the Vala compiler
 * generated from MediaKey.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>


#define TYPE_GNOME_MEDIA_KEYS (gnome_media_keys_get_type ())
#define GNOME_MEDIA_KEYS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GNOME_MEDIA_KEYS, GnomeMediaKeys))
#define IS_GNOME_MEDIA_KEYS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GNOME_MEDIA_KEYS))
#define GNOME_MEDIA_KEYS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_GNOME_MEDIA_KEYS, GnomeMediaKeysIface))

typedef struct _GnomeMediaKeys GnomeMediaKeys;
typedef struct _GnomeMediaKeysIface GnomeMediaKeysIface;

#define TYPE_GNOME_MEDIA_KEYS_PROXY (gnome_media_keys_proxy_get_type ())
enum  {
	GNOME_MEDIA_KEYS_MEDIA_PLAYER_KEY_PRESSED_SIGNAL,
	GNOME_MEDIA_KEYS_NUM_SIGNALS
};
static guint gnome_media_keys_signals[GNOME_MEDIA_KEYS_NUM_SIGNALS] = {0};
typedef GDBusProxy GnomeMediaKeysProxy;
typedef GDBusProxyClass GnomeMediaKeysProxyClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_MEDIA_KEY (services_media_key_get_type ())
#define SERVICES_MEDIA_KEY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_MEDIA_KEY, ServicesMediaKey))
#define SERVICES_MEDIA_KEY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_MEDIA_KEY, ServicesMediaKeyClass))
#define SERVICES_IS_MEDIA_KEY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_MEDIA_KEY))
#define SERVICES_IS_MEDIA_KEY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_MEDIA_KEY))
#define SERVICES_MEDIA_KEY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_MEDIA_KEY, ServicesMediaKeyClass))

typedef struct _ServicesMediaKey ServicesMediaKey;
typedef struct _ServicesMediaKeyClass ServicesMediaKeyClass;
typedef struct _ServicesMediaKeyPrivate ServicesMediaKeyPrivate;
enum  {
	SERVICES_MEDIA_KEY_0_PROPERTY,
	SERVICES_MEDIA_KEY_NUM_PROPERTIES
};
static GParamSpec* services_media_key_properties[SERVICES_MEDIA_KEY_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_BYTE (byte_get_type ())
#define BYTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BYTE, Byte))
#define BYTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BYTE, ByteClass))
#define IS_BYTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BYTE))
#define IS_BYTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BYTE))
#define BYTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BYTE, ByteClass))

typedef struct _Byte Byte;
typedef struct _ByteClass ByteClass;

#define SERVICES_TYPE_PLAYER (services_player_get_type ())
#define SERVICES_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_PLAYER, ServicesPlayer))
#define SERVICES_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_PLAYER, ServicesPlayerClass))
#define SERVICES_IS_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_PLAYER))
#define SERVICES_IS_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_PLAYER))
#define SERVICES_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_PLAYER, ServicesPlayerClass))

typedef struct _ServicesPlayer ServicesPlayer;
typedef struct _ServicesPlayerClass ServicesPlayerClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _GnomeMediaKeysIface {
	GTypeInterface parent_iface;
	void (*GrabMediaPlayerKeys) (GnomeMediaKeys* self, const gchar* application, guint32 time, GError** error);
	void (*ReleaseMediaPlayerKeys) (GnomeMediaKeys* self, const gchar* application, GError** error);
};

struct _ServicesMediaKey {
	GObject parent_instance;
	ServicesMediaKeyPrivate * priv;
};

struct _ServicesMediaKeyClass {
	GObjectClass parent_class;
};

struct _ServicesMediaKeyPrivate {
	GnomeMediaKeys* media_keys;
};


static gpointer services_media_key_parent_class = NULL;
static ServicesMediaKey* services_media_key__instance;
static ServicesMediaKey* services_media_key__instance = NULL;
extern ServicesPlayer* byte_player;

GType gnome_media_keys_proxy_get_type (void) G_GNUC_CONST;
guint gnome_media_keys_register_object (void* object,
                                        GDBusConnection* connection,
                                        const gchar* path,
                                        GError** error);
GType gnome_media_keys_get_type (void) G_GNUC_CONST;
void gnome_media_keys_GrabMediaPlayerKeys (GnomeMediaKeys* self,
                                           const gchar* application,
                                           guint32 time,
                                           GError** error);
void gnome_media_keys_ReleaseMediaPlayerKeys (GnomeMediaKeys* self,
                                              const gchar* application,
                                              GError** error);
static void g_cclosure_user_marshal_VOID__STRING_STRING (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);
static void gnome_media_keys_proxy_g_signal (GDBusProxy* proxy,
                                      const gchar* sender_name,
                                      const gchar* signal_name,
                                      GVariant* parameters);
static void _dbus_handle_gnome_media_keys_media_player_key_pressed (GnomeMediaKeys* self,
                                                             GVariant* parameters);
static void gnome_media_keys_proxy_GrabMediaPlayerKeys (GnomeMediaKeys* self,
                                                 const gchar* application,
                                                 guint32 time,
                                                 GError** error);
static void gnome_media_keys_proxy_ReleaseMediaPlayerKeys (GnomeMediaKeys* self,
                                                    const gchar* application,
                                                    GError** error);
static void gnome_media_keys_proxy_gnome_media_keys_interface_init (GnomeMediaKeysIface* iface);
static void _dbus_gnome_media_keys_GrabMediaPlayerKeys (GnomeMediaKeys* self,
                                                 GVariant* _parameters_,
                                                 GDBusMethodInvocation* invocation);
static void _dbus_gnome_media_keys_ReleaseMediaPlayerKeys (GnomeMediaKeys* self,
                                                    GVariant* _parameters_,
                                                    GDBusMethodInvocation* invocation);
static void gnome_media_keys_dbus_interface_method_call (GDBusConnection* connection,
                                                  const gchar* sender,
                                                  const gchar* object_path,
                                                  const gchar* interface_name,
                                                  const gchar* method_name,
                                                  GVariant* parameters,
                                                  GDBusMethodInvocation* invocation,
                                                  gpointer user_data);
static GVariant* gnome_media_keys_dbus_interface_get_property (GDBusConnection* connection,
                                                        const gchar* sender,
                                                        const gchar* object_path,
                                                        const gchar* interface_name,
                                                        const gchar* property_name,
                                                        GError** error,
                                                        gpointer user_data);
static gboolean gnome_media_keys_dbus_interface_set_property (GDBusConnection* connection,
                                                       const gchar* sender,
                                                       const gchar* object_path,
                                                       const gchar* interface_name,
                                                       const gchar* property_name,
                                                       GVariant* value,
                                                       GError** error,
                                                       gpointer user_data);
static void _dbus_gnome_media_keys_media_player_key_pressed (GObject* _sender,
                                                      const gchar* application,
                                                      const gchar* key,
                                                      gpointer* _data);
static void _gnome_media_keys_unregister_object (gpointer user_data);
GType services_media_key_get_type (void) G_GNUC_CONST;
#define SERVICES_MEDIA_KEY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), SERVICES_TYPE_MEDIA_KEY, ServicesMediaKeyPrivate))
static ServicesMediaKey* services_media_key_new (void);
static ServicesMediaKey* services_media_key_construct (GType object_type);
void services_media_key_listen (void);
ServicesMediaKey* services_media_key_get_instance (void);
static void services_media_key_set_instance (ServicesMediaKey* value);
static void services_media_key_pressed_key (ServicesMediaKey* self,
                                     GObject* bus,
                                     const gchar* application,
                                     const gchar* key);
GType byte_get_type (void) G_GNUC_CONST;
Byte* byte_get_instance (void);
GType services_player_get_type (void) G_GNUC_CONST;
void services_player_prev (ServicesPlayer* self);
void services_player_next (ServicesPlayer* self);
void services_player_pause (ServicesPlayer* self);
static GObject * services_media_key_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
static void _services_media_key_pressed_key_gnome_media_keys_media_player_key_pressed (GnomeMediaKeys* _sender,
                                                                                const gchar* application,
                                                                                const gchar* key,
                                                                                gpointer self);
static void services_media_key_finalize (GObject * obj);
static void _vala_services_media_key_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_services_media_key_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);

static const GDBusArgInfo _gnome_media_keys_dbus_arg_info_GrabMediaPlayerKeys_application = {-1, "application", "s"};
static const GDBusArgInfo _gnome_media_keys_dbus_arg_info_GrabMediaPlayerKeys_time = {-1, "time", "u"};
static const GDBusArgInfo * const _gnome_media_keys_dbus_arg_info_GrabMediaPlayerKeys_in[] = {&_gnome_media_keys_dbus_arg_info_GrabMediaPlayerKeys_application, &_gnome_media_keys_dbus_arg_info_GrabMediaPlayerKeys_time, NULL};
static const GDBusArgInfo * const _gnome_media_keys_dbus_arg_info_GrabMediaPlayerKeys_out[] = {NULL};
static const GDBusMethodInfo _gnome_media_keys_dbus_method_info_GrabMediaPlayerKeys = {-1, "GrabMediaPlayerKeys", (GDBusArgInfo **) (&_gnome_media_keys_dbus_arg_info_GrabMediaPlayerKeys_in), (GDBusArgInfo **) (&_gnome_media_keys_dbus_arg_info_GrabMediaPlayerKeys_out)};
static const GDBusArgInfo _gnome_media_keys_dbus_arg_info_ReleaseMediaPlayerKeys_application = {-1, "application", "s"};
static const GDBusArgInfo * const _gnome_media_keys_dbus_arg_info_ReleaseMediaPlayerKeys_in[] = {&_gnome_media_keys_dbus_arg_info_ReleaseMediaPlayerKeys_application, NULL};
static const GDBusArgInfo * const _gnome_media_keys_dbus_arg_info_ReleaseMediaPlayerKeys_out[] = {NULL};
static const GDBusMethodInfo _gnome_media_keys_dbus_method_info_ReleaseMediaPlayerKeys = {-1, "ReleaseMediaPlayerKeys", (GDBusArgInfo **) (&_gnome_media_keys_dbus_arg_info_ReleaseMediaPlayerKeys_in), (GDBusArgInfo **) (&_gnome_media_keys_dbus_arg_info_ReleaseMediaPlayerKeys_out)};
static const GDBusMethodInfo * const _gnome_media_keys_dbus_method_info[] = {&_gnome_media_keys_dbus_method_info_GrabMediaPlayerKeys, &_gnome_media_keys_dbus_method_info_ReleaseMediaPlayerKeys, NULL};
static const GDBusArgInfo _gnome_media_keys_dbus_arg_info_media_player_key_pressed_application = {-1, "application", "s"};
static const GDBusArgInfo _gnome_media_keys_dbus_arg_info_media_player_key_pressed_key = {-1, "key", "s"};
static const GDBusArgInfo * const _gnome_media_keys_dbus_arg_info_media_player_key_pressed[] = {&_gnome_media_keys_dbus_arg_info_media_player_key_pressed_application, &_gnome_media_keys_dbus_arg_info_media_player_key_pressed_key, NULL};
static const GDBusSignalInfo _gnome_media_keys_dbus_signal_info_media_player_key_pressed = {-1, "MediaPlayerKeyPressed", (GDBusArgInfo **) (&_gnome_media_keys_dbus_arg_info_media_player_key_pressed)};
static const GDBusSignalInfo * const _gnome_media_keys_dbus_signal_info[] = {&_gnome_media_keys_dbus_signal_info_media_player_key_pressed, NULL};
static const GDBusPropertyInfo * const _gnome_media_keys_dbus_property_info[] = {NULL};
static const GDBusInterfaceInfo _gnome_media_keys_dbus_interface_info = {-1, "org.gnome.SettingsDaemon.MediaKeys", (GDBusMethodInfo **) (&_gnome_media_keys_dbus_method_info), (GDBusSignalInfo **) (&_gnome_media_keys_dbus_signal_info), (GDBusPropertyInfo **) (&_gnome_media_keys_dbus_property_info)};
static const GDBusInterfaceVTable _gnome_media_keys_dbus_interface_vtable = {gnome_media_keys_dbus_interface_method_call, gnome_media_keys_dbus_interface_get_property, gnome_media_keys_dbus_interface_set_property};

void
gnome_media_keys_GrabMediaPlayerKeys (GnomeMediaKeys* self,
                                      const gchar* application,
                                      guint32 time,
                                      GError** error)
{
	g_return_if_fail (self != NULL);
	GNOME_MEDIA_KEYS_GET_INTERFACE (self)->GrabMediaPlayerKeys (self, application, time, error);
}


void
gnome_media_keys_ReleaseMediaPlayerKeys (GnomeMediaKeys* self,
                                         const gchar* application,
                                         GError** error)
{
	g_return_if_fail (self != NULL);
	GNOME_MEDIA_KEYS_GET_INTERFACE (self)->ReleaseMediaPlayerKeys (self, application, error);
}


static void
g_cclosure_user_marshal_VOID__STRING_STRING (GClosure * closure,
                                             GValue * return_value,
                                             guint n_param_values,
                                             const GValue * param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_STRING) (gpointer data1, const char* arg_1, const char* arg_2, gpointer data2);
	register GMarshalFunc_VOID__STRING_STRING callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 3);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__STRING_STRING) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_string (param_values + 1), g_value_get_string (param_values + 2), data2);
}


static void
gnome_media_keys_default_init (GnomeMediaKeysIface * iface)
{
	gnome_media_keys_signals[GNOME_MEDIA_KEYS_MEDIA_PLAYER_KEY_PRESSED_SIGNAL] = g_signal_new ("media-player-key-pressed", TYPE_GNOME_MEDIA_KEYS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_STRING, G_TYPE_NONE, 2, G_TYPE_STRING, G_TYPE_STRING);
}


GType
gnome_media_keys_get_type (void)
{
	static volatile gsize gnome_media_keys_type_id__volatile = 0;
	if (g_once_init_enter (&gnome_media_keys_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (GnomeMediaKeysIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gnome_media_keys_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType gnome_media_keys_type_id;
		gnome_media_keys_type_id = g_type_register_static (G_TYPE_INTERFACE, "GnomeMediaKeys", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (gnome_media_keys_type_id, G_TYPE_OBJECT);
		g_type_set_qdata (gnome_media_keys_type_id, g_quark_from_static_string ("vala-dbus-proxy-type"), (void*) gnome_media_keys_proxy_get_type);
		g_type_set_qdata (gnome_media_keys_type_id, g_quark_from_static_string ("vala-dbus-interface-name"), "org.gnome.SettingsDaemon.MediaKeys");
		g_type_set_qdata (gnome_media_keys_type_id, g_quark_from_static_string ("vala-dbus-interface-info"), (void*) (&_gnome_media_keys_dbus_interface_info));
		g_type_set_qdata (gnome_media_keys_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) gnome_media_keys_register_object);
		g_once_init_leave (&gnome_media_keys_type_id__volatile, gnome_media_keys_type_id);
	}
	return gnome_media_keys_type_id__volatile;
}


G_DEFINE_TYPE_EXTENDED (GnomeMediaKeysProxy, gnome_media_keys_proxy, G_TYPE_DBUS_PROXY, 0, G_IMPLEMENT_INTERFACE (TYPE_GNOME_MEDIA_KEYS, gnome_media_keys_proxy_gnome_media_keys_interface_init) )
static void
gnome_media_keys_proxy_class_init (GnomeMediaKeysProxyClass* klass)
{
	G_DBUS_PROXY_CLASS (klass)->g_signal = gnome_media_keys_proxy_g_signal;
}


static void
_dbus_handle_gnome_media_keys_media_player_key_pressed (GnomeMediaKeys* self,
                                                        GVariant* parameters)
{
	GVariantIter _arguments_iter;
	gchar* application = NULL;
	GVariant* _tmp0_;
	gchar* key = NULL;
	GVariant* _tmp1_;
	g_variant_iter_init (&_arguments_iter, parameters);
	_tmp0_ = g_variant_iter_next_value (&_arguments_iter);
	application = g_variant_dup_string (_tmp0_, NULL);
	g_variant_unref (_tmp0_);
	_tmp1_ = g_variant_iter_next_value (&_arguments_iter);
	key = g_variant_dup_string (_tmp1_, NULL);
	g_variant_unref (_tmp1_);
	g_signal_emit_by_name (self, "media-player-key-pressed", application, key);
	_g_free0 (application);
	_g_free0 (key);
}


static void
gnome_media_keys_proxy_g_signal (GDBusProxy* proxy,
                                 const gchar* sender_name,
                                 const gchar* signal_name,
                                 GVariant* parameters)
{
	if (strcmp (signal_name, "MediaPlayerKeyPressed") == 0) {
		_dbus_handle_gnome_media_keys_media_player_key_pressed ((GnomeMediaKeys*) proxy, parameters);
	}
}


static void
gnome_media_keys_proxy_init (GnomeMediaKeysProxy* self)
{
}


static void
gnome_media_keys_proxy_GrabMediaPlayerKeys (GnomeMediaKeys* self,
                                            const gchar* application,
                                            guint32 time,
                                            GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.gnome.SettingsDaemon.MediaKeys", "GrabMediaPlayerKeys");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (application));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_uint32 (time));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}


static void
gnome_media_keys_proxy_ReleaseMediaPlayerKeys (GnomeMediaKeys* self,
                                               const gchar* application,
                                               GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.gnome.SettingsDaemon.MediaKeys", "ReleaseMediaPlayerKeys");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (application));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}


static void
gnome_media_keys_proxy_gnome_media_keys_interface_init (GnomeMediaKeysIface* iface)
{
	iface->GrabMediaPlayerKeys = gnome_media_keys_proxy_GrabMediaPlayerKeys;
	iface->ReleaseMediaPlayerKeys = gnome_media_keys_proxy_ReleaseMediaPlayerKeys;
}


static void
_dbus_gnome_media_keys_GrabMediaPlayerKeys (GnomeMediaKeys* self,
                                            GVariant* _parameters_,
                                            GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	gchar* application = NULL;
	GVariant* _tmp2_;
	guint32 time = 0U;
	GVariant* _tmp3_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp2_ = g_variant_iter_next_value (&_arguments_iter);
	application = g_variant_dup_string (_tmp2_, NULL);
	g_variant_unref (_tmp2_);
	_tmp3_ = g_variant_iter_next_value (&_arguments_iter);
	time = g_variant_get_uint32 (_tmp3_);
	g_variant_unref (_tmp3_);
	gnome_media_keys_GrabMediaPlayerKeys (self, application, time, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	_g_free0 (application);
}


static void
_dbus_gnome_media_keys_ReleaseMediaPlayerKeys (GnomeMediaKeys* self,
                                               GVariant* _parameters_,
                                               GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	gchar* application = NULL;
	GVariant* _tmp4_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp4_ = g_variant_iter_next_value (&_arguments_iter);
	application = g_variant_dup_string (_tmp4_, NULL);
	g_variant_unref (_tmp4_);
	gnome_media_keys_ReleaseMediaPlayerKeys (self, application, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	_g_free0 (application);
}


static void
gnome_media_keys_dbus_interface_method_call (GDBusConnection* connection,
                                             const gchar* sender,
                                             const gchar* object_path,
                                             const gchar* interface_name,
                                             const gchar* method_name,
                                             GVariant* parameters,
                                             GDBusMethodInvocation* invocation,
                                             gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "GrabMediaPlayerKeys") == 0) {
		_dbus_gnome_media_keys_GrabMediaPlayerKeys (object, parameters, invocation);
	} else if (strcmp (method_name, "ReleaseMediaPlayerKeys") == 0) {
		_dbus_gnome_media_keys_ReleaseMediaPlayerKeys (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}


static GVariant*
gnome_media_keys_dbus_interface_get_property (GDBusConnection* connection,
                                              const gchar* sender,
                                              const gchar* object_path,
                                              const gchar* interface_name,
                                              const gchar* property_name,
                                              GError** error,
                                              gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return NULL;
}


static gboolean
gnome_media_keys_dbus_interface_set_property (GDBusConnection* connection,
                                              const gchar* sender,
                                              const gchar* object_path,
                                              const gchar* interface_name,
                                              const gchar* property_name,
                                              GVariant* value,
                                              GError** error,
                                              gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return FALSE;
}


static void
_dbus_gnome_media_keys_media_player_key_pressed (GObject* _sender,
                                                 const gchar* application,
                                                 const gchar* key,
                                                 gpointer* _data)
{
	GDBusConnection * _connection;
	const gchar * _path;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	_connection = _data[1];
	_path = _data[2];
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (application));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (key));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_connection_emit_signal (_connection, NULL, _path, "org.gnome.SettingsDaemon.MediaKeys", "MediaPlayerKeyPressed", _arguments, NULL);
}


guint
gnome_media_keys_register_object (gpointer object,
                                  GDBusConnection* connection,
                                  const gchar* path,
                                  GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_gnome_media_keys_dbus_interface_info), &_gnome_media_keys_dbus_interface_vtable, data, _gnome_media_keys_unregister_object, error);
	if (!result) {
		return 0;
	}
	g_signal_connect (object, "media-player-key-pressed", (GCallback) _dbus_gnome_media_keys_media_player_key_pressed, data);
	return result;
}


static void
_gnome_media_keys_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_signal_handlers_disconnect_by_func (data[0], _dbus_gnome_media_keys_media_player_key_pressed, data);
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}


static ServicesMediaKey*
services_media_key_construct (GType object_type)
{
	ServicesMediaKey * self = NULL;
	self = (ServicesMediaKey*) g_object_new (object_type, NULL);
	return self;
}


static ServicesMediaKey*
services_media_key_new (void)
{
	return services_media_key_construct (SERVICES_TYPE_MEDIA_KEY);
}


void
services_media_key_listen (void)
{
	ServicesMediaKey* _tmp0_;
	ServicesMediaKey* _tmp1_;
	ServicesMediaKey* _tmp2_;
	ServicesMediaKey* _tmp3_;
	_tmp0_ = services_media_key_get_instance ();
	_tmp1_ = _tmp0_;
	_tmp2_ = services_media_key_new ();
	_tmp3_ = _tmp2_;
	services_media_key_set_instance (_tmp3_);
	_g_object_unref0 (_tmp3_);
}


static void
services_media_key_pressed_key (ServicesMediaKey* self,
                                GObject* bus,
                                const gchar* application,
                                const gchar* key)
{
	Byte* _tmp0_;
	Byte* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (bus != NULL);
	g_return_if_fail (application != NULL);
	g_return_if_fail (key != NULL);
	_tmp0_ = byte_get_instance ();
	_tmp1_ = _tmp0_;
	_tmp2_ = g_application_get_application_id ((GApplication*) _tmp1_);
	_tmp3_ = _tmp2_;
	if (g_strcmp0 (application, _tmp3_) == 0) {
		if (g_strcmp0 (key, "Previous") == 0) {
			ServicesPlayer* _tmp4_;
			_tmp4_ = byte_player;
			services_player_prev (_tmp4_);
		} else {
			if (g_strcmp0 (key, "Play") == 0) {
				ServicesPlayer* _tmp5_;
				_tmp5_ = byte_player;
				g_signal_emit_by_name (_tmp5_, "toggle-playing");
			} else {
				if (g_strcmp0 (key, "Next") == 0) {
					ServicesPlayer* _tmp6_;
					_tmp6_ = byte_player;
					services_player_next (_tmp6_);
				} else {
					if (g_strcmp0 (key, "Pause") == 0) {
						ServicesPlayer* _tmp7_;
						_tmp7_ = byte_player;
						services_player_pause (_tmp7_);
					}
				}
			}
		}
	}
}


ServicesMediaKey*
services_media_key_get_instance (void)
{
	ServicesMediaKey* result;
	ServicesMediaKey* _tmp0_;
	_tmp0_ = services_media_key__instance;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
services_media_key_set_instance (ServicesMediaKey* value)
{
	ServicesMediaKey* _tmp0_;
	_tmp0_ = _g_object_ref0 (value);
	_g_object_unref0 (services_media_key__instance);
	services_media_key__instance = _tmp0_;
}


static void
_services_media_key_pressed_key_gnome_media_keys_media_player_key_pressed (GnomeMediaKeys* _sender,
                                                                           const gchar* application,
                                                                           const gchar* key,
                                                                           gpointer self)
{
	services_media_key_pressed_key ((ServicesMediaKey*) self, _sender, application, key);
}


static GObject *
services_media_key_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ServicesMediaKey * self;
	GnomeMediaKeys* _tmp0_;
	GnomeMediaKeys* _tmp6_;
	GError * _inner_error_ = NULL;
	parent_class = G_OBJECT_CLASS (services_media_key_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SERVICES_TYPE_MEDIA_KEY, ServicesMediaKey);
	_tmp0_ = self->priv->media_keys;
	_vala_assert (_tmp0_ == NULL, "media_keys == null");
	{
		GnomeMediaKeys* _tmp1_ = NULL;
		GnomeMediaKeys* _tmp2_;
		GnomeMediaKeys* _tmp3_;
		_tmp2_ = g_initable_new (TYPE_GNOME_MEDIA_KEYS_PROXY, NULL, &_inner_error_, "g-flags", 0, "g-name", "org.gnome.SettingsDaemon", "g-bus-type", G_BUS_TYPE_SESSION, "g-object-path", "/org/gnome/SettingsDaemon/MediaKeys", "g-interface-name", "org.gnome.SettingsDaemon.MediaKeys", "g-interface-info", g_type_get_qdata (TYPE_GNOME_MEDIA_KEYS, g_quark_from_static_string ("vala-dbus-interface-info")), NULL);
		_tmp1_ = (GnomeMediaKeys*) _tmp2_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch15_g_error;
		}
		_tmp3_ = _tmp1_;
		_tmp1_ = NULL;
		_g_object_unref0 (self->priv->media_keys);
		self->priv->media_keys = _tmp3_;
		_g_object_unref0 (_tmp1_);
	}
	goto __finally15;
	__catch15_g_error:
	{
		GError* e = NULL;
		GError* _tmp4_;
		const gchar* _tmp5_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp4_ = e;
		_tmp5_ = _tmp4_->message;
		g_warning ("MediaKey.vala:18: Mediakeys error: %s", _tmp5_);
		_g_error_free0 (e);
	}
	__finally15:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
	}
	_tmp6_ = self->priv->media_keys;
	if (_tmp6_ != NULL) {
		GnomeMediaKeys* _tmp7_;
		_tmp7_ = self->priv->media_keys;
		g_signal_connect_object (_tmp7_, "media-player-key-pressed", (GCallback) _services_media_key_pressed_key_gnome_media_keys_media_player_key_pressed, self, 0);
		{
			GnomeMediaKeys* _tmp8_;
			Byte* _tmp9_;
			Byte* _tmp10_;
			const gchar* _tmp11_;
			const gchar* _tmp12_;
			_tmp8_ = self->priv->media_keys;
			_tmp9_ = byte_get_instance ();
			_tmp10_ = _tmp9_;
			_tmp11_ = g_application_get_application_id ((GApplication*) _tmp10_);
			_tmp12_ = _tmp11_;
			gnome_media_keys_GrabMediaPlayerKeys (_tmp8_, _tmp12_, (guint32) 0, &_inner_error_);
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch16_g_error;
			}
		}
		goto __finally16;
		__catch16_g_error:
		{
			GError* err = NULL;
			GError* _tmp13_;
			const gchar* _tmp14_;
			err = _inner_error_;
			_inner_error_ = NULL;
			_tmp13_ = err;
			_tmp14_ = _tmp13_->message;
			g_warning ("MediaKey.vala:27: Could not grab media player keys: %s", _tmp14_);
			_g_error_free0 (err);
		}
		__finally16:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
		}
	}
	return obj;
}


static void
services_media_key_class_init (ServicesMediaKeyClass * klass)
{
	services_media_key_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (ServicesMediaKeyPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_services_media_key_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_services_media_key_set_property;
	G_OBJECT_CLASS (klass)->constructor = services_media_key_constructor;
	G_OBJECT_CLASS (klass)->finalize = services_media_key_finalize;
}


static void
services_media_key_instance_init (ServicesMediaKey * self)
{
	self->priv = SERVICES_MEDIA_KEY_GET_PRIVATE (self);
}


static void
services_media_key_finalize (GObject * obj)
{
	ServicesMediaKey * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SERVICES_TYPE_MEDIA_KEY, ServicesMediaKey);
	_g_object_unref0 (self->priv->media_keys);
	G_OBJECT_CLASS (services_media_key_parent_class)->finalize (obj);
}


GType
services_media_key_get_type (void)
{
	static volatile gsize services_media_key_type_id__volatile = 0;
	if (g_once_init_enter (&services_media_key_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ServicesMediaKeyClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) services_media_key_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ServicesMediaKey), 0, (GInstanceInitFunc) services_media_key_instance_init, NULL };
		GType services_media_key_type_id;
		services_media_key_type_id = g_type_register_static (G_TYPE_OBJECT, "ServicesMediaKey", &g_define_type_info, 0);
		g_once_init_leave (&services_media_key_type_id__volatile, services_media_key_type_id);
	}
	return services_media_key_type_id__volatile;
}


static void
_vala_services_media_key_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	ServicesMediaKey * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SERVICES_TYPE_MEDIA_KEY, ServicesMediaKey);
	switch (property_id) {
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_services_media_key_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	ServicesMediaKey * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SERVICES_TYPE_MEDIA_KEY, ServicesMediaKey);
	switch (property_id) {
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



