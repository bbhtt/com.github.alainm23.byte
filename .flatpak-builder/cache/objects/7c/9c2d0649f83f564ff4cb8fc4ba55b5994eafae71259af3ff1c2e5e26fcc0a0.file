/* Artist.c generated by valac 0.40.11, the Vala compiler
 * generated from Artist.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>


#define OBJECTS_TYPE_ARTIST (objects_artist_get_type ())
#define OBJECTS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ARTIST, ObjectsArtist))
#define OBJECTS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ARTIST, ObjectsArtistClass))
#define OBJECTS_IS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ARTIST))
#define OBJECTS_IS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ARTIST))
#define OBJECTS_ARTIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ARTIST, ObjectsArtistClass))

typedef struct _ObjectsArtist ObjectsArtist;
typedef struct _ObjectsArtistClass ObjectsArtistClass;
typedef struct _ObjectsArtistPrivate ObjectsArtistPrivate;
enum  {
	OBJECTS_ARTIST_0_PROPERTY,
	OBJECTS_ARTIST_NUM_PROPERTIES
};
static GParamSpec* objects_artist_properties[OBJECTS_ARTIST_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

struct _ObjectsArtist {
	GObject parent_instance;
	ObjectsArtistPrivate * priv;
	gint id;
	gchar* name;
};

struct _ObjectsArtistClass {
	GObjectClass parent_class;
};


static gpointer objects_artist_parent_class = NULL;

GType objects_artist_get_type (void) G_GNUC_CONST;
ObjectsArtist* objects_artist_new (gint id,
                                   const gchar* name);
ObjectsArtist* objects_artist_construct (GType object_type,
                                         gint id,
                                         const gchar* name);
static void objects_artist_finalize (GObject * obj);


ObjectsArtist*
objects_artist_construct (GType object_type,
                          gint id,
                          const gchar* name)
{
	ObjectsArtist * self = NULL;
	gchar* _tmp0_;
	g_return_val_if_fail (name != NULL, NULL);
	self = (ObjectsArtist*) g_object_new (object_type, NULL);
	self->id = id;
	_tmp0_ = g_strdup (name);
	_g_free0 (self->name);
	self->name = _tmp0_;
	return self;
}


ObjectsArtist*
objects_artist_new (gint id,
                    const gchar* name)
{
	return objects_artist_construct (OBJECTS_TYPE_ARTIST, id, name);
}


static void
objects_artist_class_init (ObjectsArtistClass * klass)
{
	objects_artist_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = objects_artist_finalize;
}


static void
objects_artist_instance_init (ObjectsArtist * self)
{
}


static void
objects_artist_finalize (GObject * obj)
{
	ObjectsArtist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_ARTIST, ObjectsArtist);
	_g_free0 (self->name);
	G_OBJECT_CLASS (objects_artist_parent_class)->finalize (obj);
}


GType
objects_artist_get_type (void)
{
	static volatile gsize objects_artist_type_id__volatile = 0;
	if (g_once_init_enter (&objects_artist_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ObjectsArtistClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_artist_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsArtist), 0, (GInstanceInitFunc) objects_artist_instance_init, NULL };
		GType objects_artist_type_id;
		objects_artist_type_id = g_type_register_static (G_TYPE_OBJECT, "ObjectsArtist", &g_define_type_info, 0);
		g_once_init_leave (&objects_artist_type_id__volatile, objects_artist_type_id);
	}
	return objects_artist_type_id__volatile;
}



