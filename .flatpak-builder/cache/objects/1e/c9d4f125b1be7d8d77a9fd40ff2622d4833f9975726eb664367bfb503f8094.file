/* RadioRow.c generated by valac 0.40.11, the Vala compiler
 * generated from RadioRow.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <pango/pango.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>
#include <granite.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <stdio.h>


#define WIDGETS_TYPE_RADIO_ROW (widgets_radio_row_get_type ())
#define WIDGETS_RADIO_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_RADIO_ROW, WidgetsRadioRow))
#define WIDGETS_RADIO_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_RADIO_ROW, WidgetsRadioRowClass))
#define WIDGETS_IS_RADIO_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_RADIO_ROW))
#define WIDGETS_IS_RADIO_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_RADIO_ROW))
#define WIDGETS_RADIO_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_RADIO_ROW, WidgetsRadioRowClass))

typedef struct _WidgetsRadioRow WidgetsRadioRow;
typedef struct _WidgetsRadioRowClass WidgetsRadioRowClass;
typedef struct _WidgetsRadioRowPrivate WidgetsRadioRowPrivate;

#define OBJECTS_TYPE_RADIO (objects_radio_get_type ())
#define OBJECTS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_RADIO, ObjectsRadio))
#define OBJECTS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_RADIO, ObjectsRadioClass))
#define OBJECTS_IS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_RADIO))
#define OBJECTS_IS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_RADIO))
#define OBJECTS_RADIO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_RADIO, ObjectsRadioClass))

typedef struct _ObjectsRadio ObjectsRadio;
typedef struct _ObjectsRadioClass ObjectsRadioClass;
enum  {
	WIDGETS_RADIO_ROW_0_PROPERTY,
	WIDGETS_RADIO_ROW_RADIO_PROPERTY,
	WIDGETS_RADIO_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_radio_row_properties[WIDGETS_RADIO_ROW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;
typedef struct _Block32Data Block32Data;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_PLAYER (services_player_get_type ())
#define SERVICES_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_PLAYER, ServicesPlayer))
#define SERVICES_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_PLAYER, ServicesPlayerClass))
#define SERVICES_IS_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_PLAYER))
#define SERVICES_IS_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_PLAYER))
#define SERVICES_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_PLAYER, ServicesPlayerClass))

typedef struct _ServicesPlayer ServicesPlayer;
typedef struct _ServicesPlayerClass ServicesPlayerClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	WIDGETS_RADIO_ROW_SEND_NOTIFICATION_ERROR_SIGNAL,
	WIDGETS_RADIO_ROW_NUM_SIGNALS
};
static guint widgets_radio_row_signals[WIDGETS_RADIO_ROW_NUM_SIGNALS] = {0};

struct _WidgetsRadioRow {
	GtkListBoxRow parent_instance;
	WidgetsRadioRowPrivate * priv;
};

struct _WidgetsRadioRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsRadioRowPrivate {
	ObjectsRadio* _radio;
	GtkLabel* name_label;
	GtkLabel* country_state_label;
};

struct _Block32Data {
	int _ref_count_;
	WidgetsRadioRow* self;
	GtkRevealer* playing_revealer;
	WidgetsCover* image_cover;
	GtkRevealer* remove_revealer;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};


static gpointer widgets_radio_row_parent_class = NULL;
extern Utils* byte_utils;
extern ServicesPlayer* byte_player;
extern ServicesDatabase* byte_database;

GType widgets_radio_row_get_type (void) G_GNUC_CONST;
GType objects_radio_get_type (void) G_GNUC_CONST;
#define WIDGETS_RADIO_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_RADIO_ROW, WidgetsRadioRowPrivate))
WidgetsRadioRow* widgets_radio_row_new (ObjectsRadio* radio);
WidgetsRadioRow* widgets_radio_row_construct (GType object_type,
                                              ObjectsRadio* radio);
ObjectsRadio* widgets_radio_row_get_radio (WidgetsRadioRow* self);
static void widgets_radio_row_set_radio (WidgetsRadioRow* self,
                                  ObjectsRadio* value);
static GObject * widgets_radio_row_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties);
GType widgets_cover_get_type (void) G_GNUC_CONST;
static Block32Data* block32_data_ref (Block32Data* _data32_);
static void block32_data_unref (void * _userdata_);
const gchar* objects_radio_get_name (ObjectsRadio* self);
const gchar* objects_radio_get_country (ObjectsRadio* self);
GType utils_get_type (void) G_GNUC_CONST;
gint objects_radio_get_id (ObjectsRadio* self);
WidgetsCover* widgets_cover_new_from_file (const gchar* filepath,
                                           gint pixel_size,
                                           const gchar* type);
WidgetsCover* widgets_cover_construct_from_file (GType object_type,
                                                 const gchar* filepath,
                                                 gint pixel_size,
                                                 const gchar* type);
GType services_player_get_type (void) G_GNUC_CONST;
static void _widgets_radio_row___lambda177_ (Block32Data* _data32_,
                                      ObjectsRadio* current_radio);
static void __widgets_radio_row___lambda177__services_player_current_radio_changed (ServicesPlayer* _sender,
                                                                             ObjectsRadio* radio,
                                                                             gpointer self);
static gboolean _widgets_radio_row___lambda178_ (Block32Data* _data32_,
                                          GdkEventCrossing* event);
static gboolean __widgets_radio_row___lambda178__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                         GdkEventCrossing* event,
                                                                         gpointer self);
static gboolean _widgets_radio_row___lambda179_ (Block32Data* _data32_,
                                          GdkEventCrossing* event);
static gboolean __widgets_radio_row___lambda179__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                         GdkEventCrossing* event,
                                                                         gpointer self);
static void _widgets_radio_row___lambda180_ (WidgetsRadioRow* self);
GType services_database_get_type (void) G_GNUC_CONST;
gboolean services_database_remove_radio_from_library (ServicesDatabase* self,
                                                      ObjectsRadio* radio);
static void __widgets_radio_row___lambda180__gtk_button_clicked (GtkButton* _sender,
                                                          gpointer self);
static void _widgets_radio_row___lambda181_ (Block32Data* _data32_,
                                      gint id);
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
static void __widgets_radio_row___lambda181__utils_radio_image_downloaded (Utils* _sender,
                                                                    gint id,
                                                                    gpointer self);
static void widgets_radio_row_finalize (GObject * obj);
static void _vala_widgets_radio_row_get_property (GObject * object,
                                           guint property_id,
                                           GValue * value,
                                           GParamSpec * pspec);
static void _vala_widgets_radio_row_set_property (GObject * object,
                                           guint property_id,
                                           const GValue * value,
                                           GParamSpec * pspec);


WidgetsRadioRow*
widgets_radio_row_construct (GType object_type,
                             ObjectsRadio* radio)
{
	WidgetsRadioRow * self = NULL;
	g_return_val_if_fail (radio != NULL, NULL);
	self = (WidgetsRadioRow*) g_object_new (object_type, "radio", radio, NULL);
	return self;
}


WidgetsRadioRow*
widgets_radio_row_new (ObjectsRadio* radio)
{
	return widgets_radio_row_construct (WIDGETS_TYPE_RADIO_ROW, radio);
}


ObjectsRadio*
widgets_radio_row_get_radio (WidgetsRadioRow* self)
{
	ObjectsRadio* result;
	ObjectsRadio* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_radio;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
widgets_radio_row_set_radio (WidgetsRadioRow* self,
                             ObjectsRadio* value)
{
	g_return_if_fail (self != NULL);
	if (widgets_radio_row_get_radio (self) != value) {
		ObjectsRadio* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_radio);
		self->priv->_radio = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, widgets_radio_row_properties[WIDGETS_RADIO_ROW_RADIO_PROPERTY]);
	}
}


static Block32Data*
block32_data_ref (Block32Data* _data32_)
{
	g_atomic_int_inc (&_data32_->_ref_count_);
	return _data32_;
}


static void
block32_data_unref (void * _userdata_)
{
	Block32Data* _data32_;
	_data32_ = (Block32Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data32_->_ref_count_)) {
		WidgetsRadioRow* self;
		self = _data32_->self;
		_g_object_unref0 (_data32_->remove_revealer);
		_g_object_unref0 (_data32_->image_cover);
		_g_object_unref0 (_data32_->playing_revealer);
		_g_object_unref0 (self);
		g_slice_free (Block32Data, _data32_);
	}
}


static void
_widgets_radio_row___lambda177_ (Block32Data* _data32_,
                                 ObjectsRadio* current_radio)
{
	WidgetsRadioRow* self;
	ObjectsRadio* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	self = _data32_->self;
	_tmp0_ = self->priv->_radio;
	_tmp1_ = objects_radio_get_id (_tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = objects_radio_get_id (current_radio);
	_tmp4_ = _tmp3_;
	if (_tmp2_ == _tmp4_) {
		GtkRevealer* _tmp5_;
		_tmp5_ = _data32_->playing_revealer;
		gtk_revealer_set_reveal_child (_tmp5_, TRUE);
	} else {
		GtkRevealer* _tmp6_;
		_tmp6_ = _data32_->playing_revealer;
		gtk_revealer_set_reveal_child (_tmp6_, FALSE);
	}
}


static void
__widgets_radio_row___lambda177__services_player_current_radio_changed (ServicesPlayer* _sender,
                                                                        ObjectsRadio* radio,
                                                                        gpointer self)
{
	_widgets_radio_row___lambda177_ (self, radio);
}


static gboolean
_widgets_radio_row___lambda178_ (Block32Data* _data32_,
                                 GdkEventCrossing* event)
{
	WidgetsRadioRow* self;
	gboolean result = FALSE;
	GtkRevealer* _tmp0_;
	self = _data32_->self;
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp0_ = _data32_->remove_revealer;
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
	result = FALSE;
	return result;
}


static gboolean
__widgets_radio_row___lambda178__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                GdkEventCrossing* event,
                                                                gpointer self)
{
	gboolean result;
	result = _widgets_radio_row___lambda178_ (self, event);
	return result;
}


static gboolean
_widgets_radio_row___lambda179_ (Block32Data* _data32_,
                                 GdkEventCrossing* event)
{
	WidgetsRadioRow* self;
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	GtkRevealer* _tmp1_;
	self = _data32_->self;
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp0_ = event->detail;
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
		result = FALSE;
		return result;
	}
	_tmp1_ = _data32_->remove_revealer;
	gtk_revealer_set_reveal_child (_tmp1_, FALSE);
	result = FALSE;
	return result;
}


static gboolean
__widgets_radio_row___lambda179__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                GdkEventCrossing* event,
                                                                gpointer self)
{
	gboolean result;
	result = _widgets_radio_row___lambda179_ (self, event);
	return result;
}


static void
_widgets_radio_row___lambda180_ (WidgetsRadioRow* self)
{
	GraniteMessageDialog* message_dialog = NULL;
	ObjectsRadio* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GraniteMessageDialog* _tmp5_;
	GraniteMessageDialog* _tmp6_;
	GtkButton* set_button = NULL;
	GtkButton* _tmp7_;
	GtkButton* _tmp8_;
	GtkStyleContext* _tmp9_;
	GraniteMessageDialog* _tmp10_;
	GtkButton* _tmp11_;
	GraniteMessageDialog* _tmp12_;
	GraniteMessageDialog* _tmp13_;
	GraniteMessageDialog* _tmp16_;
	_tmp0_ = self->priv->_radio;
	_tmp1_ = objects_radio_get_name (_tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = g_strdup_printf (_ ("Are you sure you want to delete <b>%s</b> from your library?"), _tmp2_);
	_tmp4_ = _tmp3_;
	_tmp5_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Delete from library?"), _tmp4_, "dialog-warning", GTK_BUTTONS_CANCEL);
	g_object_ref_sink (_tmp5_);
	_tmp6_ = _tmp5_;
	_g_free0 (_tmp4_);
	message_dialog = _tmp6_;
	_tmp7_ = (GtkButton*) gtk_button_new_with_label (_ ("Delete"));
	g_object_ref_sink (_tmp7_);
	set_button = _tmp7_;
	_tmp8_ = set_button;
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
	gtk_style_context_add_class (_tmp9_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
	_tmp10_ = message_dialog;
	_tmp11_ = set_button;
	gtk_dialog_add_action_widget ((GtkDialog*) _tmp10_, (GtkWidget*) _tmp11_, (gint) GTK_RESPONSE_ACCEPT);
	_tmp12_ = message_dialog;
	gtk_widget_show_all ((GtkWidget*) _tmp12_);
	_tmp13_ = message_dialog;
	if (gtk_dialog_run ((GtkDialog*) _tmp13_) == ((gint) GTK_RESPONSE_ACCEPT)) {
		ServicesDatabase* _tmp14_;
		ObjectsRadio* _tmp15_;
		_tmp14_ = byte_database;
		_tmp15_ = self->priv->_radio;
		if (services_database_remove_radio_from_library (_tmp14_, _tmp15_)) {
			gtk_widget_destroy ((GtkWidget*) self);
		}
	}
	_tmp16_ = message_dialog;
	gtk_widget_destroy ((GtkWidget*) _tmp16_);
	_g_object_unref0 (set_button);
	_g_object_unref0 (message_dialog);
}


static void
__widgets_radio_row___lambda180__gtk_button_clicked (GtkButton* _sender,
                                                     gpointer self)
{
	_widgets_radio_row___lambda180_ ((WidgetsRadioRow*) self);
}


static void
_widgets_radio_row___lambda181_ (Block32Data* _data32_,
                                 gint id)
{
	WidgetsRadioRow* self;
	ObjectsRadio* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	GError * _inner_error_ = NULL;
	self = _data32_->self;
	_tmp0_ = self->priv->_radio;
	_tmp1_ = objects_radio_get_id (_tmp0_);
	_tmp2_ = _tmp1_;
	if (_tmp2_ == id) {
		{
			GdkPixbuf* _tmp3_ = NULL;
			Utils* _tmp4_;
			const gchar* _tmp5_;
			gchar* _tmp6_;
			gchar* _tmp7_;
			gchar* _tmp8_;
			gchar* _tmp9_;
			GdkPixbuf* _tmp10_;
			GdkPixbuf* _tmp11_;
			WidgetsCover* _tmp12_;
			_tmp4_ = byte_utils;
			_tmp5_ = _tmp4_->COVER_FOLDER;
			_tmp6_ = g_strdup_printf ("radio-%i.jpg", id);
			_tmp7_ = _tmp6_;
			_tmp8_ = g_build_filename (_tmp5_, _tmp7_, NULL);
			_tmp9_ = _tmp8_;
			_tmp10_ = gdk_pixbuf_new_from_file_at_size (_tmp9_, 48, 48, &_inner_error_);
			_tmp11_ = _tmp10_;
			_g_free0 (_tmp9_);
			_g_free0 (_tmp7_);
			_tmp3_ = _tmp11_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch39_g_error;
			}
			_tmp12_ = _data32_->image_cover;
			widgets_cover_set_pixbuf (_tmp12_, _tmp3_);
			_g_object_unref0 (_tmp3_);
		}
		goto __finally39;
		__catch39_g_error:
		{
			GError* e = NULL;
			FILE* _tmp13_;
			GError* _tmp14_;
			const gchar* _tmp15_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp13_ = stderr;
			_tmp14_ = e;
			_tmp15_ = _tmp14_->message;
			fprintf (_tmp13_, "Error setting default avatar icon: %s ", _tmp15_);
			_g_error_free0 (e);
		}
		__finally39:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
}


static void
__widgets_radio_row___lambda181__utils_radio_image_downloaded (Utils* _sender,
                                                               gint id,
                                                               gpointer self)
{
	_widgets_radio_row___lambda181_ (self, id);
}


static GObject *
widgets_radio_row_constructor (GType type,
                               guint n_construct_properties,
                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsRadioRow * self;
	Block32Data* _data32_;
	GtkStyleContext* _tmp0_;
	ObjectsRadio* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	GtkImage* playing_icon = NULL;
	GtkImage* _tmp4_;
	GtkImage* _tmp5_;
	GThemedIcon* _tmp6_;
	GThemedIcon* _tmp7_;
	GtkImage* _tmp8_;
	GtkStyleContext* _tmp9_;
	GtkImage* _tmp10_;
	GtkRevealer* _tmp11_;
	GtkRevealer* _tmp12_;
	GtkRevealer* _tmp13_;
	GtkRevealer* _tmp14_;
	GtkRevealer* _tmp15_;
	GtkImage* _tmp16_;
	GtkRevealer* _tmp17_;
	ObjectsRadio* _tmp18_;
	const gchar* _tmp19_;
	const gchar* _tmp20_;
	GtkLabel* _tmp21_;
	GtkLabel* _tmp22_;
	GtkLabel* _tmp23_;
	GtkStyleContext* _tmp24_;
	GtkLabel* _tmp25_;
	GtkLabel* _tmp26_;
	GtkLabel* _tmp27_;
	ObjectsRadio* _tmp28_;
	const gchar* _tmp29_;
	const gchar* _tmp30_;
	GtkLabel* _tmp31_;
	GtkLabel* _tmp32_;
	GtkLabel* _tmp33_;
	GtkLabel* _tmp34_;
	GtkLabel* _tmp35_;
	gchar* cover_path = NULL;
	Utils* _tmp36_;
	const gchar* _tmp37_;
	ObjectsRadio* _tmp38_;
	gint _tmp39_;
	gint _tmp40_;
	gchar* _tmp41_;
	gchar* _tmp42_;
	gchar* _tmp43_;
	gchar* _tmp44_;
	const gchar* _tmp45_;
	WidgetsCover* _tmp46_;
	WidgetsCover* _tmp47_;
	WidgetsCover* _tmp48_;
	GtkOverlay* overlay = NULL;
	GtkOverlay* _tmp49_;
	GtkOverlay* _tmp50_;
	GtkOverlay* _tmp51_;
	GtkOverlay* _tmp52_;
	GtkRevealer* _tmp53_;
	GtkOverlay* _tmp54_;
	WidgetsCover* _tmp55_;
	GtkButton* remove_button = NULL;
	GtkButton* _tmp56_;
	GtkButton* _tmp57_;
	GtkButton* _tmp58_;
	GtkButton* _tmp59_;
	GtkButton* _tmp60_;
	GtkButton* _tmp61_;
	GtkStyleContext* _tmp62_;
	GtkButton* _tmp63_;
	GtkStyleContext* _tmp64_;
	GtkButton* _tmp65_;
	GtkStyleContext* _tmp66_;
	GtkRevealer* _tmp67_;
	GtkRevealer* _tmp68_;
	GtkRevealer* _tmp69_;
	GtkRevealer* _tmp70_;
	GtkRevealer* _tmp71_;
	GtkButton* _tmp72_;
	GtkRevealer* _tmp73_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp74_;
	GtkGrid* _tmp75_;
	GtkGrid* _tmp76_;
	GtkGrid* _tmp77_;
	GtkGrid* _tmp78_;
	GtkOverlay* _tmp79_;
	GtkGrid* _tmp80_;
	GtkLabel* _tmp81_;
	GtkGrid* _tmp82_;
	GtkLabel* _tmp83_;
	GtkGrid* _tmp84_;
	GtkRevealer* _tmp85_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp86_;
	GtkEventBox* _tmp87_;
	GtkEventBox* _tmp88_;
	GtkGrid* _tmp89_;
	GtkEventBox* _tmp90_;
	ServicesPlayer* _tmp91_;
	GtkEventBox* _tmp92_;
	GtkEventBox* _tmp93_;
	GtkButton* _tmp94_;
	Utils* _tmp95_;
	parent_class = G_OBJECT_CLASS (widgets_radio_row_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_RADIO_ROW, WidgetsRadioRow);
	_data32_ = g_slice_new0 (Block32Data);
	_data32_->_ref_count_ = 1;
	_data32_->self = g_object_ref (self);
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp0_, "album-row");
	_tmp1_ = self->priv->_radio;
	_tmp2_ = objects_radio_get_name (_tmp1_);
	_tmp3_ = _tmp2_;
	gtk_widget_set_tooltip_text ((GtkWidget*) self, _tmp3_);
	_tmp4_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp4_);
	playing_icon = _tmp4_;
	_tmp5_ = playing_icon;
	_tmp6_ = (GThemedIcon*) g_themed_icon_new ("audio-volume-medium-symbolic");
	_tmp7_ = _tmp6_;
	g_object_set (_tmp5_, "gicon", (GIcon*) _tmp7_, NULL);
	_g_object_unref0 (_tmp7_);
	_tmp8_ = playing_icon;
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
	gtk_style_context_add_class (_tmp9_, "playing-ani-color");
	_tmp10_ = playing_icon;
	gtk_image_set_pixel_size (_tmp10_, 16);
	_tmp11_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp11_);
	_data32_->playing_revealer = _tmp11_;
	_tmp12_ = _data32_->playing_revealer;
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
	_tmp13_ = _data32_->playing_revealer;
	gtk_widget_set_valign ((GtkWidget*) _tmp13_, GTK_ALIGN_CENTER);
	_tmp14_ = _data32_->playing_revealer;
	gtk_revealer_set_transition_type (_tmp14_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
	_tmp15_ = _data32_->playing_revealer;
	_tmp16_ = playing_icon;
	gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp16_);
	_tmp17_ = _data32_->playing_revealer;
	gtk_revealer_set_reveal_child (_tmp17_, FALSE);
	_tmp18_ = self->priv->_radio;
	_tmp19_ = objects_radio_get_name (_tmp18_);
	_tmp20_ = _tmp19_;
	_tmp21_ = (GtkLabel*) gtk_label_new (_tmp20_);
	g_object_ref_sink (_tmp21_);
	_g_object_unref0 (self->priv->name_label);
	self->priv->name_label = _tmp21_;
	_tmp22_ = self->priv->name_label;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp22_, 6);
	_tmp23_ = self->priv->name_label;
	_tmp24_ = gtk_widget_get_style_context ((GtkWidget*) _tmp23_);
	gtk_style_context_add_class (_tmp24_, "font-bold");
	_tmp25_ = self->priv->name_label;
	gtk_label_set_ellipsize (_tmp25_, PANGO_ELLIPSIZE_END);
	_tmp26_ = self->priv->name_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_START);
	_tmp27_ = self->priv->name_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp27_, GTK_ALIGN_END);
	_tmp28_ = self->priv->_radio;
	_tmp29_ = objects_radio_get_country (_tmp28_);
	_tmp30_ = _tmp29_;
	_tmp31_ = (GtkLabel*) gtk_label_new (_tmp30_);
	g_object_ref_sink (_tmp31_);
	_g_object_unref0 (self->priv->country_state_label);
	self->priv->country_state_label = _tmp31_;
	_tmp32_ = self->priv->country_state_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp32_, GTK_ALIGN_START);
	_tmp33_ = self->priv->country_state_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp33_, GTK_ALIGN_START);
	_tmp34_ = self->priv->country_state_label;
	gtk_label_set_max_width_chars (_tmp34_, 45);
	_tmp35_ = self->priv->country_state_label;
	gtk_label_set_ellipsize (_tmp35_, PANGO_ELLIPSIZE_END);
	_tmp36_ = byte_utils;
	_tmp37_ = _tmp36_->COVER_FOLDER;
	_tmp38_ = self->priv->_radio;
	_tmp39_ = objects_radio_get_id (_tmp38_);
	_tmp40_ = _tmp39_;
	_tmp41_ = g_strdup_printf ("radio-%i.jpg", _tmp40_);
	_tmp42_ = _tmp41_;
	_tmp43_ = g_build_filename (_tmp37_, _tmp42_, NULL);
	_tmp44_ = _tmp43_;
	_g_free0 (_tmp42_);
	cover_path = _tmp44_;
	_tmp45_ = cover_path;
	_tmp46_ = widgets_cover_new_from_file (_tmp45_, 48, "radio");
	g_object_ref_sink (_tmp46_);
	_data32_->image_cover = _tmp46_;
	_tmp47_ = _data32_->image_cover;
	gtk_widget_set_halign ((GtkWidget*) _tmp47_, GTK_ALIGN_START);
	_tmp48_ = _data32_->image_cover;
	gtk_widget_set_valign ((GtkWidget*) _tmp48_, GTK_ALIGN_START);
	_tmp49_ = (GtkOverlay*) gtk_overlay_new ();
	g_object_ref_sink (_tmp49_);
	overlay = _tmp49_;
	_tmp50_ = overlay;
	gtk_widget_set_halign ((GtkWidget*) _tmp50_, GTK_ALIGN_START);
	_tmp51_ = overlay;
	gtk_widget_set_valign ((GtkWidget*) _tmp51_, GTK_ALIGN_START);
	_tmp52_ = overlay;
	_tmp53_ = _data32_->playing_revealer;
	gtk_overlay_add_overlay (_tmp52_, (GtkWidget*) _tmp53_);
	_tmp54_ = overlay;
	_tmp55_ = _data32_->image_cover;
	gtk_container_add ((GtkContainer*) _tmp54_, (GtkWidget*) _tmp55_);
	_tmp56_ = (GtkButton*) gtk_button_new_from_icon_name ("edit-delete-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp56_);
	remove_button = _tmp56_;
	_tmp57_ = remove_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp57_, FALSE);
	_tmp58_ = remove_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp58_, GTK_ALIGN_CENTER);
	_tmp59_ = remove_button;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp59_, _ ("Remove"));
	_tmp60_ = remove_button;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp60_, 2);
	_tmp61_ = remove_button;
	_tmp62_ = gtk_widget_get_style_context ((GtkWidget*) _tmp61_);
	gtk_style_context_add_class (_tmp62_, GTK_STYLE_CLASS_FLAT);
	_tmp63_ = remove_button;
	_tmp64_ = gtk_widget_get_style_context ((GtkWidget*) _tmp63_);
	gtk_style_context_add_class (_tmp64_, "options-button");
	_tmp65_ = remove_button;
	_tmp66_ = gtk_widget_get_style_context ((GtkWidget*) _tmp65_);
	gtk_style_context_remove_class (_tmp66_, "button");
	_tmp67_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp67_);
	_data32_->remove_revealer = _tmp67_;
	_tmp68_ = _data32_->remove_revealer;
	gtk_widget_set_halign ((GtkWidget*) _tmp68_, GTK_ALIGN_END);
	_tmp69_ = _data32_->remove_revealer;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp69_, TRUE);
	_tmp70_ = _data32_->remove_revealer;
	gtk_revealer_set_transition_type (_tmp70_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT);
	_tmp71_ = _data32_->remove_revealer;
	_tmp72_ = remove_button;
	gtk_container_add ((GtkContainer*) _tmp71_, (GtkWidget*) _tmp72_);
	_tmp73_ = _data32_->remove_revealer;
	gtk_revealer_set_reveal_child (_tmp73_, FALSE);
	_tmp74_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp74_);
	main_grid = _tmp74_;
	_tmp75_ = main_grid;
	g_object_set ((GtkWidget*) _tmp75_, "margin", 3, NULL);
	_tmp76_ = main_grid;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp76_, 6);
	_tmp77_ = main_grid;
	gtk_grid_set_column_spacing (_tmp77_, 6);
	_tmp78_ = main_grid;
	_tmp79_ = overlay;
	gtk_grid_attach (_tmp78_, (GtkWidget*) _tmp79_, 0, 0, 1, 2);
	_tmp80_ = main_grid;
	_tmp81_ = self->priv->name_label;
	gtk_grid_attach (_tmp80_, (GtkWidget*) _tmp81_, 1, 0, 1, 1);
	_tmp82_ = main_grid;
	_tmp83_ = self->priv->country_state_label;
	gtk_grid_attach (_tmp82_, (GtkWidget*) _tmp83_, 1, 1, 1, 1);
	_tmp84_ = main_grid;
	_tmp85_ = _data32_->remove_revealer;
	gtk_grid_attach (_tmp84_, (GtkWidget*) _tmp85_, 2, 0, 2, 2);
	_tmp86_ = (GtkEventBox*) gtk_event_box_new ();
	g_object_ref_sink (_tmp86_);
	eventbox = _tmp86_;
	_tmp87_ = eventbox;
	gtk_widget_add_events ((GtkWidget*) _tmp87_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
	_tmp88_ = eventbox;
	_tmp89_ = main_grid;
	gtk_container_add ((GtkContainer*) _tmp88_, (GtkWidget*) _tmp89_);
	_tmp90_ = eventbox;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp90_);
	_tmp91_ = byte_player;
	g_signal_connect_data (_tmp91_, "current-radio-changed", (GCallback) __widgets_radio_row___lambda177__services_player_current_radio_changed, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
	_tmp92_ = eventbox;
	g_signal_connect_data ((GtkWidget*) _tmp92_, "enter-notify-event", (GCallback) __widgets_radio_row___lambda178__gtk_widget_enter_notify_event, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
	_tmp93_ = eventbox;
	g_signal_connect_data ((GtkWidget*) _tmp93_, "leave-notify-event", (GCallback) __widgets_radio_row___lambda179__gtk_widget_leave_notify_event, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
	_tmp94_ = remove_button;
	g_signal_connect_object (_tmp94_, "clicked", (GCallback) __widgets_radio_row___lambda180__gtk_button_clicked, self, 0);
	_tmp95_ = byte_utils;
	g_signal_connect_data (_tmp95_, "radio-image-downloaded", (GCallback) __widgets_radio_row___lambda181__utils_radio_image_downloaded, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
	_g_object_unref0 (eventbox);
	_g_object_unref0 (main_grid);
	_g_object_unref0 (remove_button);
	_g_object_unref0 (overlay);
	_g_free0 (cover_path);
	_g_object_unref0 (playing_icon);
	block32_data_unref (_data32_);
	_data32_ = NULL;
	return obj;
}


static void
widgets_radio_row_class_init (WidgetsRadioRowClass * klass)
{
	widgets_radio_row_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsRadioRowPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_radio_row_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_radio_row_set_property;
	G_OBJECT_CLASS (klass)->constructor = widgets_radio_row_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_radio_row_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_RADIO_ROW_RADIO_PROPERTY, widgets_radio_row_properties[WIDGETS_RADIO_ROW_RADIO_PROPERTY] = g_param_spec_object ("radio", "radio", "radio", OBJECTS_TYPE_RADIO, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	widgets_radio_row_signals[WIDGETS_RADIO_ROW_SEND_NOTIFICATION_ERROR_SIGNAL] = g_signal_new ("send-notification-error", WIDGETS_TYPE_RADIO_ROW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
widgets_radio_row_instance_init (WidgetsRadioRow * self)
{
	self->priv = WIDGETS_RADIO_ROW_GET_PRIVATE (self);
}


static void
widgets_radio_row_finalize (GObject * obj)
{
	WidgetsRadioRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_RADIO_ROW, WidgetsRadioRow);
	_g_object_unref0 (self->priv->_radio);
	_g_object_unref0 (self->priv->name_label);
	_g_object_unref0 (self->priv->country_state_label);
	G_OBJECT_CLASS (widgets_radio_row_parent_class)->finalize (obj);
}


GType
widgets_radio_row_get_type (void)
{
	static volatile gsize widgets_radio_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_radio_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsRadioRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_radio_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsRadioRow), 0, (GInstanceInitFunc) widgets_radio_row_instance_init, NULL };
		GType widgets_radio_row_type_id;
		widgets_radio_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsRadioRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_radio_row_type_id__volatile, widgets_radio_row_type_id);
	}
	return widgets_radio_row_type_id__volatile;
}


static void
_vala_widgets_radio_row_get_property (GObject * object,
                                      guint property_id,
                                      GValue * value,
                                      GParamSpec * pspec)
{
	WidgetsRadioRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_RADIO_ROW, WidgetsRadioRow);
	switch (property_id) {
		case WIDGETS_RADIO_ROW_RADIO_PROPERTY:
		g_value_set_object (value, widgets_radio_row_get_radio (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_widgets_radio_row_set_property (GObject * object,
                                      guint property_id,
                                      const GValue * value,
                                      GParamSpec * pspec)
{
	WidgetsRadioRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_RADIO_ROW, WidgetsRadioRow);
	switch (property_id) {
		case WIDGETS_RADIO_ROW_RADIO_PROPERTY:
		widgets_radio_row_set_radio (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



