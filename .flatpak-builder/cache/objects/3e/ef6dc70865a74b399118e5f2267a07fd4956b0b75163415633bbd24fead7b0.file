/* PlaylistRow.c generated by valac 0.40.11, the Vala compiler
 * generated from PlaylistRow.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <pango/pango.h>
#include <glib/gi18n-lib.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <stdio.h>


#define WIDGETS_TYPE_PLAYLIST_ROW (widgets_playlist_row_get_type ())
#define WIDGETS_PLAYLIST_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_PLAYLIST_ROW, WidgetsPlaylistRow))
#define WIDGETS_PLAYLIST_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_PLAYLIST_ROW, WidgetsPlaylistRowClass))
#define WIDGETS_IS_PLAYLIST_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_PLAYLIST_ROW))
#define WIDGETS_IS_PLAYLIST_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_PLAYLIST_ROW))
#define WIDGETS_PLAYLIST_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_PLAYLIST_ROW, WidgetsPlaylistRowClass))

typedef struct _WidgetsPlaylistRow WidgetsPlaylistRow;
typedef struct _WidgetsPlaylistRowClass WidgetsPlaylistRowClass;
typedef struct _WidgetsPlaylistRowPrivate WidgetsPlaylistRowPrivate;

#define OBJECTS_TYPE_PLAYLIST (objects_playlist_get_type ())
#define OBJECTS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylist))
#define OBJECTS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))
#define OBJECTS_IS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_IS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))

typedef struct _ObjectsPlaylist ObjectsPlaylist;
typedef struct _ObjectsPlaylistClass ObjectsPlaylistClass;

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;
enum  {
	WIDGETS_PLAYLIST_ROW_0_PROPERTY,
	WIDGETS_PLAYLIST_ROW_PLAYLIST_PROPERTY,
	WIDGETS_PLAYLIST_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_playlist_row_properties[WIDGETS_PLAYLIST_ROW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block37Data Block37Data;
typedef struct _ObjectsPlaylistPrivate ObjectsPlaylistPrivate;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _WidgetsPlaylistRow {
	GtkListBoxRow parent_instance;
	WidgetsPlaylistRowPrivate * priv;
};

struct _WidgetsPlaylistRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsPlaylistRowPrivate {
	ObjectsPlaylist* _playlist;
	GtkLabel* title_label;
	WidgetsCover* image_cover;
	gchar* cover_path;
};

struct _Block37Data {
	int _ref_count_;
	WidgetsPlaylistRow* self;
	GtkLabel* tracks_label;
};

struct _ObjectsPlaylist {
	GObject parent_instance;
	ObjectsPlaylistPrivate * priv;
	gint id;
	gchar* title;
	gchar* note;
	gchar* date_added;
	gchar* date_updated;
	gint num_tracks;
};

struct _ObjectsPlaylistClass {
	GObjectClass parent_class;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};


static gpointer widgets_playlist_row_parent_class = NULL;
extern Utils* byte_utils;
extern ServicesDatabase* byte_database;

GType widgets_playlist_row_get_type (void) G_GNUC_CONST;
GType objects_playlist_get_type (void) G_GNUC_CONST;
GType widgets_cover_get_type (void) G_GNUC_CONST;
#define WIDGETS_PLAYLIST_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_PLAYLIST_ROW, WidgetsPlaylistRowPrivate))
WidgetsPlaylistRow* widgets_playlist_row_new (ObjectsPlaylist* playlist);
WidgetsPlaylistRow* widgets_playlist_row_construct (GType object_type,
                                                    ObjectsPlaylist* playlist);
ObjectsPlaylist* widgets_playlist_row_get_playlist (WidgetsPlaylistRow* self);
static void widgets_playlist_row_set_playlist (WidgetsPlaylistRow* self,
                                        ObjectsPlaylist* value);
static GObject * widgets_playlist_row_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
static Block37Data* block37_data_ref (Block37Data* _data37_);
static void block37_data_unref (void * _userdata_);
GType utils_get_type (void) G_GNUC_CONST;
gchar* utils_get_relative_datetime (Utils* self,
                                    const gchar* date);
WidgetsCover* widgets_cover_new_from_file (const gchar* filepath,
                                           gint pixel_size,
                                           const gchar* type);
WidgetsCover* widgets_cover_construct_from_file (GType object_type,
                                                 const gchar* filepath,
                                                 gint pixel_size,
                                                 const gchar* type);
GType services_database_get_type (void) G_GNUC_CONST;
static void _widgets_playlist_row___lambda193_ (WidgetsPlaylistRow* self,
                                         gint id);
static void __widgets_playlist_row___lambda193__services_database_removed_playlist (ServicesDatabase* _sender,
                                                                             gint id,
                                                                             gpointer self);
static void _widgets_playlist_row___lambda194_ (Block37Data* _data37_,
                                         ObjectsPlaylist* p);
static void __widgets_playlist_row___lambda194__services_database_updated_playlist (ServicesDatabase* _sender,
                                                                             ObjectsPlaylist* playlist,
                                                                             gpointer self);
static void _widgets_playlist_row___lambda195_ (WidgetsPlaylistRow* self,
                                         gint id);
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
static void __widgets_playlist_row___lambda195__services_database_updated_playlist_cover (ServicesDatabase* _sender,
                                                                                   gint playlist_id,
                                                                                   gpointer self);
static void widgets_playlist_row_finalize (GObject * obj);
static void _vala_widgets_playlist_row_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_widgets_playlist_row_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);


WidgetsPlaylistRow*
widgets_playlist_row_construct (GType object_type,
                                ObjectsPlaylist* playlist)
{
	WidgetsPlaylistRow * self = NULL;
	g_return_val_if_fail (playlist != NULL, NULL);
	self = (WidgetsPlaylistRow*) g_object_new (object_type, "playlist", playlist, NULL);
	return self;
}


WidgetsPlaylistRow*
widgets_playlist_row_new (ObjectsPlaylist* playlist)
{
	return widgets_playlist_row_construct (WIDGETS_TYPE_PLAYLIST_ROW, playlist);
}


ObjectsPlaylist*
widgets_playlist_row_get_playlist (WidgetsPlaylistRow* self)
{
	ObjectsPlaylist* result;
	ObjectsPlaylist* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_playlist;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
widgets_playlist_row_set_playlist (WidgetsPlaylistRow* self,
                                   ObjectsPlaylist* value)
{
	g_return_if_fail (self != NULL);
	if (widgets_playlist_row_get_playlist (self) != value) {
		ObjectsPlaylist* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_playlist);
		self->priv->_playlist = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, widgets_playlist_row_properties[WIDGETS_PLAYLIST_ROW_PLAYLIST_PROPERTY]);
	}
}


static Block37Data*
block37_data_ref (Block37Data* _data37_)
{
	g_atomic_int_inc (&_data37_->_ref_count_);
	return _data37_;
}


static void
block37_data_unref (void * _userdata_)
{
	Block37Data* _data37_;
	_data37_ = (Block37Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data37_->_ref_count_)) {
		WidgetsPlaylistRow* self;
		self = _data37_->self;
		_g_object_unref0 (_data37_->tracks_label);
		_g_object_unref0 (self);
		g_slice_free (Block37Data, _data37_);
	}
}


static void
_widgets_playlist_row___lambda193_ (WidgetsPlaylistRow* self,
                                    gint id)
{
	ObjectsPlaylist* _tmp0_;
	gint _tmp1_;
	_tmp0_ = self->priv->_playlist;
	_tmp1_ = _tmp0_->id;
	if (_tmp1_ == id) {
		gtk_widget_destroy ((GtkWidget*) self);
	}
}


static void
__widgets_playlist_row___lambda193__services_database_removed_playlist (ServicesDatabase* _sender,
                                                                        gint id,
                                                                        gpointer self)
{
	_widgets_playlist_row___lambda193_ ((WidgetsPlaylistRow*) self, id);
}


static void
_widgets_playlist_row___lambda194_ (Block37Data* _data37_,
                                    ObjectsPlaylist* p)
{
	WidgetsPlaylistRow* self;
	ObjectsPlaylist* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	self = _data37_->self;
	g_return_if_fail (p != NULL);
	_tmp0_ = self->priv->_playlist;
	_tmp1_ = _tmp0_->id;
	_tmp2_ = p->id;
	if (_tmp1_ == _tmp2_) {
		GtkLabel* _tmp3_;
		const gchar* _tmp4_;
		GtkLabel* _tmp5_;
		Utils* _tmp6_;
		const gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
		_tmp3_ = self->priv->title_label;
		_tmp4_ = p->title;
		gtk_label_set_label (_tmp3_, _tmp4_);
		_tmp5_ = _data37_->tracks_label;
		_tmp6_ = byte_utils;
		_tmp7_ = p->date_updated;
		_tmp8_ = utils_get_relative_datetime (_tmp6_, _tmp7_);
		_tmp9_ = _tmp8_;
		_tmp10_ = g_strdup_printf (_ ("Updated %s"), _tmp9_);
		_tmp11_ = _tmp10_;
		gtk_label_set_label (_tmp5_, _tmp11_);
		_g_free0 (_tmp11_);
		_g_free0 (_tmp9_);
	}
}


static void
__widgets_playlist_row___lambda194__services_database_updated_playlist (ServicesDatabase* _sender,
                                                                        ObjectsPlaylist* playlist,
                                                                        gpointer self)
{
	_widgets_playlist_row___lambda194_ (self, playlist);
}


static void
_widgets_playlist_row___lambda195_ (WidgetsPlaylistRow* self,
                                    gint id)
{
	ObjectsPlaylist* _tmp0_;
	gint _tmp1_;
	GError * _inner_error_ = NULL;
	_tmp0_ = self->priv->_playlist;
	_tmp1_ = _tmp0_->id;
	if (_tmp1_ == id) {
		{
			GdkPixbuf* _tmp2_ = NULL;
			Utils* _tmp3_;
			const gchar* _tmp4_;
			ObjectsPlaylist* _tmp5_;
			gint _tmp6_;
			gchar* _tmp7_;
			gchar* _tmp8_;
			gchar* _tmp9_;
			gchar* _tmp10_;
			GdkPixbuf* _tmp11_;
			GdkPixbuf* _tmp12_;
			WidgetsCover* _tmp13_;
			_tmp3_ = byte_utils;
			_tmp4_ = _tmp3_->COVER_FOLDER;
			_tmp5_ = self->priv->_playlist;
			_tmp6_ = _tmp5_->id;
			_tmp7_ = g_strdup_printf ("playlist-%i.jpg", _tmp6_);
			_tmp8_ = _tmp7_;
			_tmp9_ = g_build_filename (_tmp4_, _tmp8_, NULL);
			_tmp10_ = _tmp9_;
			_tmp11_ = gdk_pixbuf_new_from_file_at_size (_tmp10_, 64, 64, &_inner_error_);
			_tmp12_ = _tmp11_;
			_g_free0 (_tmp10_);
			_g_free0 (_tmp8_);
			_tmp2_ = _tmp12_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch41_g_error;
			}
			_tmp13_ = self->priv->image_cover;
			widgets_cover_set_pixbuf (_tmp13_, _tmp2_);
			_g_object_unref0 (_tmp2_);
		}
		goto __finally41;
		__catch41_g_error:
		{
			GError* e = NULL;
			FILE* _tmp14_;
			GError* _tmp15_;
			const gchar* _tmp16_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp14_ = stderr;
			_tmp15_ = e;
			_tmp16_ = _tmp15_->message;
			fprintf (_tmp14_, "Error setting default avatar icon: %s ", _tmp16_);
			_g_error_free0 (e);
		}
		__finally41:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
}


static void
__widgets_playlist_row___lambda195__services_database_updated_playlist_cover (ServicesDatabase* _sender,
                                                                              gint playlist_id,
                                                                              gpointer self)
{
	_widgets_playlist_row___lambda195_ ((WidgetsPlaylistRow*) self, playlist_id);
}


static GObject *
widgets_playlist_row_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsPlaylistRow * self;
	Block37Data* _data37_;
	ObjectsPlaylist* _tmp0_;
	const gchar* _tmp1_;
	GtkStyleContext* _tmp2_;
	ObjectsPlaylist* _tmp3_;
	const gchar* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkStyleContext* _tmp7_;
	GtkLabel* _tmp8_;
	GtkStyleContext* _tmp9_;
	GtkLabel* _tmp10_;
	GtkLabel* _tmp11_;
	GtkLabel* _tmp12_;
	Utils* _tmp13_;
	ObjectsPlaylist* _tmp14_;
	const gchar* _tmp15_;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	gchar* _tmp19_;
	GtkLabel* _tmp20_;
	GtkLabel* _tmp21_;
	GtkLabel* _tmp22_;
	GtkLabel* _tmp23_;
	Utils* _tmp24_;
	const gchar* _tmp25_;
	ObjectsPlaylist* _tmp26_;
	gint _tmp27_;
	gchar* _tmp28_;
	gchar* _tmp29_;
	gchar* _tmp30_;
	const gchar* _tmp31_;
	WidgetsCover* _tmp32_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp33_;
	GtkGrid* _tmp34_;
	GtkGrid* _tmp35_;
	GtkGrid* _tmp36_;
	WidgetsCover* _tmp37_;
	GtkGrid* _tmp38_;
	GtkLabel* _tmp39_;
	GtkGrid* _tmp40_;
	GtkLabel* _tmp41_;
	GtkGrid* _tmp42_;
	ServicesDatabase* _tmp43_;
	ServicesDatabase* _tmp44_;
	ServicesDatabase* _tmp45_;
	parent_class = G_OBJECT_CLASS (widgets_playlist_row_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PLAYLIST_ROW, WidgetsPlaylistRow);
	_data37_ = g_slice_new0 (Block37Data);
	_data37_->_ref_count_ = 1;
	_data37_->self = g_object_ref (self);
	_tmp0_ = self->priv->_playlist;
	_tmp1_ = _tmp0_->title;
	gtk_widget_set_tooltip_text ((GtkWidget*) self, _tmp1_);
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp2_, "album-row");
	_tmp3_ = self->priv->_playlist;
	_tmp4_ = _tmp3_->title;
	_tmp5_ = (GtkLabel*) gtk_label_new (_tmp4_);
	g_object_ref_sink (_tmp5_);
	_g_object_unref0 (self->priv->title_label);
	self->priv->title_label = _tmp5_;
	_tmp6_ = self->priv->title_label;
	_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
	gtk_style_context_add_class (_tmp7_, "font-bold");
	_tmp8_ = self->priv->title_label;
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
	gtk_style_context_add_class (_tmp9_, "h2");
	_tmp10_ = self->priv->title_label;
	gtk_label_set_ellipsize (_tmp10_, PANGO_ELLIPSIZE_END);
	_tmp11_ = self->priv->title_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp11_, GTK_ALIGN_START);
	_tmp12_ = self->priv->title_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp12_, GTK_ALIGN_END);
	_tmp13_ = byte_utils;
	_tmp14_ = self->priv->_playlist;
	_tmp15_ = _tmp14_->date_updated;
	_tmp16_ = utils_get_relative_datetime (_tmp13_, _tmp15_);
	_tmp17_ = _tmp16_;
	_tmp18_ = g_strdup_printf (_ ("Updated %s"), _tmp17_);
	_tmp19_ = _tmp18_;
	_tmp20_ = (GtkLabel*) gtk_label_new (_tmp19_);
	g_object_ref_sink (_tmp20_);
	_tmp21_ = _tmp20_;
	_g_free0 (_tmp19_);
	_g_free0 (_tmp17_);
	_data37_->tracks_label = _tmp21_;
	_tmp22_ = _data37_->tracks_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp22_, GTK_ALIGN_START);
	_tmp23_ = _data37_->tracks_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp23_, GTK_ALIGN_START);
	_tmp24_ = byte_utils;
	_tmp25_ = _tmp24_->COVER_FOLDER;
	_tmp26_ = self->priv->_playlist;
	_tmp27_ = _tmp26_->id;
	_tmp28_ = g_strdup_printf ("playlist-%i.jpg", _tmp27_);
	_tmp29_ = _tmp28_;
	_tmp30_ = g_build_filename (_tmp25_, _tmp29_, NULL);
	_g_free0 (self->priv->cover_path);
	self->priv->cover_path = _tmp30_;
	_g_free0 (_tmp29_);
	_tmp31_ = self->priv->cover_path;
	_tmp32_ = widgets_cover_new_from_file (_tmp31_, 64, "playlist");
	g_object_ref_sink (_tmp32_);
	_g_object_unref0 (self->priv->image_cover);
	self->priv->image_cover = _tmp32_;
	_tmp33_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp33_);
	main_grid = _tmp33_;
	_tmp34_ = main_grid;
	g_object_set ((GtkWidget*) _tmp34_, "margin", 3, NULL);
	_tmp35_ = main_grid;
	gtk_grid_set_column_spacing (_tmp35_, 6);
	_tmp36_ = main_grid;
	_tmp37_ = self->priv->image_cover;
	gtk_grid_attach (_tmp36_, (GtkWidget*) _tmp37_, 0, 0, 1, 2);
	_tmp38_ = main_grid;
	_tmp39_ = self->priv->title_label;
	gtk_grid_attach (_tmp38_, (GtkWidget*) _tmp39_, 1, 0, 1, 1);
	_tmp40_ = main_grid;
	_tmp41_ = _data37_->tracks_label;
	gtk_grid_attach (_tmp40_, (GtkWidget*) _tmp41_, 1, 1, 1, 1);
	_tmp42_ = main_grid;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp42_);
	_tmp43_ = byte_database;
	g_signal_connect_object (_tmp43_, "removed-playlist", (GCallback) __widgets_playlist_row___lambda193__services_database_removed_playlist, self, 0);
	_tmp44_ = byte_database;
	g_signal_connect_data (_tmp44_, "updated-playlist", (GCallback) __widgets_playlist_row___lambda194__services_database_updated_playlist, block37_data_ref (_data37_), (GClosureNotify) block37_data_unref, 0);
	_tmp45_ = byte_database;
	g_signal_connect_object (_tmp45_, "updated-playlist-cover", (GCallback) __widgets_playlist_row___lambda195__services_database_updated_playlist_cover, self, 0);
	_g_object_unref0 (main_grid);
	block37_data_unref (_data37_);
	_data37_ = NULL;
	return obj;
}


static void
widgets_playlist_row_class_init (WidgetsPlaylistRowClass * klass)
{
	widgets_playlist_row_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsPlaylistRowPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_playlist_row_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_playlist_row_set_property;
	G_OBJECT_CLASS (klass)->constructor = widgets_playlist_row_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_playlist_row_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_PLAYLIST_ROW_PLAYLIST_PROPERTY, widgets_playlist_row_properties[WIDGETS_PLAYLIST_ROW_PLAYLIST_PROPERTY] = g_param_spec_object ("playlist", "playlist", "playlist", OBJECTS_TYPE_PLAYLIST, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
}


static void
widgets_playlist_row_instance_init (WidgetsPlaylistRow * self)
{
	self->priv = WIDGETS_PLAYLIST_ROW_GET_PRIVATE (self);
}


static void
widgets_playlist_row_finalize (GObject * obj)
{
	WidgetsPlaylistRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PLAYLIST_ROW, WidgetsPlaylistRow);
	_g_object_unref0 (self->priv->_playlist);
	_g_object_unref0 (self->priv->title_label);
	_g_object_unref0 (self->priv->image_cover);
	_g_free0 (self->priv->cover_path);
	G_OBJECT_CLASS (widgets_playlist_row_parent_class)->finalize (obj);
}


GType
widgets_playlist_row_get_type (void)
{
	static volatile gsize widgets_playlist_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_playlist_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsPlaylistRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_playlist_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsPlaylistRow), 0, (GInstanceInitFunc) widgets_playlist_row_instance_init, NULL };
		GType widgets_playlist_row_type_id;
		widgets_playlist_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsPlaylistRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_playlist_row_type_id__volatile, widgets_playlist_row_type_id);
	}
	return widgets_playlist_row_type_id__volatile;
}


static void
_vala_widgets_playlist_row_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsPlaylistRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PLAYLIST_ROW, WidgetsPlaylistRow);
	switch (property_id) {
		case WIDGETS_PLAYLIST_ROW_PLAYLIST_PROPERTY:
		g_value_set_object (value, widgets_playlist_row_get_playlist (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_widgets_playlist_row_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsPlaylistRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PLAYLIST_ROW, WidgetsPlaylistRow);
	switch (property_id) {
		case WIDGETS_PLAYLIST_ROW_PLAYLIST_PROPERTY:
		widgets_playlist_row_set_playlist (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



