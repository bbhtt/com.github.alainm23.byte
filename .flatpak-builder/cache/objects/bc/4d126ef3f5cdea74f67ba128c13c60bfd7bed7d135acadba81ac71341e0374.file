/* Favorites.c generated by valac 0.40.11, the Vala compiler
 * generated from Favorites.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>
#include <gio/gio.h>


#define VIEWS_TYPE_FAVORITES (views_favorites_get_type ())
#define VIEWS_FAVORITES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_FAVORITES, ViewsFavorites))
#define VIEWS_FAVORITES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_FAVORITES, ViewsFavoritesClass))
#define VIEWS_IS_FAVORITES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_FAVORITES))
#define VIEWS_IS_FAVORITES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_FAVORITES))
#define VIEWS_FAVORITES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_FAVORITES, ViewsFavoritesClass))

typedef struct _ViewsFavorites ViewsFavorites;
typedef struct _ViewsFavoritesClass ViewsFavoritesClass;
typedef struct _ViewsFavoritesPrivate ViewsFavoritesPrivate;

#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;
enum  {
	VIEWS_FAVORITES_0_PROPERTY,
	VIEWS_FAVORITES_NUM_PROPERTIES
};
static GParamSpec* views_favorites_properties[VIEWS_FAVORITES_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _ObjectsTrackPrivate ObjectsTrackPrivate;

#define WIDGETS_TYPE_TRACK_ROW (widgets_track_row_get_type ())
#define WIDGETS_TRACK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRow))
#define WIDGETS_TRACK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRowClass))
#define WIDGETS_IS_TRACK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TRACK_ROW))
#define WIDGETS_IS_TRACK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TRACK_ROW))
#define WIDGETS_TRACK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRowClass))

typedef struct _WidgetsTrackRow WidgetsTrackRow;
typedef struct _WidgetsTrackRowClass WidgetsTrackRowClass;

#define WIDGETS_TYPE_SEARCH_ENTRY (widgets_search_entry_get_type ())
#define WIDGETS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntry))
#define WIDGETS_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntryClass))
#define WIDGETS_IS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_SEARCH_ENTRY))
#define WIDGETS_IS_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_SEARCH_ENTRY))
#define WIDGETS_SEARCH_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntryClass))

typedef struct _WidgetsSearchEntry WidgetsSearchEntry;
typedef struct _WidgetsSearchEntryClass WidgetsSearchEntryClass;
typedef struct _Block60Data Block60Data;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _Block61Data Block61Data;
typedef struct _Block62Data Block62Data;

#define SERVICES_TYPE_SCAN (services_scan_get_type ())
#define SERVICES_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SCAN, ServicesScan))
#define SERVICES_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SCAN, ServicesScanClass))
#define SERVICES_IS_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SCAN))
#define SERVICES_IS_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SCAN))
#define SERVICES_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SCAN, ServicesScanClass))

typedef struct _ServicesScan ServicesScan;
typedef struct _ServicesScanClass ServicesScanClass;
enum  {
	VIEWS_FAVORITES_GO_BACK_SIGNAL,
	VIEWS_FAVORITES_NUM_SIGNALS
};
static guint views_favorites_signals[VIEWS_FAVORITES_NUM_SIGNALS] = {0};

struct _ViewsFavorites {
	GtkEventBox parent_instance;
	ViewsFavoritesPrivate * priv;
};

struct _ViewsFavoritesClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsFavoritesPrivate {
	GtkListBox* listbox;
	gint item_index;
	gint item_max;
	GeeArrayList* all_tracks;
};

struct _ObjectsTrack {
	GObject parent_instance;
	ObjectsTrackPrivate * priv;
	gint track_order;
	gint id;
	gint album_id;
	gint track;
	gint disc;
	gint play_count;
	gint is_favorite;
	gint bitrate;
	gint bpm;
	gint rating;
	gint samplerate;
	gint channels;
	gint year;
	gint playlist;
	guint64 duration;
	gchar* path;
	gchar* title;
	gchar* favorite_added;
	gchar* last_played;
	gchar* album_title;
	gchar* artist_name;
	gchar* composer;
	gchar* grouping;
	gchar* comment;
	gchar* lyrics;
	gchar* genre;
	gchar* album_artist;
	gchar* date_added;
};

struct _ObjectsTrackClass {
	GObjectClass parent_class;
};

struct _Block60Data {
	int _ref_count_;
	ViewsFavorites* self;
	WidgetsSearchEntry* search_entry;
	GtkRevealer* search_revealer;
};

struct _Block61Data {
	int _ref_count_;
	ViewsFavorites* self;
	ObjectsTrack* track;
};

struct _Block62Data {
	int _ref_count_;
	ViewsFavorites* self;
	GtkWidget* widget;
};


static gpointer views_favorites_parent_class = NULL;
extern ServicesDatabase* byte_database;
extern Utils* byte_utils;
extern GSettings* byte_settings;
extern ServicesScan* byte_scan_service;

GType views_favorites_get_type (void) G_GNUC_CONST;
GType objects_track_get_type (void) G_GNUC_CONST;
#define VIEWS_FAVORITES_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_FAVORITES, ViewsFavoritesPrivate))
ViewsFavorites* views_favorites_new (void);
ViewsFavorites* views_favorites_construct (GType object_type);
static gboolean views_favorites_track_exists (ViewsFavorites* self,
                                       ObjectsTrack* track);
void views_favorites_add_all_tracks (ViewsFavorites* self);
GType widgets_track_row_get_type (void) G_GNUC_CONST;
WidgetsTrackRow* widgets_track_row_new (ObjectsTrack* track);
WidgetsTrackRow* widgets_track_row_construct (GType object_type,
                                              ObjectsTrack* track);
static GObject * views_favorites_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties);
GType widgets_search_entry_get_type (void) G_GNUC_CONST;
static Block60Data* block60_data_ref (Block60Data* _data60_);
static void block60_data_unref (void * _userdata_);
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_tracks_favorites (ServicesDatabase* self);
WidgetsSearchEntry* widgets_search_entry_new (void);
WidgetsSearchEntry* widgets_search_entry_construct (GType object_type);
static void _views_favorites___lambda211_ (ViewsFavorites* self);
static void __views_favorites___lambda211__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void _views_favorites___lambda212_ (Block60Data* _data60_);
static void __views_favorites___lambda212__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static gboolean _views_favorites___lambda213_ (Block60Data* _data60_,
                                        GdkEventKey* key);
static gboolean __views_favorites___lambda213__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                      GdkEventKey* event,
                                                                      gpointer self);
static void _views_favorites___lambda214_ (Block60Data* _data60_);
static void ___lambda215_ (ViewsFavorites* self,
                    GtkWidget* widget);
static void ____lambda215__gtk_callback (GtkWidget* widget,
                                  gpointer self);
GeeArrayList* services_database_get_all_tracks_favorites_search (ServicesDatabase* self,
                                                                 const gchar* search_text);
static void ___lambda216_ (ViewsFavorites* self,
                    GtkWidget* widget);
static void ____lambda216__gtk_callback (GtkWidget* widget,
                                  gpointer self);
static void __views_favorites___lambda214__gtk_entry_activate (GtkEntry* _sender,
                                                        gpointer self);
static void _views_favorites___lambda217_ (Block60Data* _data60_);
static void ___lambda218_ (ViewsFavorites* self,
                    GtkWidget* widget);
static void ____lambda218__gtk_callback (GtkWidget* widget,
                                  gpointer self);
static void ___lambda219_ (ViewsFavorites* self,
                    GtkWidget* widget);
static void ____lambda219__gtk_callback (GtkWidget* widget,
                                  gpointer self);
static void __views_favorites___lambda217__gtk_search_entry_search_changed (GtkSearchEntry* _sender,
                                                                     gpointer self);
static void _views_favorites___lambda220_ (ViewsFavorites* self);
GType utils_get_type (void) G_GNUC_CONST;
void utils_set_items (Utils* self,
                      GeeArrayList* all_items,
                      gboolean shuffle_mode,
                      ObjectsTrack* track);
static void __views_favorites___lambda220__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void _views_favorites___lambda221_ (ViewsFavorites* self);
static void __views_favorites___lambda221__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void _views_favorites___lambda222_ (ViewsFavorites* self,
                                    GtkListBoxRow* row);
ObjectsTrack* widgets_track_row_get_track (WidgetsTrackRow* self);
static void __views_favorites___lambda222__gtk_list_box_row_activated (GtkListBox* _sender,
                                                                GtkListBoxRow* row,
                                                                gpointer self);
static void _views_favorites___lambda223_ (ViewsFavorites* self,
                                    GtkPositionType pos);
static void __views_favorites___lambda223__gtk_scrolled_window_edge_reached (GtkScrolledWindow* _sender,
                                                                      GtkPositionType pos,
                                                                      gpointer self);
static void _views_favorites___lambda224_ (ViewsFavorites* self,
                                    ObjectsTrack* track,
                                    gint favorite);
static Block61Data* block61_data_ref (Block61Data* _data61_);
static void block61_data_unref (void * _userdata_);
static void ____lambda225_ (Block61Data* _data61_,
                     GtkWidget* widget);
static void _____lambda225__gtk_callback (GtkWidget* widget,
                                   gpointer self);
static void __views_favorites___lambda224__services_database_updated_track_favorite (ServicesDatabase* _sender,
                                                                              ObjectsTrack* track,
                                                                              gint favorite,
                                                                              gpointer self);
static void _views_favorites___lambda226_ (ViewsFavorites* self);
static void __lambda227_ (ViewsFavorites* self,
                   GtkWidget* widget);
static Block62Data* block62_data_ref (Block62Data* _data62_);
static void block62_data_unref (void * _userdata_);
static gboolean __lambda228_ (Block62Data* _data62_);
static gboolean ___lambda228__gsource_func (gpointer self);
static void ___lambda227__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __views_favorites___lambda226__services_database_reset_library (ServicesDatabase* _sender,
                                                                     gpointer self);
GType services_scan_get_type (void) G_GNUC_CONST;
static void _views_favorites___lambda229_ (Block60Data* _data60_);
static void __views_favorites___lambda229__services_scan_sync_started (ServicesScan* _sender,
                                                                gpointer self);
static void _views_favorites___lambda230_ (Block60Data* _data60_);
static void __views_favorites___lambda230__services_scan_sync_finished (ServicesScan* _sender,
                                                                 gpointer self);
static void views_favorites_finalize (GObject * obj);


ViewsFavorites*
views_favorites_construct (GType object_type)
{
	ViewsFavorites * self = NULL;
	self = (ViewsFavorites*) g_object_new (object_type, NULL);
	return self;
}


ViewsFavorites*
views_favorites_new (void)
{
	return views_favorites_construct (VIEWS_TYPE_FAVORITES);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static gboolean
views_favorites_track_exists (ViewsFavorites* self,
                              ObjectsTrack* track)
{
	gboolean result = FALSE;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (track != NULL, FALSE);
	{
		GeeArrayList* _item_list = NULL;
		GeeArrayList* _tmp0_;
		GeeArrayList* _tmp1_;
		gint _item_size = 0;
		GeeArrayList* _tmp2_;
		gint _tmp3_;
		gint _tmp4_;
		gint _item_index = 0;
		_tmp0_ = self->priv->all_tracks;
		_tmp1_ = _g_object_ref0 (_tmp0_);
		_item_list = _tmp1_;
		_tmp2_ = _item_list;
		_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
		_tmp4_ = _tmp3_;
		_item_size = _tmp4_;
		_item_index = -1;
		while (TRUE) {
			gint _tmp5_;
			gint _tmp6_;
			gint _tmp7_;
			ObjectsTrack* item = NULL;
			GeeArrayList* _tmp8_;
			gint _tmp9_;
			gpointer _tmp10_;
			ObjectsTrack* _tmp11_;
			gint _tmp12_;
			gint _tmp13_;
			_tmp5_ = _item_index;
			_item_index = _tmp5_ + 1;
			_tmp6_ = _item_index;
			_tmp7_ = _item_size;
			if (!(_tmp6_ < _tmp7_)) {
				break;
			}
			_tmp8_ = _item_list;
			_tmp9_ = _item_index;
			_tmp10_ = gee_abstract_list_get ((GeeAbstractList*) _tmp8_, _tmp9_);
			item = (ObjectsTrack*) _tmp10_;
			_tmp11_ = item;
			_tmp12_ = _tmp11_->id;
			_tmp13_ = track->id;
			if (_tmp12_ == _tmp13_) {
				result = TRUE;
				_g_object_unref0 (item);
				_g_object_unref0 (_item_list);
				return result;
			}
			_g_object_unref0 (item);
		}
		_g_object_unref0 (_item_list);
	}
	result = FALSE;
	return result;
}


void
views_favorites_add_all_tracks (ViewsFavorites* self)
{
	gint _tmp0_;
	GeeArrayList* _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->item_max;
	_tmp1_ = self->priv->all_tracks;
	_tmp2_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp1_);
	_tmp3_ = _tmp2_;
	if (_tmp0_ > _tmp3_) {
		GeeArrayList* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
		_tmp4_ = self->priv->all_tracks;
		_tmp5_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp4_);
		_tmp6_ = _tmp5_;
		self->priv->item_max = _tmp6_;
	}
	{
		gint i = 0;
		gint _tmp7_;
		_tmp7_ = self->priv->item_index;
		i = _tmp7_;
		{
			gboolean _tmp8_ = FALSE;
			_tmp8_ = TRUE;
			while (TRUE) {
				gint _tmp10_;
				gint _tmp11_;
				WidgetsTrackRow* row = NULL;
				GeeArrayList* _tmp12_;
				gint _tmp13_;
				gpointer _tmp14_;
				ObjectsTrack* _tmp15_;
				WidgetsTrackRow* _tmp16_;
				WidgetsTrackRow* _tmp17_;
				GtkListBox* _tmp18_;
				WidgetsTrackRow* _tmp19_;
				GtkListBox* _tmp20_;
				if (!_tmp8_) {
					gint _tmp9_;
					_tmp9_ = i;
					i = _tmp9_ + 1;
				}
				_tmp8_ = FALSE;
				_tmp10_ = i;
				_tmp11_ = self->priv->item_max;
				if (!(_tmp10_ < _tmp11_)) {
					break;
				}
				_tmp12_ = self->priv->all_tracks;
				_tmp13_ = i;
				_tmp14_ = gee_abstract_list_get ((GeeAbstractList*) _tmp12_, _tmp13_);
				_tmp15_ = (ObjectsTrack*) _tmp14_;
				_tmp16_ = widgets_track_row_new (_tmp15_);
				g_object_ref_sink (_tmp16_);
				_tmp17_ = _tmp16_;
				_g_object_unref0 (_tmp15_);
				row = _tmp17_;
				_tmp18_ = self->priv->listbox;
				_tmp19_ = row;
				gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) _tmp19_);
				_tmp20_ = self->priv->listbox;
				gtk_widget_show_all ((GtkWidget*) _tmp20_);
				_g_object_unref0 (row);
			}
		}
	}
}


static Block60Data*
block60_data_ref (Block60Data* _data60_)
{
	g_atomic_int_inc (&_data60_->_ref_count_);
	return _data60_;
}


static void
block60_data_unref (void * _userdata_)
{
	Block60Data* _data60_;
	_data60_ = (Block60Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data60_->_ref_count_)) {
		ViewsFavorites* self;
		self = _data60_->self;
		_g_object_unref0 (_data60_->search_revealer);
		_g_object_unref0 (_data60_->search_entry);
		_g_object_unref0 (self);
		g_slice_free (Block60Data, _data60_);
	}
}


static void
_views_favorites___lambda211_ (ViewsFavorites* self)
{
	g_signal_emit (self, views_favorites_signals[VIEWS_FAVORITES_GO_BACK_SIGNAL], 0);
}


static void
__views_favorites___lambda211__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
	_views_favorites___lambda211_ ((ViewsFavorites*) self);
}


static void
_views_favorites___lambda212_ (Block60Data* _data60_)
{
	ViewsFavorites* self;
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	self = _data60_->self;
	_tmp0_ = _data60_->search_revealer;
	_tmp1_ = gtk_revealer_get_reveal_child (_tmp0_);
	_tmp2_ = _tmp1_;
	if (_tmp2_) {
		GtkRevealer* _tmp3_;
		WidgetsSearchEntry* _tmp4_;
		_tmp3_ = _data60_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp3_, FALSE);
		_tmp4_ = _data60_->search_entry;
		gtk_entry_set_text ((GtkEntry*) _tmp4_, "");
	} else {
		GtkRevealer* _tmp5_;
		WidgetsSearchEntry* _tmp6_;
		_tmp5_ = _data60_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp5_, TRUE);
		_tmp6_ = _data60_->search_entry;
		gtk_widget_grab_focus ((GtkWidget*) _tmp6_);
	}
}


static void
__views_favorites___lambda212__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
	_views_favorites___lambda212_ (self);
}


static gboolean
_views_favorites___lambda213_ (Block60Data* _data60_,
                               GdkEventKey* key)
{
	ViewsFavorites* self;
	gboolean result = FALSE;
	guint _tmp0_;
	self = _data60_->self;
	g_return_val_if_fail (key != NULL, FALSE);
	_tmp0_ = key->keyval;
	if (_tmp0_ == ((guint) 65307)) {
		GtkRevealer* _tmp1_;
		WidgetsSearchEntry* _tmp2_;
		_tmp1_ = _data60_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp1_, FALSE);
		_tmp2_ = _data60_->search_entry;
		gtk_entry_set_text ((GtkEntry*) _tmp2_, "");
	}
	result = FALSE;
	return result;
}


static gboolean
__views_favorites___lambda213__gtk_widget_key_release_event (GtkWidget* _sender,
                                                             GdkEventKey* event,
                                                             gpointer self)
{
	gboolean result;
	result = _views_favorites___lambda213_ (self, event);
	return result;
}


static void
___lambda215_ (ViewsFavorites* self,
               GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
____lambda215__gtk_callback (GtkWidget* widget,
                             gpointer self)
{
	___lambda215_ ((ViewsFavorites*) self, widget);
}


static void
___lambda216_ (ViewsFavorites* self,
               GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
____lambda216__gtk_callback (GtkWidget* widget,
                             gpointer self)
{
	___lambda216_ ((ViewsFavorites*) self, widget);
}


static void
_views_favorites___lambda214_ (Block60Data* _data60_)
{
	ViewsFavorites* self;
	WidgetsSearchEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	self = _data60_->self;
	_tmp0_ = _data60_->search_entry;
	_tmp1_ = gtk_entry_get_text ((GtkEntry*) _tmp0_);
	_tmp2_ = _tmp1_;
	if (g_strcmp0 (_tmp2_, "") != 0) {
		GtkListBox* _tmp3_;
		ServicesDatabase* _tmp4_;
		WidgetsSearchEntry* _tmp5_;
		const gchar* _tmp6_;
		const gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		GeeArrayList* _tmp10_;
		self->priv->item_index = 0;
		self->priv->item_max = 100;
		_tmp3_ = self->priv->listbox;
		gtk_container_foreach ((GtkContainer*) _tmp3_, ____lambda215__gtk_callback, self);
		_tmp4_ = byte_database;
		_tmp5_ = _data60_->search_entry;
		_tmp6_ = gtk_entry_get_text ((GtkEntry*) _tmp5_);
		_tmp7_ = _tmp6_;
		_tmp8_ = g_utf8_strdown (_tmp7_, (gssize) -1);
		_tmp9_ = _tmp8_;
		_tmp10_ = services_database_get_all_tracks_favorites_search (_tmp4_, _tmp9_);
		_g_object_unref0 (self->priv->all_tracks);
		self->priv->all_tracks = _tmp10_;
		_g_free0 (_tmp9_);
		views_favorites_add_all_tracks (self);
	} else {
		GtkListBox* _tmp11_;
		ServicesDatabase* _tmp12_;
		GeeArrayList* _tmp13_;
		self->priv->item_index = 0;
		self->priv->item_max = 100;
		_tmp11_ = self->priv->listbox;
		gtk_container_foreach ((GtkContainer*) _tmp11_, ____lambda216__gtk_callback, self);
		_tmp12_ = byte_database;
		_tmp13_ = services_database_get_all_tracks_favorites (_tmp12_);
		_g_object_unref0 (self->priv->all_tracks);
		self->priv->all_tracks = _tmp13_;
		views_favorites_add_all_tracks (self);
	}
}


static void
__views_favorites___lambda214__gtk_entry_activate (GtkEntry* _sender,
                                                   gpointer self)
{
	_views_favorites___lambda214_ (self);
}


static void
___lambda218_ (ViewsFavorites* self,
               GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
____lambda218__gtk_callback (GtkWidget* widget,
                             gpointer self)
{
	___lambda218_ ((ViewsFavorites*) self, widget);
}


static void
___lambda219_ (ViewsFavorites* self,
               GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
____lambda219__gtk_callback (GtkWidget* widget,
                             gpointer self)
{
	___lambda219_ ((ViewsFavorites*) self, widget);
}


static void
_views_favorites___lambda217_ (Block60Data* _data60_)
{
	ViewsFavorites* self;
	WidgetsSearchEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	self = _data60_->self;
	_tmp0_ = _data60_->search_entry;
	_tmp1_ = gtk_entry_get_text ((GtkEntry*) _tmp0_);
	_tmp2_ = _tmp1_;
	if (g_strcmp0 (_tmp2_, "") != 0) {
		GtkListBox* _tmp3_;
		ServicesDatabase* _tmp4_;
		WidgetsSearchEntry* _tmp5_;
		const gchar* _tmp6_;
		const gchar* _tmp7_;
		GeeArrayList* _tmp8_;
		self->priv->item_index = 0;
		self->priv->item_max = 100;
		_tmp3_ = self->priv->listbox;
		gtk_container_foreach ((GtkContainer*) _tmp3_, ____lambda218__gtk_callback, self);
		_tmp4_ = byte_database;
		_tmp5_ = _data60_->search_entry;
		_tmp6_ = gtk_entry_get_text ((GtkEntry*) _tmp5_);
		_tmp7_ = _tmp6_;
		_tmp8_ = services_database_get_all_tracks_favorites_search (_tmp4_, _tmp7_);
		_g_object_unref0 (self->priv->all_tracks);
		self->priv->all_tracks = _tmp8_;
		views_favorites_add_all_tracks (self);
	} else {
		GtkListBox* _tmp9_;
		ServicesDatabase* _tmp10_;
		GeeArrayList* _tmp11_;
		self->priv->item_index = 0;
		self->priv->item_max = 100;
		_tmp9_ = self->priv->listbox;
		gtk_container_foreach ((GtkContainer*) _tmp9_, ____lambda219__gtk_callback, self);
		_tmp10_ = byte_database;
		_tmp11_ = services_database_get_all_tracks_favorites (_tmp10_);
		_g_object_unref0 (self->priv->all_tracks);
		self->priv->all_tracks = _tmp11_;
		views_favorites_add_all_tracks (self);
	}
}


static void
__views_favorites___lambda217__gtk_search_entry_search_changed (GtkSearchEntry* _sender,
                                                                gpointer self)
{
	_views_favorites___lambda217_ (self);
}


static void
_views_favorites___lambda220_ (ViewsFavorites* self)
{
	Utils* _tmp0_;
	GeeArrayList* _tmp1_;
	_tmp0_ = byte_utils;
	_tmp1_ = self->priv->all_tracks;
	utils_set_items (_tmp0_, _tmp1_, FALSE, NULL);
}


static void
__views_favorites___lambda220__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
	_views_favorites___lambda220_ ((ViewsFavorites*) self);
}


static void
_views_favorites___lambda221_ (ViewsFavorites* self)
{
	Utils* _tmp0_;
	GeeArrayList* _tmp1_;
	_tmp0_ = byte_utils;
	_tmp1_ = self->priv->all_tracks;
	utils_set_items (_tmp0_, _tmp1_, TRUE, NULL);
}


static void
__views_favorites___lambda221__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
	_views_favorites___lambda221_ ((ViewsFavorites*) self);
}


static void
_views_favorites___lambda222_ (ViewsFavorites* self,
                               GtkListBoxRow* row)
{
	WidgetsTrackRow* item = NULL;
	WidgetsTrackRow* _tmp0_;
	Utils* _tmp1_;
	GeeArrayList* _tmp2_;
	GSettings* _tmp3_;
	WidgetsTrackRow* _tmp4_;
	ObjectsTrack* _tmp5_;
	ObjectsTrack* _tmp6_;
	g_return_if_fail (row != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TRACK_ROW) ? ((WidgetsTrackRow*) row) : NULL);
	item = _tmp0_;
	_tmp1_ = byte_utils;
	_tmp2_ = self->priv->all_tracks;
	_tmp3_ = byte_settings;
	_tmp4_ = item;
	_tmp5_ = widgets_track_row_get_track (_tmp4_);
	_tmp6_ = _tmp5_;
	utils_set_items (_tmp1_, _tmp2_, g_settings_get_boolean (_tmp3_, "shuffle-mode"), _tmp6_);
	_g_object_unref0 (item);
}


static void
__views_favorites___lambda222__gtk_list_box_row_activated (GtkListBox* _sender,
                                                           GtkListBoxRow* row,
                                                           gpointer self)
{
	_views_favorites___lambda222_ ((ViewsFavorites*) self, row);
}


static void
_views_favorites___lambda223_ (ViewsFavorites* self,
                               GtkPositionType pos)
{
	if (pos == GTK_POS_BOTTOM) {
		gint _tmp0_;
		gint _tmp1_;
		gint _tmp2_;
		GeeArrayList* _tmp3_;
		gint _tmp4_;
		gint _tmp5_;
		_tmp0_ = self->priv->item_max;
		self->priv->item_index = _tmp0_;
		_tmp1_ = self->priv->item_max;
		self->priv->item_max = _tmp1_ + 100;
		_tmp2_ = self->priv->item_max;
		_tmp3_ = self->priv->all_tracks;
		_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
		_tmp5_ = _tmp4_;
		if (_tmp2_ > _tmp5_) {
			GeeArrayList* _tmp6_;
			gint _tmp7_;
			gint _tmp8_;
			_tmp6_ = self->priv->all_tracks;
			_tmp7_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp6_);
			_tmp8_ = _tmp7_;
			self->priv->item_max = _tmp8_;
		}
		views_favorites_add_all_tracks (self);
	}
}


static void
__views_favorites___lambda223__gtk_scrolled_window_edge_reached (GtkScrolledWindow* _sender,
                                                                 GtkPositionType pos,
                                                                 gpointer self)
{
	_views_favorites___lambda223_ ((ViewsFavorites*) self, pos);
}


static Block61Data*
block61_data_ref (Block61Data* _data61_)
{
	g_atomic_int_inc (&_data61_->_ref_count_);
	return _data61_;
}


static void
block61_data_unref (void * _userdata_)
{
	Block61Data* _data61_;
	_data61_ = (Block61Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data61_->_ref_count_)) {
		ViewsFavorites* self;
		self = _data61_->self;
		_g_object_unref0 (_data61_->track);
		_g_object_unref0 (self);
		g_slice_free (Block61Data, _data61_);
	}
}


static void
____lambda225_ (Block61Data* _data61_,
                GtkWidget* widget)
{
	ViewsFavorites* self;
	WidgetsTrackRow* item = NULL;
	WidgetsTrackRow* _tmp0_;
	WidgetsTrackRow* _tmp1_;
	ObjectsTrack* _tmp2_;
	ObjectsTrack* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	self = _data61_->self;
	g_return_if_fail (widget != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (widget, WIDGETS_TYPE_TRACK_ROW) ? ((WidgetsTrackRow*) widget) : NULL);
	item = _tmp0_;
	_tmp1_ = item;
	_tmp2_ = widgets_track_row_get_track (_tmp1_);
	_tmp3_ = _tmp2_;
	_tmp4_ = _tmp3_->id;
	_tmp5_ = _data61_->track->id;
	if (_tmp4_ == _tmp5_) {
		GeeArrayList* _tmp6_;
		gtk_widget_destroy (widget);
		_tmp6_ = self->priv->all_tracks;
		gee_abstract_collection_remove ((GeeAbstractCollection*) _tmp6_, _data61_->track);
	}
	_g_object_unref0 (item);
}


static void
_____lambda225__gtk_callback (GtkWidget* widget,
                              gpointer self)
{
	____lambda225_ (self, widget);
}


static void
_views_favorites___lambda224_ (ViewsFavorites* self,
                               ObjectsTrack* track,
                               gint favorite)
{
	Block61Data* _data61_;
	ObjectsTrack* _tmp0_;
	g_return_if_fail (track != NULL);
	_data61_ = g_slice_new0 (Block61Data);
	_data61_->_ref_count_ = 1;
	_data61_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (track);
	_g_object_unref0 (_data61_->track);
	_data61_->track = _tmp0_;
	if (views_favorites_track_exists (self, _data61_->track) == FALSE) {
		if (favorite == 1) {
			GeeArrayList* _tmp1_;
			gint _tmp2_;
			gint _tmp3_;
			GeeArrayList* _tmp4_;
			gint _tmp5_;
			gint _tmp6_;
			gint _tmp7_;
			GeeArrayList* _tmp8_;
			gint _tmp9_;
			gint _tmp10_;
			_tmp1_ = self->priv->all_tracks;
			_tmp2_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp1_);
			_tmp3_ = _tmp2_;
			_data61_->track->track_order = _tmp3_ + 1;
			_tmp4_ = self->priv->all_tracks;
			gee_abstract_collection_add ((GeeAbstractCollection*) _tmp4_, _data61_->track);
			_tmp5_ = self->priv->item_max;
			self->priv->item_index = _tmp5_;
			_tmp6_ = self->priv->item_max;
			self->priv->item_max = _tmp6_ + 100;
			_tmp7_ = self->priv->item_max;
			_tmp8_ = self->priv->all_tracks;
			_tmp9_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp8_);
			_tmp10_ = _tmp9_;
			if (_tmp7_ > _tmp10_) {
				GeeArrayList* _tmp11_;
				gint _tmp12_;
				gint _tmp13_;
				_tmp11_ = self->priv->all_tracks;
				_tmp12_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp11_);
				_tmp13_ = _tmp12_;
				self->priv->item_max = _tmp13_;
			}
			views_favorites_add_all_tracks (self);
		}
	} else {
		if (favorite == 0) {
			GtkListBox* _tmp14_;
			_tmp14_ = self->priv->listbox;
			gtk_container_foreach ((GtkContainer*) _tmp14_, _____lambda225__gtk_callback, _data61_);
		}
	}
	block61_data_unref (_data61_);
	_data61_ = NULL;
}


static void
__views_favorites___lambda224__services_database_updated_track_favorite (ServicesDatabase* _sender,
                                                                         ObjectsTrack* track,
                                                                         gint favorite,
                                                                         gpointer self)
{
	_views_favorites___lambda224_ ((ViewsFavorites*) self, track, favorite);
}


static Block62Data*
block62_data_ref (Block62Data* _data62_)
{
	g_atomic_int_inc (&_data62_->_ref_count_);
	return _data62_;
}


static void
block62_data_unref (void * _userdata_)
{
	Block62Data* _data62_;
	_data62_ = (Block62Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data62_->_ref_count_)) {
		ViewsFavorites* self;
		self = _data62_->self;
		_g_object_unref0 (_data62_->widget);
		_g_object_unref0 (self);
		g_slice_free (Block62Data, _data62_);
	}
}


static gboolean
__lambda228_ (Block62Data* _data62_)
{
	ViewsFavorites* self;
	gboolean result = FALSE;
	self = _data62_->self;
	gtk_widget_destroy (_data62_->widget);
	result = FALSE;
	return result;
}


static gboolean
___lambda228__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda228_ (self);
	return result;
}


static void
__lambda227_ (ViewsFavorites* self,
              GtkWidget* widget)
{
	Block62Data* _data62_;
	GtkWidget* _tmp0_;
	g_return_if_fail (widget != NULL);
	_data62_ = g_slice_new0 (Block62Data);
	_data62_->_ref_count_ = 1;
	_data62_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (widget);
	_g_object_unref0 (_data62_->widget);
	_data62_->widget = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda228__gsource_func, block62_data_ref (_data62_), block62_data_unref);
	block62_data_unref (_data62_);
	_data62_ = NULL;
}


static void
___lambda227__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda227_ ((ViewsFavorites*) self, widget);
}


static void
_views_favorites___lambda226_ (ViewsFavorites* self)
{
	GtkListBox* _tmp0_;
	_tmp0_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda227__gtk_callback, self);
}


static void
__views_favorites___lambda226__services_database_reset_library (ServicesDatabase* _sender,
                                                                gpointer self)
{
	_views_favorites___lambda226_ ((ViewsFavorites*) self);
}


static void
_views_favorites___lambda229_ (Block60Data* _data60_)
{
	ViewsFavorites* self;
	WidgetsSearchEntry* _tmp0_;
	self = _data60_->self;
	_tmp0_ = _data60_->search_entry;
	gtk_widget_set_sensitive ((GtkWidget*) _tmp0_, FALSE);
}


static void
__views_favorites___lambda229__services_scan_sync_started (ServicesScan* _sender,
                                                           gpointer self)
{
	_views_favorites___lambda229_ (self);
}


static void
_views_favorites___lambda230_ (Block60Data* _data60_)
{
	ViewsFavorites* self;
	WidgetsSearchEntry* _tmp0_;
	self = _data60_->self;
	_tmp0_ = _data60_->search_entry;
	gtk_widget_set_sensitive ((GtkWidget*) _tmp0_, TRUE);
}


static void
__views_favorites___lambda230__services_scan_sync_finished (ServicesScan* _sender,
                                                            gpointer self)
{
	_views_favorites___lambda230_ (self);
}


static GObject *
views_favorites_constructor (GType type,
                             guint n_construct_properties,
                             GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsFavorites * self;
	Block60Data* _data60_;
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkButton* back_button = NULL;
	GtkButton* _tmp4_;
	GtkButton* _tmp5_;
	GtkButton* _tmp6_;
	GtkButton* _tmp7_;
	GtkButton* _tmp8_;
	GtkButton* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkButton* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkButton* search_button = NULL;
	GtkButton* _tmp13_;
	GtkButton* _tmp14_;
	GtkButton* _tmp15_;
	GtkButton* _tmp16_;
	GtkButton* _tmp17_;
	GtkButton* _tmp18_;
	GtkButton* _tmp19_;
	GtkStyleContext* _tmp20_;
	GtkButton* _tmp21_;
	GtkStyleContext* _tmp22_;
	GtkButton* _tmp23_;
	GtkStyleContext* _tmp24_;
	GtkButton* _tmp25_;
	GtkButton* _tmp26_;
	WidgetsSearchEntry* _tmp27_;
	WidgetsSearchEntry* _tmp28_;
	GtkStyleContext* _tmp29_;
	WidgetsSearchEntry* _tmp30_;
	WidgetsSearchEntry* _tmp31_;
	GtkBox* search_box = NULL;
	GtkBox* _tmp32_;
	GtkBox* _tmp33_;
	GtkStyleContext* _tmp34_;
	GtkBox* _tmp35_;
	WidgetsSearchEntry* _tmp36_;
	GtkBox* _tmp37_;
	GtkSeparator* _tmp38_;
	GtkSeparator* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkRevealer* _tmp41_;
	GtkRevealer* _tmp42_;
	GtkBox* _tmp43_;
	GtkRevealer* _tmp44_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp45_;
	GtkBox* _tmp46_;
	GtkStyleContext* _tmp47_;
	GtkBox* _tmp48_;
	GtkButton* _tmp49_;
	GtkBox* _tmp50_;
	GtkButton* _tmp51_;
	GtkListBox* _tmp52_;
	GtkListBox* _tmp53_;
	GtkButton* play_button = NULL;
	GtkButton* _tmp54_;
	GtkButton* _tmp55_;
	GtkButton* _tmp56_;
	GtkButton* _tmp57_;
	GtkButton* _tmp58_;
	GtkButton* _tmp59_;
	GtkButton* _tmp60_;
	GtkStyleContext* _tmp61_;
	GtkButton* _tmp62_;
	GtkStyleContext* _tmp63_;
	GtkButton* shuffle_button = NULL;
	GtkButton* _tmp64_;
	GtkButton* _tmp65_;
	GtkButton* _tmp66_;
	GtkButton* _tmp67_;
	GtkButton* _tmp68_;
	GtkButton* _tmp69_;
	GtkButton* _tmp70_;
	GtkStyleContext* _tmp71_;
	GtkButton* _tmp72_;
	GtkStyleContext* _tmp73_;
	GtkGrid* action_grid = NULL;
	GtkGrid* _tmp74_;
	GtkGrid* _tmp75_;
	GtkStyleContext* _tmp76_;
	GtkGrid* _tmp77_;
	GtkGrid* _tmp78_;
	GtkButton* _tmp79_;
	GtkGrid* _tmp80_;
	GtkButton* _tmp81_;
	GtkScrolledWindow* scrolled = NULL;
	GtkScrolledWindow* _tmp82_;
	GtkScrolledWindow* _tmp83_;
	GtkScrolledWindow* _tmp84_;
	GtkScrolledWindow* _tmp85_;
	GtkListBox* _tmp86_;
	GtkSeparator* separator = NULL;
	GtkSeparator* _tmp87_;
	GtkSeparator* _tmp88_;
	GtkSeparator* _tmp89_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp90_;
	GtkBox* _tmp91_;
	GtkBox* _tmp92_;
	GtkBox* _tmp93_;
	GtkBox* _tmp94_;
	GtkBox* _tmp95_;
	GtkSeparator* _tmp96_;
	GtkSeparator* _tmp97_;
	GtkBox* _tmp98_;
	GtkGrid* _tmp99_;
	GtkBox* _tmp100_;
	GtkSeparator* _tmp101_;
	GtkSeparator* _tmp102_;
	GtkBox* _tmp103_;
	GtkRevealer* _tmp104_;
	GtkBox* _tmp105_;
	GtkScrolledWindow* _tmp106_;
	GtkBox* _tmp107_;
	GtkButton* _tmp108_;
	GtkButton* _tmp109_;
	WidgetsSearchEntry* _tmp110_;
	WidgetsSearchEntry* _tmp111_;
	WidgetsSearchEntry* _tmp112_;
	GtkButton* _tmp113_;
	GtkButton* _tmp114_;
	GtkListBox* _tmp115_;
	GtkScrolledWindow* _tmp116_;
	ServicesDatabase* _tmp117_;
	ServicesDatabase* _tmp118_;
	ServicesScan* _tmp119_;
	ServicesScan* _tmp120_;
	parent_class = G_OBJECT_CLASS (views_favorites_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_FAVORITES, ViewsFavorites);
	_data60_ = g_slice_new0 (Block60Data);
	_data60_->_ref_count_ = 1;
	_data60_->self = g_object_ref (self);
	self->priv->item_index = 0;
	self->priv->item_max = 25;
	_tmp0_ = byte_database;
	_tmp1_ = services_database_get_all_tracks_favorites (_tmp0_);
	_g_object_unref0 (self->priv->all_tracks);
	self->priv->all_tracks = _tmp1_;
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp2_, GTK_STYLE_CLASS_VIEW);
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp3_, "w-round");
	_tmp4_ = (GtkButton*) gtk_button_new_from_icon_name ("byte-arrow-back-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp4_);
	back_button = _tmp4_;
	_tmp5_ = back_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp5_, FALSE);
	_tmp6_ = back_button;
	g_object_set ((GtkWidget*) _tmp6_, "margin", 3, NULL);
	_tmp7_ = back_button;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp7_, 6);
	_tmp8_ = back_button;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp8_, 6);
	_tmp9_ = back_button;
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
	gtk_style_context_add_class (_tmp10_, GTK_STYLE_CLASS_FLAT);
	_tmp11_ = back_button;
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
	gtk_style_context_add_class (_tmp12_, "label-color-primary");
	_tmp13_ = (GtkButton*) gtk_button_new_from_icon_name ("edit-find-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp13_);
	search_button = _tmp13_;
	_tmp14_ = search_button;
	gtk_button_set_label (_tmp14_, _ ("Favorites"));
	_tmp15_ = search_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp15_, FALSE);
	_tmp16_ = search_button;
	gtk_button_set_image_position (_tmp16_, GTK_POS_LEFT);
	_tmp17_ = search_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp17_, GTK_ALIGN_CENTER);
	_tmp18_ = search_button;
	gtk_widget_set_halign ((GtkWidget*) _tmp18_, GTK_ALIGN_CENTER);
	_tmp19_ = search_button;
	_tmp20_ = gtk_widget_get_style_context ((GtkWidget*) _tmp19_);
	gtk_style_context_add_class (_tmp20_, GTK_STYLE_CLASS_FLAT);
	_tmp21_ = search_button;
	_tmp22_ = gtk_widget_get_style_context ((GtkWidget*) _tmp21_);
	gtk_style_context_add_class (_tmp22_, "h3");
	_tmp23_ = search_button;
	_tmp24_ = gtk_widget_get_style_context ((GtkWidget*) _tmp23_);
	gtk_style_context_add_class (_tmp24_, "label-color-primary");
	_tmp25_ = search_button;
	gtk_button_set_always_show_image (_tmp25_, TRUE);
	_tmp26_ = search_button;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp26_, _ ("Search by title, artist and album"));
	_tmp27_ = widgets_search_entry_new ();
	g_object_ref_sink (_tmp27_);
	_data60_->search_entry = _tmp27_;
	_tmp28_ = _data60_->search_entry;
	_tmp29_ = gtk_widget_get_style_context ((GtkWidget*) _tmp28_);
	gtk_style_context_add_class (_tmp29_, "search-entry");
	_tmp30_ = _data60_->search_entry;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp30_, _ ("Search by title, artist and album"));
	_tmp31_ = _data60_->search_entry;
	gtk_entry_set_placeholder_text ((GtkEntry*) _tmp31_, _ ("Search by title, artist and album"));
	_tmp32_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp32_);
	search_box = _tmp32_;
	_tmp33_ = search_box;
	_tmp34_ = gtk_widget_get_style_context ((GtkWidget*) _tmp33_);
	gtk_style_context_add_class (_tmp34_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp35_ = search_box;
	_tmp36_ = _data60_->search_entry;
	gtk_container_add ((GtkContainer*) _tmp35_, (GtkWidget*) _tmp36_);
	_tmp37_ = search_box;
	_tmp38_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp38_);
	_tmp39_ = _tmp38_;
	gtk_container_add ((GtkContainer*) _tmp37_, (GtkWidget*) _tmp39_);
	_g_object_unref0 (_tmp39_);
	_tmp40_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp40_);
	_data60_->search_revealer = _tmp40_;
	_tmp41_ = _data60_->search_revealer;
	gtk_revealer_set_transition_type (_tmp41_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
	_tmp42_ = _data60_->search_revealer;
	_tmp43_ = search_box;
	gtk_container_add ((GtkContainer*) _tmp42_, (GtkWidget*) _tmp43_);
	_tmp44_ = _data60_->search_revealer;
	gtk_revealer_set_reveal_child (_tmp44_, FALSE);
	_tmp45_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp45_);
	header_box = _tmp45_;
	_tmp46_ = header_box;
	_tmp47_ = gtk_widget_get_style_context ((GtkWidget*) _tmp46_);
	gtk_style_context_add_class (_tmp47_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp48_ = header_box;
	_tmp49_ = back_button;
	gtk_box_pack_start (_tmp48_, (GtkWidget*) _tmp49_, FALSE, FALSE, (guint) 0);
	_tmp50_ = header_box;
	_tmp51_ = search_button;
	gtk_box_set_center_widget (_tmp50_, (GtkWidget*) _tmp51_);
	_tmp52_ = (GtkListBox*) gtk_list_box_new ();
	g_object_ref_sink (_tmp52_);
	_g_object_unref0 (self->priv->listbox);
	self->priv->listbox = _tmp52_;
	_tmp53_ = self->priv->listbox;
	g_object_set ((GtkWidget*) _tmp53_, "expand", TRUE, NULL);
	_tmp54_ = (GtkButton*) gtk_button_new_from_icon_name ("media-playback-start-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp54_);
	play_button = _tmp54_;
	_tmp55_ = play_button;
	gtk_button_set_always_show_image (_tmp55_, TRUE);
	_tmp56_ = play_button;
	gtk_button_set_label (_tmp56_, _ ("Play"));
	_tmp57_ = play_button;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp57_, TRUE);
	_tmp58_ = play_button;
	g_object_set ((GtkWidget*) _tmp58_, "margin", 6, NULL);
	_tmp59_ = play_button;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp59_, 0);
	_tmp60_ = play_button;
	_tmp61_ = gtk_widget_get_style_context ((GtkWidget*) _tmp60_);
	gtk_style_context_add_class (_tmp61_, "home-button");
	_tmp62_ = play_button;
	_tmp63_ = gtk_widget_get_style_context ((GtkWidget*) _tmp62_);
	gtk_style_context_add_class (_tmp63_, GTK_STYLE_CLASS_FLAT);
	_tmp64_ = (GtkButton*) gtk_button_new_from_icon_name ("media-playlist-shuffle-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp64_);
	shuffle_button = _tmp64_;
	_tmp65_ = shuffle_button;
	gtk_button_set_always_show_image (_tmp65_, TRUE);
	_tmp66_ = shuffle_button;
	gtk_button_set_label (_tmp66_, _ ("Shuffle"));
	_tmp67_ = shuffle_button;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp67_, TRUE);
	_tmp68_ = shuffle_button;
	g_object_set ((GtkWidget*) _tmp68_, "margin", 6, NULL);
	_tmp69_ = shuffle_button;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp69_, 0);
	_tmp70_ = shuffle_button;
	_tmp71_ = gtk_widget_get_style_context ((GtkWidget*) _tmp70_);
	gtk_style_context_add_class (_tmp71_, "home-button");
	_tmp72_ = shuffle_button;
	_tmp73_ = gtk_widget_get_style_context ((GtkWidget*) _tmp72_);
	gtk_style_context_add_class (_tmp73_, GTK_STYLE_CLASS_FLAT);
	_tmp74_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp74_);
	action_grid = _tmp74_;
	_tmp75_ = action_grid;
	_tmp76_ = gtk_widget_get_style_context ((GtkWidget*) _tmp75_);
	gtk_style_context_add_class (_tmp76_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp77_ = action_grid;
	gtk_grid_set_column_spacing (_tmp77_, 6);
	_tmp78_ = action_grid;
	_tmp79_ = play_button;
	gtk_container_add ((GtkContainer*) _tmp78_, (GtkWidget*) _tmp79_);
	_tmp80_ = action_grid;
	_tmp81_ = shuffle_button;
	gtk_container_add ((GtkContainer*) _tmp80_, (GtkWidget*) _tmp81_);
	_tmp82_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
	g_object_ref_sink (_tmp82_);
	scrolled = _tmp82_;
	_tmp83_ = scrolled;
	g_object_set (_tmp83_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
	_tmp84_ = scrolled;
	g_object_set ((GtkWidget*) _tmp84_, "expand", TRUE, NULL);
	_tmp85_ = scrolled;
	_tmp86_ = self->priv->listbox;
	gtk_container_add ((GtkContainer*) _tmp85_, (GtkWidget*) _tmp86_);
	_tmp87_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp87_);
	separator = _tmp87_;
	_tmp88_ = separator;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp88_, 14);
	_tmp89_ = separator;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp89_, 9);
	_tmp90_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp90_);
	main_box = _tmp90_;
	_tmp91_ = main_box;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp91_, 3);
	_tmp92_ = main_box;
	g_object_set ((GtkWidget*) _tmp92_, "expand", TRUE, NULL);
	_tmp93_ = main_box;
	_tmp94_ = header_box;
	gtk_box_pack_start (_tmp93_, (GtkWidget*) _tmp94_, FALSE, FALSE, (guint) 0);
	_tmp95_ = main_box;
	_tmp96_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp96_);
	_tmp97_ = _tmp96_;
	gtk_box_pack_start (_tmp95_, (GtkWidget*) _tmp97_, FALSE, FALSE, (guint) 0);
	_g_object_unref0 (_tmp97_);
	_tmp98_ = main_box;
	_tmp99_ = action_grid;
	gtk_box_pack_start (_tmp98_, (GtkWidget*) _tmp99_, FALSE, FALSE, (guint) 0);
	_tmp100_ = main_box;
	_tmp101_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp101_);
	_tmp102_ = _tmp101_;
	gtk_box_pack_start (_tmp100_, (GtkWidget*) _tmp102_, FALSE, FALSE, (guint) 0);
	_g_object_unref0 (_tmp102_);
	_tmp103_ = main_box;
	_tmp104_ = _data60_->search_revealer;
	gtk_box_pack_start (_tmp103_, (GtkWidget*) _tmp104_, FALSE, FALSE, (guint) 0);
	_tmp105_ = main_box;
	_tmp106_ = scrolled;
	gtk_box_pack_start (_tmp105_, (GtkWidget*) _tmp106_, TRUE, TRUE, (guint) 0);
	_tmp107_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp107_);
	views_favorites_add_all_tracks (self);
	_tmp108_ = back_button;
	g_signal_connect_object (_tmp108_, "clicked", (GCallback) __views_favorites___lambda211__gtk_button_clicked, self, 0);
	_tmp109_ = search_button;
	g_signal_connect_data (_tmp109_, "clicked", (GCallback) __views_favorites___lambda212__gtk_button_clicked, block60_data_ref (_data60_), (GClosureNotify) block60_data_unref, 0);
	_tmp110_ = _data60_->search_entry;
	g_signal_connect_data ((GtkWidget*) _tmp110_, "key-release-event", (GCallback) __views_favorites___lambda213__gtk_widget_key_release_event, block60_data_ref (_data60_), (GClosureNotify) block60_data_unref, 0);
	_tmp111_ = _data60_->search_entry;
	g_signal_connect_data ((GtkEntry*) _tmp111_, "activate", (GCallback) __views_favorites___lambda214__gtk_entry_activate, block60_data_ref (_data60_), (GClosureNotify) block60_data_unref, 0);
	_tmp112_ = _data60_->search_entry;
	g_signal_connect_data ((GtkSearchEntry*) _tmp112_, "search-changed", (GCallback) __views_favorites___lambda217__gtk_search_entry_search_changed, block60_data_ref (_data60_), (GClosureNotify) block60_data_unref, 0);
	_tmp113_ = play_button;
	g_signal_connect_object (_tmp113_, "clicked", (GCallback) __views_favorites___lambda220__gtk_button_clicked, self, 0);
	_tmp114_ = shuffle_button;
	g_signal_connect_object (_tmp114_, "clicked", (GCallback) __views_favorites___lambda221__gtk_button_clicked, self, 0);
	_tmp115_ = self->priv->listbox;
	g_signal_connect_object (_tmp115_, "row-activated", (GCallback) __views_favorites___lambda222__gtk_list_box_row_activated, self, 0);
	_tmp116_ = scrolled;
	g_signal_connect_object (_tmp116_, "edge-reached", (GCallback) __views_favorites___lambda223__gtk_scrolled_window_edge_reached, self, 0);
	_tmp117_ = byte_database;
	g_signal_connect_object (_tmp117_, "updated-track-favorite", (GCallback) __views_favorites___lambda224__services_database_updated_track_favorite, self, 0);
	_tmp118_ = byte_database;
	g_signal_connect_object (_tmp118_, "reset-library", (GCallback) __views_favorites___lambda226__services_database_reset_library, self, 0);
	_tmp119_ = byte_scan_service;
	g_signal_connect_data (_tmp119_, "sync-started", (GCallback) __views_favorites___lambda229__services_scan_sync_started, block60_data_ref (_data60_), (GClosureNotify) block60_data_unref, 0);
	_tmp120_ = byte_scan_service;
	g_signal_connect_data (_tmp120_, "sync-finished", (GCallback) __views_favorites___lambda230__services_scan_sync_finished, block60_data_ref (_data60_), (GClosureNotify) block60_data_unref, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (separator);
	_g_object_unref0 (scrolled);
	_g_object_unref0 (action_grid);
	_g_object_unref0 (shuffle_button);
	_g_object_unref0 (play_button);
	_g_object_unref0 (header_box);
	_g_object_unref0 (search_box);
	_g_object_unref0 (search_button);
	_g_object_unref0 (back_button);
	block60_data_unref (_data60_);
	_data60_ = NULL;
	return obj;
}


static void
views_favorites_class_init (ViewsFavoritesClass * klass)
{
	views_favorites_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (ViewsFavoritesPrivate));
	G_OBJECT_CLASS (klass)->constructor = views_favorites_constructor;
	G_OBJECT_CLASS (klass)->finalize = views_favorites_finalize;
	views_favorites_signals[VIEWS_FAVORITES_GO_BACK_SIGNAL] = g_signal_new ("go-back", VIEWS_TYPE_FAVORITES, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
views_favorites_instance_init (ViewsFavorites * self)
{
	self->priv = VIEWS_FAVORITES_GET_PRIVATE (self);
}


static void
views_favorites_finalize (GObject * obj)
{
	ViewsFavorites * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_FAVORITES, ViewsFavorites);
	_g_object_unref0 (self->priv->listbox);
	_g_object_unref0 (self->priv->all_tracks);
	G_OBJECT_CLASS (views_favorites_parent_class)->finalize (obj);
}


GType
views_favorites_get_type (void)
{
	static volatile gsize views_favorites_type_id__volatile = 0;
	if (g_once_init_enter (&views_favorites_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsFavoritesClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_favorites_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsFavorites), 0, (GInstanceInitFunc) views_favorites_instance_init, NULL };
		GType views_favorites_type_id;
		views_favorites_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsFavorites", &g_define_type_info, 0);
		g_once_init_leave (&views_favorites_type_id__volatile, views_favorites_type_id);
	}
	return views_favorites_type_id__volatile;
}



