/* Artists.c generated by valac 0.40.11, the Vala compiler
 * generated from Artists.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>


#define VIEWS_TYPE_ARTISTS (views_artists_get_type ())
#define VIEWS_ARTISTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_ARTISTS, ViewsArtists))
#define VIEWS_ARTISTS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_ARTISTS, ViewsArtistsClass))
#define VIEWS_IS_ARTISTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_ARTISTS))
#define VIEWS_IS_ARTISTS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_ARTISTS))
#define VIEWS_ARTISTS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_ARTISTS, ViewsArtistsClass))

typedef struct _ViewsArtists ViewsArtists;
typedef struct _ViewsArtistsClass ViewsArtistsClass;
typedef struct _ViewsArtistsPrivate ViewsArtistsPrivate;

#define WIDGETS_TYPE_SEARCH_ENTRY (widgets_search_entry_get_type ())
#define WIDGETS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntry))
#define WIDGETS_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntryClass))
#define WIDGETS_IS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_SEARCH_ENTRY))
#define WIDGETS_IS_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_SEARCH_ENTRY))
#define WIDGETS_SEARCH_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntryClass))

typedef struct _WidgetsSearchEntry WidgetsSearchEntry;
typedef struct _WidgetsSearchEntryClass WidgetsSearchEntryClass;

#define OBJECTS_TYPE_ARTIST (objects_artist_get_type ())
#define OBJECTS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ARTIST, ObjectsArtist))
#define OBJECTS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ARTIST, ObjectsArtistClass))
#define OBJECTS_IS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ARTIST))
#define OBJECTS_IS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ARTIST))
#define OBJECTS_ARTIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ARTIST, ObjectsArtistClass))

typedef struct _ObjectsArtist ObjectsArtist;
typedef struct _ObjectsArtistClass ObjectsArtistClass;
enum  {
	VIEWS_ARTISTS_0_PROPERTY,
	VIEWS_ARTISTS_NUM_PROPERTIES
};
static GParamSpec* views_artists_properties[VIEWS_ARTISTS_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ObjectsArtistPrivate ObjectsArtistPrivate;

#define WIDGETS_TYPE_ARTIST_ROW (widgets_artist_row_get_type ())
#define WIDGETS_ARTIST_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRow))
#define WIDGETS_ARTIST_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRowClass))
#define WIDGETS_IS_ARTIST_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ARTIST_ROW))
#define WIDGETS_IS_ARTIST_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ARTIST_ROW))
#define WIDGETS_ARTIST_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRowClass))

typedef struct _WidgetsArtistRow WidgetsArtistRow;
typedef struct _WidgetsArtistRowClass WidgetsArtistRowClass;
typedef struct _Block51Data Block51Data;
typedef struct _Block52Data Block52Data;
typedef struct _Block53Data Block53Data;
enum  {
	VIEWS_ARTISTS_GO_BACK_SIGNAL,
	VIEWS_ARTISTS_GO_ARTIST_SIGNAL,
	VIEWS_ARTISTS_NUM_SIGNALS
};
static guint views_artists_signals[VIEWS_ARTISTS_NUM_SIGNALS] = {0};

struct _ViewsArtists {
	GtkEventBox parent_instance;
	ViewsArtistsPrivate * priv;
};

struct _ViewsArtistsClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsArtistsPrivate {
	GtkListBox* listbox;
	WidgetsSearchEntry* search_entry;
	gint item_index;
	gint item_max;
	GeeArrayList* all_items;
};

struct _ObjectsArtist {
	GObject parent_instance;
	ObjectsArtistPrivate * priv;
	gint id;
	gchar* name;
};

struct _ObjectsArtistClass {
	GObjectClass parent_class;
};

struct _Block51Data {
	int _ref_count_;
	ViewsArtists* self;
	GtkRevealer* search_revealer;
};

struct _Block52Data {
	int _ref_count_;
	ViewsArtists* self;
	ObjectsArtist* artist;
};

struct _Block53Data {
	int _ref_count_;
	ViewsArtists* self;
	GtkWidget* widget;
};


static gpointer views_artists_parent_class = NULL;
extern ServicesDatabase* byte_database;

GType views_artists_get_type (void) G_GNUC_CONST;
GType widgets_search_entry_get_type (void) G_GNUC_CONST;
GType objects_artist_get_type (void) G_GNUC_CONST;
#define VIEWS_ARTISTS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_ARTISTS, ViewsArtistsPrivate))
ViewsArtists* views_artists_new (void);
ViewsArtists* views_artists_construct (GType object_type);
static void views_artists_start_search (ViewsArtists* self);
static void ___lambda165_ (ViewsArtists* self,
                    GtkWidget* widget);
static void ____lambda165__gtk_callback (GtkWidget* widget,
                                  gpointer self);
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_artists_search (ServicesDatabase* self,
                                                        const gchar* search_text);
void views_artists_add_all_items (ViewsArtists* self);
static void ___lambda166_ (ViewsArtists* self,
                    GtkWidget* widget);
static void ____lambda166__gtk_callback (GtkWidget* widget,
                                  gpointer self);
GeeArrayList* services_database_get_all_artists (ServicesDatabase* self);
static void views_artists_add_artist (ViewsArtists* self,
                               ObjectsArtist* artist);
GType widgets_artist_row_get_type (void) G_GNUC_CONST;
WidgetsArtistRow* widgets_artist_row_new (ObjectsArtist* artist);
WidgetsArtistRow* widgets_artist_row_construct (GType object_type,
                                                ObjectsArtist* artist);
static GObject * views_artists_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
static Block51Data* block51_data_ref (Block51Data* _data51_);
static void block51_data_unref (void * _userdata_);
WidgetsSearchEntry* widgets_search_entry_new (void);
WidgetsSearchEntry* widgets_search_entry_construct (GType object_type);
static void _views_artists___lambda167_ (ViewsArtists* self);
static void __views_artists___lambda167__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static void _views_artists___lambda168_ (ViewsArtists* self,
                                  GtkPositionType pos);
static void __views_artists___lambda168__gtk_scrolled_window_edge_reached (GtkScrolledWindow* _sender,
                                                                    GtkPositionType pos,
                                                                    gpointer self);
static void _views_artists___lambda169_ (Block51Data* _data51_);
static void __views_artists___lambda169__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static gboolean _views_artists___lambda170_ (Block51Data* _data51_,
                                      GdkEventKey* key);
static gboolean __views_artists___lambda170__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                    GdkEventKey* event,
                                                                    gpointer self);
static void _views_artists_start_search_gtk_entry_activate (GtkEntry* _sender,
                                                     gpointer self);
static void _views_artists_start_search_gtk_search_entry_search_changed (GtkSearchEntry* _sender,
                                                                  gpointer self);
static void _views_artists___lambda171_ (ViewsArtists* self,
                                  GtkListBoxRow* row);
ObjectsArtist* widgets_artist_row_get_artist (WidgetsArtistRow* self);
static void __views_artists___lambda171__gtk_list_box_row_activated (GtkListBox* _sender,
                                                              GtkListBoxRow* row,
                                                              gpointer self);
static void _views_artists___lambda172_ (ViewsArtists* self,
                                  ObjectsArtist* artist);
static Block52Data* block52_data_ref (Block52Data* _data52_);
static void block52_data_unref (void * _userdata_);
static gboolean __lambda173_ (Block52Data* _data52_);
static gboolean ___lambda173__gsource_func (gpointer self);
static void __views_artists___lambda172__services_database_added_new_artist (ServicesDatabase* _sender,
                                                                      ObjectsArtist* artist,
                                                                      gpointer self);
static void _views_artists___lambda174_ (ViewsArtists* self);
static void __lambda175_ (ViewsArtists* self,
                   GtkWidget* widget);
static Block53Data* block53_data_ref (Block53Data* _data53_);
static void block53_data_unref (void * _userdata_);
static gboolean __lambda176_ (Block53Data* _data53_);
static gboolean ___lambda176__gsource_func (gpointer self);
static void ___lambda175__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __views_artists___lambda174__services_database_reset_library (ServicesDatabase* _sender,
                                                                   gpointer self);
static void views_artists_finalize (GObject * obj);


ViewsArtists*
views_artists_construct (GType object_type)
{
	ViewsArtists * self = NULL;
	self = (ViewsArtists*) g_object_new (object_type, NULL);
	return self;
}


ViewsArtists*
views_artists_new (void)
{
	return views_artists_construct (VIEWS_TYPE_ARTISTS);
}


static void
___lambda165_ (ViewsArtists* self,
               GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
____lambda165__gtk_callback (GtkWidget* widget,
                             gpointer self)
{
	___lambda165_ ((ViewsArtists*) self, widget);
}


static void
___lambda166_ (ViewsArtists* self,
               GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
____lambda166__gtk_callback (GtkWidget* widget,
                             gpointer self)
{
	___lambda166_ ((ViewsArtists*) self, widget);
}


static void
views_artists_start_search (ViewsArtists* self)
{
	WidgetsSearchEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->search_entry;
	_tmp1_ = gtk_entry_get_text ((GtkEntry*) _tmp0_);
	_tmp2_ = _tmp1_;
	if (g_strcmp0 (_tmp2_, "") != 0) {
		GtkListBox* _tmp3_;
		ServicesDatabase* _tmp4_;
		WidgetsSearchEntry* _tmp5_;
		const gchar* _tmp6_;
		const gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		GeeArrayList* _tmp10_;
		self->priv->item_index = 0;
		self->priv->item_max = 100;
		_tmp3_ = self->priv->listbox;
		gtk_container_foreach ((GtkContainer*) _tmp3_, ____lambda165__gtk_callback, self);
		_tmp4_ = byte_database;
		_tmp5_ = self->priv->search_entry;
		_tmp6_ = gtk_entry_get_text ((GtkEntry*) _tmp5_);
		_tmp7_ = _tmp6_;
		_tmp8_ = g_utf8_strdown (_tmp7_, (gssize) -1);
		_tmp9_ = _tmp8_;
		_tmp10_ = services_database_get_all_artists_search (_tmp4_, _tmp9_);
		_g_object_unref0 (self->priv->all_items);
		self->priv->all_items = _tmp10_;
		_g_free0 (_tmp9_);
		views_artists_add_all_items (self);
	} else {
		GtkListBox* _tmp11_;
		ServicesDatabase* _tmp12_;
		GeeArrayList* _tmp13_;
		self->priv->item_index = 0;
		self->priv->item_max = 100;
		_tmp11_ = self->priv->listbox;
		gtk_container_foreach ((GtkContainer*) _tmp11_, ____lambda166__gtk_callback, self);
		_tmp12_ = byte_database;
		_tmp13_ = services_database_get_all_artists (_tmp12_);
		_g_object_unref0 (self->priv->all_items);
		self->priv->all_items = _tmp13_;
		views_artists_add_all_items (self);
	}
}


static void
views_artists_add_artist (ViewsArtists* self,
                          ObjectsArtist* artist)
{
	gint _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (artist != NULL);
	_tmp0_ = artist->id;
	if (_tmp0_ != 0) {
		WidgetsArtistRow* row = NULL;
		WidgetsArtistRow* _tmp1_;
		GtkListBox* _tmp2_;
		WidgetsArtistRow* _tmp3_;
		GtkListBox* _tmp4_;
		_tmp1_ = widgets_artist_row_new (artist);
		g_object_ref_sink (_tmp1_);
		row = _tmp1_;
		_tmp2_ = self->priv->listbox;
		_tmp3_ = row;
		gtk_container_add ((GtkContainer*) _tmp2_, (GtkWidget*) _tmp3_);
		_tmp4_ = self->priv->listbox;
		gtk_widget_show_all ((GtkWidget*) _tmp4_);
		_g_object_unref0 (row);
	}
}


void
views_artists_add_all_items (ViewsArtists* self)
{
	gint _tmp0_;
	GeeArrayList* _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->item_max;
	_tmp1_ = self->priv->all_items;
	_tmp2_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp1_);
	_tmp3_ = _tmp2_;
	if (_tmp0_ > _tmp3_) {
		GeeArrayList* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
		_tmp4_ = self->priv->all_items;
		_tmp5_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp4_);
		_tmp6_ = _tmp5_;
		self->priv->item_max = _tmp6_;
	}
	{
		gint i = 0;
		gint _tmp7_;
		_tmp7_ = self->priv->item_index;
		i = _tmp7_;
		{
			gboolean _tmp8_ = FALSE;
			_tmp8_ = TRUE;
			while (TRUE) {
				gint _tmp10_;
				gint _tmp11_;
				WidgetsArtistRow* row = NULL;
				GeeArrayList* _tmp12_;
				gint _tmp13_;
				gpointer _tmp14_;
				ObjectsArtist* _tmp15_;
				WidgetsArtistRow* _tmp16_;
				WidgetsArtistRow* _tmp17_;
				GtkListBox* _tmp18_;
				WidgetsArtistRow* _tmp19_;
				GtkListBox* _tmp20_;
				if (!_tmp8_) {
					gint _tmp9_;
					_tmp9_ = i;
					i = _tmp9_ + 1;
				}
				_tmp8_ = FALSE;
				_tmp10_ = i;
				_tmp11_ = self->priv->item_max;
				if (!(_tmp10_ < _tmp11_)) {
					break;
				}
				_tmp12_ = self->priv->all_items;
				_tmp13_ = i;
				_tmp14_ = gee_abstract_list_get ((GeeAbstractList*) _tmp12_, _tmp13_);
				_tmp15_ = (ObjectsArtist*) _tmp14_;
				_tmp16_ = widgets_artist_row_new (_tmp15_);
				g_object_ref_sink (_tmp16_);
				_tmp17_ = _tmp16_;
				_g_object_unref0 (_tmp15_);
				row = _tmp17_;
				_tmp18_ = self->priv->listbox;
				_tmp19_ = row;
				gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) _tmp19_);
				_tmp20_ = self->priv->listbox;
				gtk_widget_show_all ((GtkWidget*) _tmp20_);
				_g_object_unref0 (row);
			}
		}
	}
}


static Block51Data*
block51_data_ref (Block51Data* _data51_)
{
	g_atomic_int_inc (&_data51_->_ref_count_);
	return _data51_;
}


static void
block51_data_unref (void * _userdata_)
{
	Block51Data* _data51_;
	_data51_ = (Block51Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data51_->_ref_count_)) {
		ViewsArtists* self;
		self = _data51_->self;
		_g_object_unref0 (_data51_->search_revealer);
		_g_object_unref0 (self);
		g_slice_free (Block51Data, _data51_);
	}
}


static void
_views_artists___lambda167_ (ViewsArtists* self)
{
	g_signal_emit (self, views_artists_signals[VIEWS_ARTISTS_GO_BACK_SIGNAL], 0);
}


static void
__views_artists___lambda167__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
	_views_artists___lambda167_ ((ViewsArtists*) self);
}


static void
_views_artists___lambda168_ (ViewsArtists* self,
                             GtkPositionType pos)
{
	if (pos == GTK_POS_BOTTOM) {
		gint _tmp0_;
		gint _tmp1_;
		gint _tmp2_;
		GeeArrayList* _tmp3_;
		gint _tmp4_;
		gint _tmp5_;
		_tmp0_ = self->priv->item_max;
		self->priv->item_index = _tmp0_;
		_tmp1_ = self->priv->item_max;
		self->priv->item_max = _tmp1_ + 100;
		_tmp2_ = self->priv->item_max;
		_tmp3_ = self->priv->all_items;
		_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
		_tmp5_ = _tmp4_;
		if (_tmp2_ > _tmp5_) {
			GeeArrayList* _tmp6_;
			gint _tmp7_;
			gint _tmp8_;
			_tmp6_ = self->priv->all_items;
			_tmp7_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp6_);
			_tmp8_ = _tmp7_;
			self->priv->item_max = _tmp8_;
		}
		views_artists_add_all_items (self);
	}
}


static void
__views_artists___lambda168__gtk_scrolled_window_edge_reached (GtkScrolledWindow* _sender,
                                                               GtkPositionType pos,
                                                               gpointer self)
{
	_views_artists___lambda168_ ((ViewsArtists*) self, pos);
}


static void
_views_artists___lambda169_ (Block51Data* _data51_)
{
	ViewsArtists* self;
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	self = _data51_->self;
	_tmp0_ = _data51_->search_revealer;
	_tmp1_ = gtk_revealer_get_reveal_child (_tmp0_);
	_tmp2_ = _tmp1_;
	if (_tmp2_) {
		GtkRevealer* _tmp3_;
		_tmp3_ = _data51_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp3_, FALSE);
	} else {
		GtkRevealer* _tmp4_;
		WidgetsSearchEntry* _tmp5_;
		_tmp4_ = _data51_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp4_, TRUE);
		_tmp5_ = self->priv->search_entry;
		gtk_widget_grab_focus ((GtkWidget*) _tmp5_);
	}
}


static void
__views_artists___lambda169__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
	_views_artists___lambda169_ (self);
}


static gboolean
_views_artists___lambda170_ (Block51Data* _data51_,
                             GdkEventKey* key)
{
	ViewsArtists* self;
	gboolean result = FALSE;
	guint _tmp0_;
	self = _data51_->self;
	g_return_val_if_fail (key != NULL, FALSE);
	_tmp0_ = key->keyval;
	if (_tmp0_ == ((guint) 65307)) {
		GtkRevealer* _tmp1_;
		WidgetsSearchEntry* _tmp2_;
		_tmp1_ = _data51_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp1_, FALSE);
		_tmp2_ = self->priv->search_entry;
		gtk_entry_set_text ((GtkEntry*) _tmp2_, "");
	}
	result = FALSE;
	return result;
}


static gboolean
__views_artists___lambda170__gtk_widget_key_release_event (GtkWidget* _sender,
                                                           GdkEventKey* event,
                                                           gpointer self)
{
	gboolean result;
	result = _views_artists___lambda170_ (self, event);
	return result;
}


static void
_views_artists_start_search_gtk_entry_activate (GtkEntry* _sender,
                                                gpointer self)
{
	views_artists_start_search ((ViewsArtists*) self);
}


static void
_views_artists_start_search_gtk_search_entry_search_changed (GtkSearchEntry* _sender,
                                                             gpointer self)
{
	views_artists_start_search ((ViewsArtists*) self);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
_views_artists___lambda171_ (ViewsArtists* self,
                             GtkListBoxRow* row)
{
	WidgetsArtistRow* item = NULL;
	WidgetsArtistRow* _tmp0_;
	WidgetsArtistRow* _tmp1_;
	ObjectsArtist* _tmp2_;
	ObjectsArtist* _tmp3_;
	g_return_if_fail (row != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_ARTIST_ROW) ? ((WidgetsArtistRow*) row) : NULL);
	item = _tmp0_;
	_tmp1_ = item;
	_tmp2_ = widgets_artist_row_get_artist (_tmp1_);
	_tmp3_ = _tmp2_;
	g_signal_emit (self, views_artists_signals[VIEWS_ARTISTS_GO_ARTIST_SIGNAL], 0, _tmp3_);
	_g_object_unref0 (item);
}


static void
__views_artists___lambda171__gtk_list_box_row_activated (GtkListBox* _sender,
                                                         GtkListBoxRow* row,
                                                         gpointer self)
{
	_views_artists___lambda171_ ((ViewsArtists*) self, row);
}


static Block52Data*
block52_data_ref (Block52Data* _data52_)
{
	g_atomic_int_inc (&_data52_->_ref_count_);
	return _data52_;
}


static void
block52_data_unref (void * _userdata_)
{
	Block52Data* _data52_;
	_data52_ = (Block52Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data52_->_ref_count_)) {
		ViewsArtists* self;
		self = _data52_->self;
		_g_object_unref0 (_data52_->artist);
		_g_object_unref0 (self);
		g_slice_free (Block52Data, _data52_);
	}
}


static gboolean
__lambda173_ (Block52Data* _data52_)
{
	ViewsArtists* self;
	gboolean result = FALSE;
	self = _data52_->self;
	views_artists_add_artist (self, _data52_->artist);
	result = FALSE;
	return result;
}


static gboolean
___lambda173__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda173_ (self);
	return result;
}


static void
_views_artists___lambda172_ (ViewsArtists* self,
                             ObjectsArtist* artist)
{
	Block52Data* _data52_;
	ObjectsArtist* _tmp0_;
	g_return_if_fail (artist != NULL);
	_data52_ = g_slice_new0 (Block52Data);
	_data52_->_ref_count_ = 1;
	_data52_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (artist);
	_g_object_unref0 (_data52_->artist);
	_data52_->artist = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda173__gsource_func, block52_data_ref (_data52_), block52_data_unref);
	block52_data_unref (_data52_);
	_data52_ = NULL;
}


static void
__views_artists___lambda172__services_database_added_new_artist (ServicesDatabase* _sender,
                                                                 ObjectsArtist* artist,
                                                                 gpointer self)
{
	_views_artists___lambda172_ ((ViewsArtists*) self, artist);
}


static Block53Data*
block53_data_ref (Block53Data* _data53_)
{
	g_atomic_int_inc (&_data53_->_ref_count_);
	return _data53_;
}


static void
block53_data_unref (void * _userdata_)
{
	Block53Data* _data53_;
	_data53_ = (Block53Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data53_->_ref_count_)) {
		ViewsArtists* self;
		self = _data53_->self;
		_g_object_unref0 (_data53_->widget);
		_g_object_unref0 (self);
		g_slice_free (Block53Data, _data53_);
	}
}


static gboolean
__lambda176_ (Block53Data* _data53_)
{
	ViewsArtists* self;
	gboolean result = FALSE;
	self = _data53_->self;
	gtk_widget_destroy (_data53_->widget);
	result = FALSE;
	return result;
}


static gboolean
___lambda176__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda176_ (self);
	return result;
}


static void
__lambda175_ (ViewsArtists* self,
              GtkWidget* widget)
{
	Block53Data* _data53_;
	GtkWidget* _tmp0_;
	g_return_if_fail (widget != NULL);
	_data53_ = g_slice_new0 (Block53Data);
	_data53_->_ref_count_ = 1;
	_data53_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (widget);
	_g_object_unref0 (_data53_->widget);
	_data53_->widget = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda176__gsource_func, block53_data_ref (_data53_), block53_data_unref);
	block53_data_unref (_data53_);
	_data53_ = NULL;
}


static void
___lambda175__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda175_ ((ViewsArtists*) self, widget);
}


static void
_views_artists___lambda174_ (ViewsArtists* self)
{
	GtkListBox* _tmp0_;
	_tmp0_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda175__gtk_callback, self);
}


static void
__views_artists___lambda174__services_database_reset_library (ServicesDatabase* _sender,
                                                              gpointer self)
{
	_views_artists___lambda174_ ((ViewsArtists*) self);
}


static GObject *
views_artists_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsArtists * self;
	Block51Data* _data51_;
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkButton* back_button = NULL;
	GtkButton* _tmp4_;
	GtkButton* _tmp5_;
	GtkButton* _tmp6_;
	GtkButton* _tmp7_;
	GtkButton* _tmp8_;
	GtkButton* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkButton* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkLabel* title_label = NULL;
	gchar* _tmp13_;
	gchar* _tmp14_;
	GtkLabel* _tmp15_;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkLabel* _tmp18_;
	GtkLabel* _tmp19_;
	GtkStyleContext* _tmp20_;
	WidgetsSearchEntry* _tmp21_;
	WidgetsSearchEntry* _tmp22_;
	WidgetsSearchEntry* _tmp23_;
	GtkBox* search_box = NULL;
	GtkBox* _tmp24_;
	GtkBox* _tmp25_;
	GtkStyleContext* _tmp26_;
	GtkBox* _tmp27_;
	WidgetsSearchEntry* _tmp28_;
	GtkBox* _tmp29_;
	GtkSeparator* _tmp30_;
	GtkSeparator* _tmp31_;
	GtkRevealer* _tmp32_;
	GtkRevealer* _tmp33_;
	GtkRevealer* _tmp34_;
	GtkBox* _tmp35_;
	GtkRevealer* _tmp36_;
	GtkButton* search_button = NULL;
	GtkButton* _tmp37_;
	GtkButton* _tmp38_;
	GtkButton* _tmp39_;
	GtkButton* _tmp40_;
	GtkStyleContext* _tmp41_;
	GtkButton* _tmp42_;
	GtkStyleContext* _tmp43_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp44_;
	GtkBox* _tmp45_;
	GtkStyleContext* _tmp46_;
	GtkBox* _tmp47_;
	GtkButton* _tmp48_;
	GtkBox* _tmp49_;
	GtkLabel* _tmp50_;
	GtkBox* _tmp51_;
	GtkButton* _tmp52_;
	GtkListBox* _tmp53_;
	GtkListBox* _tmp54_;
	GtkScrolledWindow* scrolled = NULL;
	GtkScrolledWindow* _tmp55_;
	GtkScrolledWindow* _tmp56_;
	GtkScrolledWindow* _tmp57_;
	GtkScrolledWindow* _tmp58_;
	GtkListBox* _tmp59_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp60_;
	GtkBox* _tmp61_;
	GtkBox* _tmp62_;
	GtkBox* _tmp63_;
	GtkBox* _tmp64_;
	GtkSeparator* _tmp65_;
	GtkSeparator* _tmp66_;
	GtkBox* _tmp67_;
	GtkRevealer* _tmp68_;
	GtkBox* _tmp69_;
	GtkScrolledWindow* _tmp70_;
	GtkBox* _tmp71_;
	GtkButton* _tmp72_;
	GtkScrolledWindow* _tmp73_;
	GtkButton* _tmp74_;
	WidgetsSearchEntry* _tmp75_;
	WidgetsSearchEntry* _tmp76_;
	WidgetsSearchEntry* _tmp77_;
	GtkListBox* _tmp78_;
	ServicesDatabase* _tmp79_;
	ServicesDatabase* _tmp80_;
	parent_class = G_OBJECT_CLASS (views_artists_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_ARTISTS, ViewsArtists);
	_data51_ = g_slice_new0 (Block51Data);
	_data51_->_ref_count_ = 1;
	_data51_->self = g_object_ref (self);
	self->priv->item_index = 0;
	self->priv->item_max = 25;
	_tmp0_ = byte_database;
	_tmp1_ = services_database_get_all_artists (_tmp0_);
	_g_object_unref0 (self->priv->all_items);
	self->priv->all_items = _tmp1_;
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp2_, GTK_STYLE_CLASS_VIEW);
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp3_, "w-round");
	_tmp4_ = (GtkButton*) gtk_button_new_from_icon_name ("byte-arrow-back-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp4_);
	back_button = _tmp4_;
	_tmp5_ = back_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp5_, FALSE);
	_tmp6_ = back_button;
	g_object_set ((GtkWidget*) _tmp6_, "margin", 3, NULL);
	_tmp7_ = back_button;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp7_, 6);
	_tmp8_ = back_button;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp8_, 6);
	_tmp9_ = back_button;
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
	gtk_style_context_add_class (_tmp10_, GTK_STYLE_CLASS_FLAT);
	_tmp11_ = back_button;
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
	gtk_style_context_add_class (_tmp12_, "label-color-primary");
	_tmp13_ = g_strdup_printf ("<b>%s</b>", _ ("Artists"));
	_tmp14_ = _tmp13_;
	_tmp15_ = (GtkLabel*) gtk_label_new (_tmp14_);
	g_object_ref_sink (_tmp15_);
	_tmp16_ = _tmp15_;
	_g_free0 (_tmp14_);
	title_label = _tmp16_;
	_tmp17_ = title_label;
	gtk_label_set_use_markup (_tmp17_, TRUE);
	_tmp18_ = title_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp18_, GTK_ALIGN_CENTER);
	_tmp19_ = title_label;
	_tmp20_ = gtk_widget_get_style_context ((GtkWidget*) _tmp19_);
	gtk_style_context_add_class (_tmp20_, "h3");
	_tmp21_ = widgets_search_entry_new ();
	g_object_ref_sink (_tmp21_);
	_g_object_unref0 (self->priv->search_entry);
	self->priv->search_entry = _tmp21_;
	_tmp22_ = self->priv->search_entry;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp22_, _ ("Search by title, artist and album"));
	_tmp23_ = self->priv->search_entry;
	gtk_entry_set_placeholder_text ((GtkEntry*) _tmp23_, _ ("Search by title, artist and album"));
	_tmp24_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp24_);
	search_box = _tmp24_;
	_tmp25_ = search_box;
	_tmp26_ = gtk_widget_get_style_context ((GtkWidget*) _tmp25_);
	gtk_style_context_add_class (_tmp26_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp27_ = search_box;
	_tmp28_ = self->priv->search_entry;
	gtk_container_add ((GtkContainer*) _tmp27_, (GtkWidget*) _tmp28_);
	_tmp29_ = search_box;
	_tmp30_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp30_);
	_tmp31_ = _tmp30_;
	gtk_container_add ((GtkContainer*) _tmp29_, (GtkWidget*) _tmp31_);
	_g_object_unref0 (_tmp31_);
	_tmp32_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp32_);
	_data51_->search_revealer = _tmp32_;
	_tmp33_ = _data51_->search_revealer;
	gtk_revealer_set_transition_type (_tmp33_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
	_tmp34_ = _data51_->search_revealer;
	_tmp35_ = search_box;
	gtk_container_add ((GtkContainer*) _tmp34_, (GtkWidget*) _tmp35_);
	_tmp36_ = _data51_->search_revealer;
	gtk_revealer_set_reveal_child (_tmp36_, FALSE);
	_tmp37_ = (GtkButton*) gtk_button_new_from_icon_name ("edit-find-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp37_);
	search_button = _tmp37_;
	_tmp38_ = search_button;
	g_object_set ((GtkWidget*) _tmp38_, "margin", 3, NULL);
	_tmp39_ = search_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp39_, FALSE);
	_tmp40_ = search_button;
	_tmp41_ = gtk_widget_get_style_context ((GtkWidget*) _tmp40_);
	gtk_style_context_add_class (_tmp41_, "label-color-primary");
	_tmp42_ = search_button;
	_tmp43_ = gtk_widget_get_style_context ((GtkWidget*) _tmp42_);
	gtk_style_context_add_class (_tmp43_, GTK_STYLE_CLASS_FLAT);
	_tmp44_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp44_);
	header_box = _tmp44_;
	_tmp45_ = header_box;
	_tmp46_ = gtk_widget_get_style_context ((GtkWidget*) _tmp45_);
	gtk_style_context_add_class (_tmp46_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp47_ = header_box;
	_tmp48_ = back_button;
	gtk_box_pack_start (_tmp47_, (GtkWidget*) _tmp48_, FALSE, FALSE, (guint) 0);
	_tmp49_ = header_box;
	_tmp50_ = title_label;
	gtk_box_set_center_widget (_tmp49_, (GtkWidget*) _tmp50_);
	_tmp51_ = header_box;
	_tmp52_ = search_button;
	gtk_box_pack_end (_tmp51_, (GtkWidget*) _tmp52_, FALSE, FALSE, (guint) 0);
	_tmp53_ = (GtkListBox*) gtk_list_box_new ();
	g_object_ref_sink (_tmp53_);
	_g_object_unref0 (self->priv->listbox);
	self->priv->listbox = _tmp53_;
	_tmp54_ = self->priv->listbox;
	g_object_set ((GtkWidget*) _tmp54_, "expand", TRUE, NULL);
	_tmp55_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
	g_object_ref_sink (_tmp55_);
	scrolled = _tmp55_;
	_tmp56_ = scrolled;
	g_object_set (_tmp56_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
	_tmp57_ = scrolled;
	g_object_set ((GtkWidget*) _tmp57_, "expand", TRUE, NULL);
	_tmp58_ = scrolled;
	_tmp59_ = self->priv->listbox;
	gtk_container_add ((GtkContainer*) _tmp58_, (GtkWidget*) _tmp59_);
	_tmp60_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp60_);
	main_box = _tmp60_;
	_tmp61_ = main_box;
	g_object_set ((GtkWidget*) _tmp61_, "expand", TRUE, NULL);
	_tmp62_ = main_box;
	_tmp63_ = header_box;
	gtk_box_pack_start (_tmp62_, (GtkWidget*) _tmp63_, FALSE, FALSE, (guint) 0);
	_tmp64_ = main_box;
	_tmp65_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp65_);
	_tmp66_ = _tmp65_;
	gtk_box_pack_start (_tmp64_, (GtkWidget*) _tmp66_, FALSE, FALSE, (guint) 0);
	_g_object_unref0 (_tmp66_);
	_tmp67_ = main_box;
	_tmp68_ = _data51_->search_revealer;
	gtk_box_pack_start (_tmp67_, (GtkWidget*) _tmp68_, FALSE, FALSE, (guint) 0);
	_tmp69_ = main_box;
	_tmp70_ = scrolled;
	gtk_box_pack_start (_tmp69_, (GtkWidget*) _tmp70_, TRUE, TRUE, (guint) 0);
	_tmp71_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp71_);
	views_artists_add_all_items (self);
	_tmp72_ = back_button;
	g_signal_connect_object (_tmp72_, "clicked", (GCallback) __views_artists___lambda167__gtk_button_clicked, self, 0);
	_tmp73_ = scrolled;
	g_signal_connect_object (_tmp73_, "edge-reached", (GCallback) __views_artists___lambda168__gtk_scrolled_window_edge_reached, self, 0);
	_tmp74_ = search_button;
	g_signal_connect_data (_tmp74_, "clicked", (GCallback) __views_artists___lambda169__gtk_button_clicked, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
	_tmp75_ = self->priv->search_entry;
	g_signal_connect_data ((GtkWidget*) _tmp75_, "key-release-event", (GCallback) __views_artists___lambda170__gtk_widget_key_release_event, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
	_tmp76_ = self->priv->search_entry;
	g_signal_connect_object ((GtkEntry*) _tmp76_, "activate", (GCallback) _views_artists_start_search_gtk_entry_activate, self, 0);
	_tmp77_ = self->priv->search_entry;
	g_signal_connect_object ((GtkSearchEntry*) _tmp77_, "search-changed", (GCallback) _views_artists_start_search_gtk_search_entry_search_changed, self, 0);
	_tmp78_ = self->priv->listbox;
	g_signal_connect_object (_tmp78_, "row-activated", (GCallback) __views_artists___lambda171__gtk_list_box_row_activated, self, 0);
	_tmp79_ = byte_database;
	g_signal_connect_object (_tmp79_, "added-new-artist", (GCallback) __views_artists___lambda172__services_database_added_new_artist, self, 0);
	_tmp80_ = byte_database;
	g_signal_connect_object (_tmp80_, "reset-library", (GCallback) __views_artists___lambda174__services_database_reset_library, self, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (scrolled);
	_g_object_unref0 (header_box);
	_g_object_unref0 (search_button);
	_g_object_unref0 (search_box);
	_g_object_unref0 (title_label);
	_g_object_unref0 (back_button);
	block51_data_unref (_data51_);
	_data51_ = NULL;
	return obj;
}


static void
views_artists_class_init (ViewsArtistsClass * klass)
{
	views_artists_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (ViewsArtistsPrivate));
	G_OBJECT_CLASS (klass)->constructor = views_artists_constructor;
	G_OBJECT_CLASS (klass)->finalize = views_artists_finalize;
	views_artists_signals[VIEWS_ARTISTS_GO_BACK_SIGNAL] = g_signal_new ("go-back", VIEWS_TYPE_ARTISTS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	views_artists_signals[VIEWS_ARTISTS_GO_ARTIST_SIGNAL] = g_signal_new ("go-artist", VIEWS_TYPE_ARTISTS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, OBJECTS_TYPE_ARTIST);
}


static void
views_artists_instance_init (ViewsArtists * self)
{
	self->priv = VIEWS_ARTISTS_GET_PRIVATE (self);
}


static void
views_artists_finalize (GObject * obj)
{
	ViewsArtists * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_ARTISTS, ViewsArtists);
	_g_object_unref0 (self->priv->listbox);
	_g_object_unref0 (self->priv->search_entry);
	_g_object_unref0 (self->priv->all_items);
	G_OBJECT_CLASS (views_artists_parent_class)->finalize (obj);
}


GType
views_artists_get_type (void)
{
	static volatile gsize views_artists_type_id__volatile = 0;
	if (g_once_init_enter (&views_artists_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsArtistsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_artists_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsArtists), 0, (GInstanceInitFunc) views_artists_instance_init, NULL };
		GType views_artists_type_id;
		views_artists_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsArtists", &g_define_type_info, 0);
		g_once_init_leave (&views_artists_type_id__volatile, views_artists_type_id);
	}
	return views_artists_type_id__volatile;
}



