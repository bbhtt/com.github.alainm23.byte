/* TrackQueueRow.c generated by valac 0.40.11, the Vala compiler
 * generated from TrackQueueRow.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <pango/pango.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <stdio.h>


#define WIDGETS_TYPE_TRACK_QUEUE_ROW (widgets_track_queue_row_get_type ())
#define WIDGETS_TRACK_QUEUE_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRow))
#define WIDGETS_TRACK_QUEUE_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRowClass))
#define WIDGETS_IS_TRACK_QUEUE_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TRACK_QUEUE_ROW))
#define WIDGETS_IS_TRACK_QUEUE_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TRACK_QUEUE_ROW))
#define WIDGETS_TRACK_QUEUE_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRowClass))

typedef struct _WidgetsTrackQueueRow WidgetsTrackQueueRow;
typedef struct _WidgetsTrackQueueRowClass WidgetsTrackQueueRowClass;
typedef struct _WidgetsTrackQueueRowPrivate WidgetsTrackQueueRowPrivate;

#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;
enum  {
	WIDGETS_TRACK_QUEUE_ROW_0_PROPERTY,
	WIDGETS_TRACK_QUEUE_ROW_TRACK_PROPERTY,
	WIDGETS_TRACK_QUEUE_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_track_queue_row_properties[WIDGETS_TRACK_QUEUE_ROW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block16Data Block16Data;
typedef struct _ObjectsTrackPrivate ObjectsTrackPrivate;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_PLAYER (services_player_get_type ())
#define SERVICES_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_PLAYER, ServicesPlayer))
#define SERVICES_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_PLAYER, ServicesPlayerClass))
#define SERVICES_IS_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_PLAYER))
#define SERVICES_IS_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_PLAYER))
#define SERVICES_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_PLAYER, ServicesPlayerClass))

typedef struct _ServicesPlayer ServicesPlayer;
typedef struct _ServicesPlayerClass ServicesPlayerClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _Block17Data Block17Data;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	WIDGETS_TRACK_QUEUE_ROW_REMOVE_TRACK_SIGNAL,
	WIDGETS_TRACK_QUEUE_ROW_NUM_SIGNALS
};
static guint widgets_track_queue_row_signals[WIDGETS_TRACK_QUEUE_ROW_NUM_SIGNALS] = {0};

struct _WidgetsTrackQueueRow {
	GtkListBoxRow parent_instance;
	WidgetsTrackQueueRowPrivate * priv;
};

struct _WidgetsTrackQueueRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsTrackQueueRowPrivate {
	ObjectsTrack* _track;
	GtkLabel* track_title_label;
	GtkLabel* artist_album_label;
	GtkButton* remove_button;
	WidgetsCover* image_cover;
	gboolean is_current_track;
};

struct _Block16Data {
	int _ref_count_;
	WidgetsTrackQueueRow* self;
	GtkRevealer* playing_revealer;
	GtkRevealer* remove_revealer;
	GtkGrid* main_grid;
};

struct _ObjectsTrack {
	GObject parent_instance;
	ObjectsTrackPrivate * priv;
	gint track_order;
	gint id;
	gint album_id;
	gint track;
	gint disc;
	gint play_count;
	gint is_favorite;
	gint bitrate;
	gint bpm;
	gint rating;
	gint samplerate;
	gint channels;
	gint year;
	gint playlist;
	guint64 duration;
	gchar* path;
	gchar* title;
	gchar* favorite_added;
	gchar* last_played;
	gchar* album_title;
	gchar* artist_name;
	gchar* composer;
	gchar* grouping;
	gchar* comment;
	gchar* lyrics;
	gchar* genre;
	gchar* album_artist;
	gchar* date_added;
};

struct _ObjectsTrackClass {
	GObjectClass parent_class;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};

struct _Block17Data {
	int _ref_count_;
	WidgetsTrackQueueRow* self;
	gint track_id;
};


static gpointer widgets_track_queue_row_parent_class = NULL;
extern Utils* byte_utils;
extern ServicesPlayer* byte_player;
extern ServicesDatabase* byte_database;

GType widgets_track_queue_row_get_type (void) G_GNUC_CONST;
GType objects_track_get_type (void) G_GNUC_CONST;
GType widgets_cover_get_type (void) G_GNUC_CONST;
#define WIDGETS_TRACK_QUEUE_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRowPrivate))
WidgetsTrackQueueRow* widgets_track_queue_row_new (ObjectsTrack* track);
WidgetsTrackQueueRow* widgets_track_queue_row_construct (GType object_type,
                                                         ObjectsTrack* track);
ObjectsTrack* widgets_track_queue_row_get_track (WidgetsTrackQueueRow* self);
static void widgets_track_queue_row_set_track (WidgetsTrackQueueRow* self,
                                        ObjectsTrack* value);
static GObject * widgets_track_queue_row_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties);
static Block16Data* block16_data_ref (Block16Data* _data16_);
static void block16_data_unref (void * _userdata_);
GType utils_get_type (void) G_GNUC_CONST;
WidgetsCover* widgets_cover_new_from_file (const gchar* filepath,
                                           gint pixel_size,
                                           const gchar* type);
WidgetsCover* widgets_cover_construct_from_file (GType object_type,
                                                 const gchar* filepath,
                                                 gint pixel_size,
                                                 const gchar* type);
static gboolean _widgets_track_queue_row___lambda304_ (Block16Data* _data16_,
                                                GdkEventCrossing* event);
static gboolean __widgets_track_queue_row___lambda304__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                               GdkEventCrossing* event,
                                                                               gpointer self);
static gboolean _widgets_track_queue_row___lambda305_ (Block16Data* _data16_,
                                                GdkEventCrossing* event);
static gboolean __widgets_track_queue_row___lambda305__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                               GdkEventCrossing* event,
                                                                               gpointer self);
static void _widgets_track_queue_row___lambda306_ (WidgetsTrackQueueRow* self);
static void __widgets_track_queue_row___lambda306__gtk_button_clicked (GtkButton* _sender,
                                                                gpointer self);
GType services_player_get_type (void) G_GNUC_CONST;
static void _widgets_track_queue_row___lambda307_ (Block16Data* _data16_,
                                            ObjectsTrack* current_track);
static void __widgets_track_queue_row___lambda307__services_player_current_track_changed (ServicesPlayer* _sender,
                                                                                   ObjectsTrack* track,
                                                                                   gpointer self);
ObjectsTrack* services_player_get_current_track (ServicesPlayer* self);
GType services_database_get_type (void) G_GNUC_CONST;
static void _widgets_track_queue_row___lambda308_ (WidgetsTrackQueueRow* self,
                                            gint track_id);
static void __widgets_track_queue_row___lambda308__services_database_removed_track (ServicesDatabase* _sender,
                                                                             gint id,
                                                                             gpointer self);
static void _widgets_track_queue_row___lambda309_ (WidgetsTrackQueueRow* self,
                                            gint track_id);
static Block17Data* block17_data_ref (Block17Data* _data17_);
static void block17_data_unref (void * _userdata_);
static gboolean __lambda310_ (Block17Data* _data17_);
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
static gboolean ___lambda310__gsource_func (gpointer self);
static void __widgets_track_queue_row___lambda309__services_database_updated_track_cover (ServicesDatabase* _sender,
                                                                                   gint track_id,
                                                                                   gpointer self);
static void widgets_track_queue_row_finalize (GObject * obj);
static void _vala_widgets_track_queue_row_get_property (GObject * object,
                                                 guint property_id,
                                                 GValue * value,
                                                 GParamSpec * pspec);
static void _vala_widgets_track_queue_row_set_property (GObject * object,
                                                 guint property_id,
                                                 const GValue * value,
                                                 GParamSpec * pspec);


WidgetsTrackQueueRow*
widgets_track_queue_row_construct (GType object_type,
                                   ObjectsTrack* track)
{
	WidgetsTrackQueueRow * self = NULL;
	g_return_val_if_fail (track != NULL, NULL);
	self = (WidgetsTrackQueueRow*) g_object_new (object_type, "track", track, NULL);
	return self;
}


WidgetsTrackQueueRow*
widgets_track_queue_row_new (ObjectsTrack* track)
{
	return widgets_track_queue_row_construct (WIDGETS_TYPE_TRACK_QUEUE_ROW, track);
}


ObjectsTrack*
widgets_track_queue_row_get_track (WidgetsTrackQueueRow* self)
{
	ObjectsTrack* result;
	ObjectsTrack* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_track;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
widgets_track_queue_row_set_track (WidgetsTrackQueueRow* self,
                                   ObjectsTrack* value)
{
	g_return_if_fail (self != NULL);
	if (widgets_track_queue_row_get_track (self) != value) {
		ObjectsTrack* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_track);
		self->priv->_track = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, widgets_track_queue_row_properties[WIDGETS_TRACK_QUEUE_ROW_TRACK_PROPERTY]);
	}
}


static Block16Data*
block16_data_ref (Block16Data* _data16_)
{
	g_atomic_int_inc (&_data16_->_ref_count_);
	return _data16_;
}


static void
block16_data_unref (void * _userdata_)
{
	Block16Data* _data16_;
	_data16_ = (Block16Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data16_->_ref_count_)) {
		WidgetsTrackQueueRow* self;
		self = _data16_->self;
		_g_object_unref0 (_data16_->main_grid);
		_g_object_unref0 (_data16_->remove_revealer);
		_g_object_unref0 (_data16_->playing_revealer);
		_g_object_unref0 (self);
		g_slice_free (Block16Data, _data16_);
	}
}


static gboolean
_widgets_track_queue_row___lambda304_ (Block16Data* _data16_,
                                       GdkEventCrossing* event)
{
	WidgetsTrackQueueRow* self;
	gboolean result = FALSE;
	gboolean _tmp0_;
	self = _data16_->self;
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp0_ = self->priv->is_current_track;
	if (!_tmp0_) {
		GtkRevealer* _tmp1_;
		GtkButton* _tmp2_;
		GtkStyleContext* _tmp3_;
		_tmp1_ = _data16_->remove_revealer;
		gtk_revealer_set_reveal_child (_tmp1_, TRUE);
		_tmp2_ = self->priv->remove_button;
		_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
		gtk_style_context_add_class (_tmp3_, "closed");
	}
	result = FALSE;
	return result;
}


static gboolean
__widgets_track_queue_row___lambda304__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                      GdkEventCrossing* event,
                                                                      gpointer self)
{
	gboolean result;
	result = _widgets_track_queue_row___lambda304_ (self, event);
	return result;
}


static gboolean
_widgets_track_queue_row___lambda305_ (Block16Data* _data16_,
                                       GdkEventCrossing* event)
{
	WidgetsTrackQueueRow* self;
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	gboolean _tmp1_;
	self = _data16_->self;
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp0_ = event->detail;
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
		result = FALSE;
		return result;
	}
	_tmp1_ = self->priv->is_current_track;
	if (!_tmp1_) {
		GtkButton* _tmp2_;
		GtkStyleContext* _tmp3_;
		GtkRevealer* _tmp4_;
		_tmp2_ = self->priv->remove_button;
		_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
		gtk_style_context_remove_class (_tmp3_, "closed");
		_tmp4_ = _data16_->remove_revealer;
		gtk_revealer_set_reveal_child (_tmp4_, FALSE);
	}
	result = FALSE;
	return result;
}


static gboolean
__widgets_track_queue_row___lambda305__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                      GdkEventCrossing* event,
                                                                      gpointer self)
{
	gboolean result;
	result = _widgets_track_queue_row___lambda305_ (self, event);
	return result;
}


static void
_widgets_track_queue_row___lambda306_ (WidgetsTrackQueueRow* self)
{
	ObjectsTrack* _tmp0_;
	gint _tmp1_;
	_tmp0_ = self->priv->_track;
	_tmp1_ = _tmp0_->id;
	g_signal_emit (self, widgets_track_queue_row_signals[WIDGETS_TRACK_QUEUE_ROW_REMOVE_TRACK_SIGNAL], 0, _tmp1_);
}


static void
__widgets_track_queue_row___lambda306__gtk_button_clicked (GtkButton* _sender,
                                                           gpointer self)
{
	_widgets_track_queue_row___lambda306_ ((WidgetsTrackQueueRow*) self);
}


static void
_widgets_track_queue_row___lambda307_ (Block16Data* _data16_,
                                       ObjectsTrack* current_track)
{
	WidgetsTrackQueueRow* self;
	gint _tmp0_;
	ObjectsTrack* _tmp1_;
	gint _tmp2_;
	self = _data16_->self;
	_tmp0_ = current_track->id;
	_tmp1_ = self->priv->_track;
	_tmp2_ = _tmp1_->id;
	if (_tmp0_ == _tmp2_) {
		GtkRevealer* _tmp3_;
		GtkGrid* _tmp4_;
		GtkStyleContext* _tmp5_;
		self->priv->is_current_track = TRUE;
		_tmp3_ = _data16_->playing_revealer;
		gtk_revealer_set_reveal_child (_tmp3_, TRUE);
		_tmp4_ = _data16_->main_grid;
		_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
		gtk_style_context_add_class (_tmp5_, "label-color-primary");
		gtk_widget_grab_focus ((GtkWidget*) self);
	} else {
		GtkRevealer* _tmp6_;
		GtkGrid* _tmp7_;
		GtkStyleContext* _tmp8_;
		self->priv->is_current_track = FALSE;
		_tmp6_ = _data16_->playing_revealer;
		gtk_revealer_set_reveal_child (_tmp6_, FALSE);
		_tmp7_ = _data16_->main_grid;
		_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
		gtk_style_context_remove_class (_tmp8_, "label-color-primary");
	}
}


static void
__widgets_track_queue_row___lambda307__services_player_current_track_changed (ServicesPlayer* _sender,
                                                                              ObjectsTrack* track,
                                                                              gpointer self)
{
	_widgets_track_queue_row___lambda307_ (self, track);
}


static void
_widgets_track_queue_row___lambda308_ (WidgetsTrackQueueRow* self,
                                       gint track_id)
{
	ObjectsTrack* _tmp0_;
	gint _tmp1_;
	_tmp0_ = self->priv->_track;
	_tmp1_ = _tmp0_->id;
	if (track_id == _tmp1_) {
		gtk_widget_destroy ((GtkWidget*) self);
	}
}


static void
__widgets_track_queue_row___lambda308__services_database_removed_track (ServicesDatabase* _sender,
                                                                        gint id,
                                                                        gpointer self)
{
	_widgets_track_queue_row___lambda308_ ((WidgetsTrackQueueRow*) self, id);
}


static Block17Data*
block17_data_ref (Block17Data* _data17_)
{
	g_atomic_int_inc (&_data17_->_ref_count_);
	return _data17_;
}


static void
block17_data_unref (void * _userdata_)
{
	Block17Data* _data17_;
	_data17_ = (Block17Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data17_->_ref_count_)) {
		WidgetsTrackQueueRow* self;
		self = _data17_->self;
		_g_object_unref0 (self);
		g_slice_free (Block17Data, _data17_);
	}
}


static gboolean
__lambda310_ (Block17Data* _data17_)
{
	WidgetsTrackQueueRow* self;
	gboolean result = FALSE;
	ObjectsTrack* _tmp0_;
	gint _tmp1_;
	GError * _inner_error_ = NULL;
	self = _data17_->self;
	_tmp0_ = self->priv->_track;
	_tmp1_ = _tmp0_->id;
	if (_data17_->track_id == _tmp1_) {
		{
			GdkPixbuf* _tmp2_ = NULL;
			Utils* _tmp3_;
			const gchar* _tmp4_;
			gchar* _tmp5_;
			gchar* _tmp6_;
			gchar* _tmp7_;
			gchar* _tmp8_;
			GdkPixbuf* _tmp9_;
			GdkPixbuf* _tmp10_;
			WidgetsCover* _tmp11_;
			_tmp3_ = byte_utils;
			_tmp4_ = _tmp3_->COVER_FOLDER;
			_tmp5_ = g_strdup_printf ("track-%i.jpg", _data17_->track_id);
			_tmp6_ = _tmp5_;
			_tmp7_ = g_build_filename (_tmp4_, _tmp6_, NULL);
			_tmp8_ = _tmp7_;
			_tmp9_ = gdk_pixbuf_new_from_file_at_size (_tmp8_, 32, 32, &_inner_error_);
			_tmp10_ = _tmp9_;
			_g_free0 (_tmp8_);
			_g_free0 (_tmp6_);
			_tmp2_ = _tmp10_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch30_g_error;
			}
			_tmp11_ = self->priv->image_cover;
			widgets_cover_set_pixbuf (_tmp11_, _tmp2_);
			_g_object_unref0 (_tmp2_);
		}
		goto __finally30;
		__catch30_g_error:
		{
			GError* e = NULL;
			FILE* _tmp12_;
			GError* _tmp13_;
			const gchar* _tmp14_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp12_ = stderr;
			_tmp13_ = e;
			_tmp14_ = _tmp13_->message;
			fprintf (_tmp12_, "Error setting default avatar icon: %s ", _tmp14_);
			_g_error_free0 (e);
		}
		__finally30:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			gboolean _tmp15_ = FALSE;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return _tmp15_;
		}
	}
	result = FALSE;
	return result;
}


static gboolean
___lambda310__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda310_ (self);
	return result;
}


static void
_widgets_track_queue_row___lambda309_ (WidgetsTrackQueueRow* self,
                                       gint track_id)
{
	Block17Data* _data17_;
	_data17_ = g_slice_new0 (Block17Data);
	_data17_->_ref_count_ = 1;
	_data17_->self = g_object_ref (self);
	_data17_->track_id = track_id;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda310__gsource_func, block17_data_ref (_data17_), block17_data_unref);
	block17_data_unref (_data17_);
	_data17_ = NULL;
}


static void
__widgets_track_queue_row___lambda309__services_database_updated_track_cover (ServicesDatabase* _sender,
                                                                              gint track_id,
                                                                              gpointer self)
{
	_widgets_track_queue_row___lambda309_ ((WidgetsTrackQueueRow*) self, track_id);
}


static GObject *
widgets_track_queue_row_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsTrackQueueRow * self;
	Block16Data* _data16_;
	GtkStyleContext* _tmp0_;
	GtkImage* playing_icon = NULL;
	GtkImage* _tmp1_;
	GtkImage* _tmp2_;
	GThemedIcon* _tmp3_;
	GThemedIcon* _tmp4_;
	GtkImage* _tmp5_;
	GtkStyleContext* _tmp6_;
	GtkImage* _tmp7_;
	GtkRevealer* _tmp8_;
	GtkRevealer* _tmp9_;
	GtkRevealer* _tmp10_;
	GtkRevealer* _tmp11_;
	GtkRevealer* _tmp12_;
	GtkImage* _tmp13_;
	GtkRevealer* _tmp14_;
	ObjectsTrack* _tmp15_;
	const gchar* _tmp16_;
	GtkLabel* _tmp17_;
	GtkLabel* _tmp18_;
	GtkStyleContext* _tmp19_;
	GtkLabel* _tmp20_;
	GtkLabel* _tmp21_;
	GtkLabel* _tmp22_;
	GtkLabel* _tmp23_;
	ObjectsTrack* _tmp24_;
	const gchar* _tmp25_;
	GtkLabel* _tmp26_;
	GtkLabel* _tmp27_;
	GtkLabel* _tmp28_;
	GtkLabel* _tmp29_;
	GtkLabel* _tmp30_;
	GtkLabel* _tmp31_;
	GtkLabel* _tmp32_;
	GtkStyleContext* _tmp33_;
	Utils* _tmp34_;
	const gchar* _tmp35_;
	ObjectsTrack* _tmp36_;
	gint _tmp37_;
	gchar* _tmp38_;
	gchar* _tmp39_;
	gchar* _tmp40_;
	gchar* _tmp41_;
	WidgetsCover* _tmp42_;
	WidgetsCover* _tmp43_;
	WidgetsCover* _tmp44_;
	GtkButton* _tmp45_;
	GtkButton* _tmp46_;
	GtkButton* _tmp47_;
	GtkButton* _tmp48_;
	GtkButton* _tmp49_;
	GtkButton* _tmp50_;
	GtkButton* _tmp51_;
	GtkStyleContext* _tmp52_;
	GtkButton* _tmp53_;
	GtkStyleContext* _tmp54_;
	GtkRevealer* _tmp55_;
	GtkRevealer* _tmp56_;
	GtkRevealer* _tmp57_;
	GtkRevealer* _tmp58_;
	GtkButton* _tmp59_;
	GtkRevealer* _tmp60_;
	GtkOverlay* overlay = NULL;
	GtkOverlay* _tmp61_;
	GtkOverlay* _tmp62_;
	GtkOverlay* _tmp63_;
	GtkOverlay* _tmp64_;
	GtkRevealer* _tmp65_;
	GtkOverlay* _tmp66_;
	WidgetsCover* _tmp67_;
	GtkGrid* _tmp68_;
	GtkGrid* _tmp69_;
	GtkGrid* _tmp70_;
	GtkGrid* _tmp71_;
	GtkGrid* _tmp72_;
	GtkOverlay* _tmp73_;
	GtkGrid* _tmp74_;
	GtkLabel* _tmp75_;
	GtkGrid* _tmp76_;
	GtkLabel* _tmp77_;
	GtkGrid* _tmp78_;
	GtkRevealer* _tmp79_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp80_;
	GtkEventBox* _tmp81_;
	GtkEventBox* _tmp82_;
	GtkGrid* _tmp83_;
	GtkEventBox* _tmp84_;
	GtkEventBox* _tmp85_;
	GtkEventBox* _tmp86_;
	GtkButton* _tmp87_;
	ServicesPlayer* _tmp88_;
	gboolean _tmp89_ = FALSE;
	ServicesPlayer* _tmp90_;
	ObjectsTrack* _tmp91_;
	ObjectsTrack* _tmp92_;
	ServicesDatabase* _tmp102_;
	ServicesDatabase* _tmp103_;
	parent_class = G_OBJECT_CLASS (widgets_track_queue_row_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRow);
	_data16_ = g_slice_new0 (Block16Data);
	_data16_->_ref_count_ = 1;
	_data16_->self = g_object_ref (self);
	self->priv->is_current_track = FALSE;
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp0_, "track-queue-row");
	_tmp1_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp1_);
	playing_icon = _tmp1_;
	_tmp2_ = playing_icon;
	_tmp3_ = (GThemedIcon*) g_themed_icon_new ("audio-volume-medium-symbolic");
	_tmp4_ = _tmp3_;
	g_object_set (_tmp2_, "gicon", (GIcon*) _tmp4_, NULL);
	_g_object_unref0 (_tmp4_);
	_tmp5_ = playing_icon;
	_tmp6_ = gtk_widget_get_style_context ((GtkWidget*) _tmp5_);
	gtk_style_context_add_class (_tmp6_, "playing-ani-color");
	_tmp7_ = playing_icon;
	gtk_image_set_pixel_size (_tmp7_, 12);
	_tmp8_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp8_);
	_data16_->playing_revealer = _tmp8_;
	_tmp9_ = _data16_->playing_revealer;
	gtk_widget_set_halign ((GtkWidget*) _tmp9_, GTK_ALIGN_CENTER);
	_tmp10_ = _data16_->playing_revealer;
	gtk_widget_set_valign ((GtkWidget*) _tmp10_, GTK_ALIGN_CENTER);
	_tmp11_ = _data16_->playing_revealer;
	gtk_revealer_set_transition_type (_tmp11_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
	_tmp12_ = _data16_->playing_revealer;
	_tmp13_ = playing_icon;
	gtk_container_add ((GtkContainer*) _tmp12_, (GtkWidget*) _tmp13_);
	_tmp14_ = _data16_->playing_revealer;
	gtk_revealer_set_reveal_child (_tmp14_, FALSE);
	_tmp15_ = self->priv->_track;
	_tmp16_ = _tmp15_->title;
	_tmp17_ = (GtkLabel*) gtk_label_new (_tmp16_);
	g_object_ref_sink (_tmp17_);
	_g_object_unref0 (self->priv->track_title_label);
	self->priv->track_title_label = _tmp17_;
	_tmp18_ = self->priv->track_title_label;
	_tmp19_ = gtk_widget_get_style_context ((GtkWidget*) _tmp18_);
	gtk_style_context_add_class (_tmp19_, "font-bold");
	_tmp20_ = self->priv->track_title_label;
	gtk_label_set_ellipsize (_tmp20_, PANGO_ELLIPSIZE_END);
	_tmp21_ = self->priv->track_title_label;
	gtk_label_set_max_width_chars (_tmp21_, 40);
	_tmp22_ = self->priv->track_title_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp22_, GTK_ALIGN_START);
	_tmp23_ = self->priv->track_title_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp23_, GTK_ALIGN_END);
	_tmp24_ = self->priv->_track;
	_tmp25_ = _tmp24_->artist_name;
	_tmp26_ = (GtkLabel*) gtk_label_new (_tmp25_);
	g_object_ref_sink (_tmp26_);
	_g_object_unref0 (self->priv->artist_album_label);
	self->priv->artist_album_label = _tmp26_;
	_tmp27_ = self->priv->artist_album_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp27_, GTK_ALIGN_START);
	_tmp28_ = self->priv->artist_album_label;
	gtk_label_set_use_markup (_tmp28_, TRUE);
	_tmp29_ = self->priv->artist_album_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp29_, GTK_ALIGN_START);
	_tmp30_ = self->priv->artist_album_label;
	gtk_label_set_max_width_chars (_tmp30_, 40);
	_tmp31_ = self->priv->artist_album_label;
	gtk_label_set_ellipsize (_tmp31_, PANGO_ELLIPSIZE_END);
	_tmp32_ = self->priv->artist_album_label;
	_tmp33_ = gtk_widget_get_style_context ((GtkWidget*) _tmp32_);
	gtk_style_context_add_class (_tmp33_, "font-size-small");
	_tmp34_ = byte_utils;
	_tmp35_ = _tmp34_->COVER_FOLDER;
	_tmp36_ = self->priv->_track;
	_tmp37_ = _tmp36_->id;
	_tmp38_ = g_strdup_printf ("track-%i.jpg", _tmp37_);
	_tmp39_ = _tmp38_;
	_tmp40_ = g_build_filename (_tmp35_, _tmp39_, NULL);
	_tmp41_ = _tmp40_;
	_tmp42_ = widgets_cover_new_from_file (_tmp41_, 27, "track");
	g_object_ref_sink (_tmp42_);
	_g_object_unref0 (self->priv->image_cover);
	self->priv->image_cover = _tmp42_;
	_g_free0 (_tmp41_);
	_g_free0 (_tmp39_);
	_tmp43_ = self->priv->image_cover;
	gtk_widget_set_halign ((GtkWidget*) _tmp43_, GTK_ALIGN_START);
	_tmp44_ = self->priv->image_cover;
	gtk_widget_set_valign ((GtkWidget*) _tmp44_, GTK_ALIGN_START);
	_tmp45_ = (GtkButton*) gtk_button_new_from_icon_name ("window-close-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp45_);
	_g_object_unref0 (self->priv->remove_button);
	self->priv->remove_button = _tmp45_;
	_tmp46_ = self->priv->remove_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp46_, GTK_ALIGN_CENTER);
	_tmp47_ = self->priv->remove_button;
	gtk_widget_set_halign ((GtkWidget*) _tmp47_, GTK_ALIGN_END);
	_tmp48_ = self->priv->remove_button;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp48_, TRUE);
	_tmp49_ = self->priv->remove_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp49_, FALSE);
	_tmp50_ = self->priv->remove_button;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp50_, _ ("Remove"));
	_tmp51_ = self->priv->remove_button;
	_tmp52_ = gtk_widget_get_style_context ((GtkWidget*) _tmp51_);
	gtk_style_context_add_class (_tmp52_, GTK_STYLE_CLASS_FLAT);
	_tmp53_ = self->priv->remove_button;
	_tmp54_ = gtk_widget_get_style_context ((GtkWidget*) _tmp53_);
	gtk_style_context_add_class (_tmp54_, "remove-button");
	_tmp55_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp55_);
	_data16_->remove_revealer = _tmp55_;
	_tmp56_ = _data16_->remove_revealer;
	gtk_widget_set_halign ((GtkWidget*) _tmp56_, GTK_ALIGN_END);
	_tmp57_ = _data16_->remove_revealer;
	gtk_revealer_set_transition_type (_tmp57_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT);
	_tmp58_ = _data16_->remove_revealer;
	_tmp59_ = self->priv->remove_button;
	gtk_container_add ((GtkContainer*) _tmp58_, (GtkWidget*) _tmp59_);
	_tmp60_ = _data16_->remove_revealer;
	gtk_revealer_set_reveal_child (_tmp60_, FALSE);
	_tmp61_ = (GtkOverlay*) gtk_overlay_new ();
	g_object_ref_sink (_tmp61_);
	overlay = _tmp61_;
	_tmp62_ = overlay;
	gtk_widget_set_halign ((GtkWidget*) _tmp62_, GTK_ALIGN_START);
	_tmp63_ = overlay;
	gtk_widget_set_valign ((GtkWidget*) _tmp63_, GTK_ALIGN_START);
	_tmp64_ = overlay;
	_tmp65_ = _data16_->playing_revealer;
	gtk_overlay_add_overlay (_tmp64_, (GtkWidget*) _tmp65_);
	_tmp66_ = overlay;
	_tmp67_ = self->priv->image_cover;
	gtk_container_add ((GtkContainer*) _tmp66_, (GtkWidget*) _tmp67_);
	_tmp68_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp68_);
	_data16_->main_grid = _tmp68_;
	_tmp69_ = _data16_->main_grid;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp69_, 3);
	_tmp70_ = _data16_->main_grid;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp70_, 9);
	_tmp71_ = _data16_->main_grid;
	gtk_grid_set_column_spacing (_tmp71_, 3);
	_tmp72_ = _data16_->main_grid;
	_tmp73_ = overlay;
	gtk_grid_attach (_tmp72_, (GtkWidget*) _tmp73_, 0, 0, 1, 2);
	_tmp74_ = _data16_->main_grid;
	_tmp75_ = self->priv->track_title_label;
	gtk_grid_attach (_tmp74_, (GtkWidget*) _tmp75_, 1, 0, 1, 1);
	_tmp76_ = _data16_->main_grid;
	_tmp77_ = self->priv->artist_album_label;
	gtk_grid_attach (_tmp76_, (GtkWidget*) _tmp77_, 1, 1, 1, 1);
	_tmp78_ = _data16_->main_grid;
	_tmp79_ = _data16_->remove_revealer;
	gtk_grid_attach (_tmp78_, (GtkWidget*) _tmp79_, 2, 0, 2, 2);
	_tmp80_ = (GtkEventBox*) gtk_event_box_new ();
	g_object_ref_sink (_tmp80_);
	eventbox = _tmp80_;
	_tmp81_ = eventbox;
	gtk_widget_add_events ((GtkWidget*) _tmp81_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
	_tmp82_ = eventbox;
	_tmp83_ = _data16_->main_grid;
	gtk_container_add ((GtkContainer*) _tmp82_, (GtkWidget*) _tmp83_);
	_tmp84_ = eventbox;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp84_);
	_tmp85_ = eventbox;
	g_signal_connect_data ((GtkWidget*) _tmp85_, "enter-notify-event", (GCallback) __widgets_track_queue_row___lambda304__gtk_widget_enter_notify_event, block16_data_ref (_data16_), (GClosureNotify) block16_data_unref, 0);
	_tmp86_ = eventbox;
	g_signal_connect_data ((GtkWidget*) _tmp86_, "leave-notify-event", (GCallback) __widgets_track_queue_row___lambda305__gtk_widget_leave_notify_event, block16_data_ref (_data16_), (GClosureNotify) block16_data_unref, 0);
	_tmp87_ = self->priv->remove_button;
	g_signal_connect_object (_tmp87_, "clicked", (GCallback) __widgets_track_queue_row___lambda306__gtk_button_clicked, self, 0);
	_tmp88_ = byte_player;
	g_signal_connect_data (_tmp88_, "current-track-changed", (GCallback) __widgets_track_queue_row___lambda307__services_player_current_track_changed, block16_data_ref (_data16_), (GClosureNotify) block16_data_unref, 0);
	_tmp90_ = byte_player;
	_tmp91_ = services_player_get_current_track (_tmp90_);
	_tmp92_ = _tmp91_;
	if (_tmp92_ != NULL) {
		ObjectsTrack* _tmp93_;
		gint _tmp94_;
		ServicesPlayer* _tmp95_;
		ObjectsTrack* _tmp96_;
		ObjectsTrack* _tmp97_;
		gint _tmp98_;
		_tmp93_ = self->priv->_track;
		_tmp94_ = _tmp93_->id;
		_tmp95_ = byte_player;
		_tmp96_ = services_player_get_current_track (_tmp95_);
		_tmp97_ = _tmp96_;
		_tmp98_ = _tmp97_->id;
		_tmp89_ = _tmp94_ == _tmp98_;
	} else {
		_tmp89_ = FALSE;
	}
	if (_tmp89_) {
		GtkRevealer* _tmp99_;
		GtkGrid* _tmp100_;
		GtkStyleContext* _tmp101_;
		_tmp99_ = _data16_->playing_revealer;
		gtk_revealer_set_reveal_child (_tmp99_, TRUE);
		_tmp100_ = _data16_->main_grid;
		_tmp101_ = gtk_widget_get_style_context ((GtkWidget*) _tmp100_);
		gtk_style_context_add_class (_tmp101_, "label-color-primary");
	}
	_tmp102_ = byte_database;
	g_signal_connect_object (_tmp102_, "removed-track", (GCallback) __widgets_track_queue_row___lambda308__services_database_removed_track, self, 0);
	_tmp103_ = byte_database;
	g_signal_connect_object (_tmp103_, "updated-track-cover", (GCallback) __widgets_track_queue_row___lambda309__services_database_updated_track_cover, self, 0);
	_g_object_unref0 (eventbox);
	_g_object_unref0 (overlay);
	_g_object_unref0 (playing_icon);
	block16_data_unref (_data16_);
	_data16_ = NULL;
	return obj;
}


static void
widgets_track_queue_row_class_init (WidgetsTrackQueueRowClass * klass)
{
	widgets_track_queue_row_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsTrackQueueRowPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_track_queue_row_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_track_queue_row_set_property;
	G_OBJECT_CLASS (klass)->constructor = widgets_track_queue_row_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_track_queue_row_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_TRACK_QUEUE_ROW_TRACK_PROPERTY, widgets_track_queue_row_properties[WIDGETS_TRACK_QUEUE_ROW_TRACK_PROPERTY] = g_param_spec_object ("track", "track", "track", OBJECTS_TYPE_TRACK, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	widgets_track_queue_row_signals[WIDGETS_TRACK_QUEUE_ROW_REMOVE_TRACK_SIGNAL] = g_signal_new ("remove-track", WIDGETS_TYPE_TRACK_QUEUE_ROW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
}


static void
widgets_track_queue_row_instance_init (WidgetsTrackQueueRow * self)
{
	self->priv = WIDGETS_TRACK_QUEUE_ROW_GET_PRIVATE (self);
}


static void
widgets_track_queue_row_finalize (GObject * obj)
{
	WidgetsTrackQueueRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRow);
	_g_object_unref0 (self->priv->_track);
	_g_object_unref0 (self->priv->track_title_label);
	_g_object_unref0 (self->priv->artist_album_label);
	_g_object_unref0 (self->priv->remove_button);
	_g_object_unref0 (self->priv->image_cover);
	G_OBJECT_CLASS (widgets_track_queue_row_parent_class)->finalize (obj);
}


GType
widgets_track_queue_row_get_type (void)
{
	static volatile gsize widgets_track_queue_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_track_queue_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsTrackQueueRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_track_queue_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsTrackQueueRow), 0, (GInstanceInitFunc) widgets_track_queue_row_instance_init, NULL };
		GType widgets_track_queue_row_type_id;
		widgets_track_queue_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsTrackQueueRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_track_queue_row_type_id__volatile, widgets_track_queue_row_type_id);
	}
	return widgets_track_queue_row_type_id__volatile;
}


static void
_vala_widgets_track_queue_row_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec)
{
	WidgetsTrackQueueRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRow);
	switch (property_id) {
		case WIDGETS_TRACK_QUEUE_ROW_TRACK_PROPERTY:
		g_value_set_object (value, widgets_track_queue_row_get_track (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_widgets_track_queue_row_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec)
{
	WidgetsTrackQueueRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRow);
	switch (property_id) {
		case WIDGETS_TRACK_QUEUE_ROW_TRACK_PROPERTY:
		widgets_track_queue_row_set_track (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



