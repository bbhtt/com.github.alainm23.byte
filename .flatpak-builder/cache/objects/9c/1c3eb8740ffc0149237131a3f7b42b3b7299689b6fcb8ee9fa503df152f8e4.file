/* Albums.c generated by valac 0.40.11, the Vala compiler
 * generated from Albums.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>


#define VIEWS_TYPE_ALBUMS (views_albums_get_type ())
#define VIEWS_ALBUMS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_ALBUMS, ViewsAlbums))
#define VIEWS_ALBUMS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_ALBUMS, ViewsAlbumsClass))
#define VIEWS_IS_ALBUMS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_ALBUMS))
#define VIEWS_IS_ALBUMS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_ALBUMS))
#define VIEWS_ALBUMS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_ALBUMS, ViewsAlbumsClass))

typedef struct _ViewsAlbums ViewsAlbums;
typedef struct _ViewsAlbumsClass ViewsAlbumsClass;
typedef struct _ViewsAlbumsPrivate ViewsAlbumsPrivate;

#define OBJECTS_TYPE_ALBUM (objects_album_get_type ())
#define OBJECTS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ALBUM, ObjectsAlbum))
#define OBJECTS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ALBUM, ObjectsAlbumClass))
#define OBJECTS_IS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ALBUM))
#define OBJECTS_IS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ALBUM))
#define OBJECTS_ALBUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ALBUM, ObjectsAlbumClass))

typedef struct _ObjectsAlbum ObjectsAlbum;
typedef struct _ObjectsAlbumClass ObjectsAlbumClass;
enum  {
	VIEWS_ALBUMS_0_PROPERTY,
	VIEWS_ALBUMS_NUM_PROPERTIES
};
static GParamSpec* views_albums_properties[VIEWS_ALBUMS_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _ObjectsAlbumPrivate ObjectsAlbumPrivate;

#define WIDGETS_TYPE_ALBUM_ROW (widgets_album_row_get_type ())
#define WIDGETS_ALBUM_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ALBUM_ROW, WidgetsAlbumRow))
#define WIDGETS_ALBUM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ALBUM_ROW, WidgetsAlbumRowClass))
#define WIDGETS_IS_ALBUM_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ALBUM_ROW))
#define WIDGETS_IS_ALBUM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ALBUM_ROW))
#define WIDGETS_ALBUM_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ALBUM_ROW, WidgetsAlbumRowClass))

typedef struct _WidgetsAlbumRow WidgetsAlbumRow;
typedef struct _WidgetsAlbumRowClass WidgetsAlbumRowClass;

#define WIDGETS_TYPE_SEARCH_ENTRY (widgets_search_entry_get_type ())
#define WIDGETS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntry))
#define WIDGETS_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntryClass))
#define WIDGETS_IS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_SEARCH_ENTRY))
#define WIDGETS_IS_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_SEARCH_ENTRY))
#define WIDGETS_SEARCH_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntryClass))

typedef struct _WidgetsSearchEntry WidgetsSearchEntry;
typedef struct _WidgetsSearchEntryClass WidgetsSearchEntryClass;

#define WIDGETS_POPOVERS_TYPE_SORT (widgets_popovers_sort_get_type ())
#define WIDGETS_POPOVERS_SORT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_SORT, WidgetsPopoversSort))
#define WIDGETS_POPOVERS_SORT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_SORT, WidgetsPopoversSortClass))
#define WIDGETS_POPOVERS_IS_SORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_SORT))
#define WIDGETS_POPOVERS_IS_SORT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_SORT))
#define WIDGETS_POPOVERS_SORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_SORT, WidgetsPopoversSortClass))

typedef struct _WidgetsPopoversSort WidgetsPopoversSort;
typedef struct _WidgetsPopoversSortClass WidgetsPopoversSortClass;
typedef struct _Block42Data Block42Data;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block43Data Block43Data;
typedef struct _Block44Data Block44Data;

#define SERVICES_TYPE_SCAN (services_scan_get_type ())
#define SERVICES_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SCAN, ServicesScan))
#define SERVICES_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SCAN, ServicesScanClass))
#define SERVICES_IS_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SCAN))
#define SERVICES_IS_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SCAN))
#define SERVICES_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SCAN, ServicesScanClass))

typedef struct _ServicesScan ServicesScan;
typedef struct _ServicesScanClass ServicesScanClass;
enum  {
	VIEWS_ALBUMS_GO_BACK_SIGNAL,
	VIEWS_ALBUMS_GO_ALBUM_SIGNAL,
	VIEWS_ALBUMS_NUM_SIGNALS
};
static guint views_albums_signals[VIEWS_ALBUMS_NUM_SIGNALS] = {0};

struct _ViewsAlbums {
	GtkEventBox parent_instance;
	ViewsAlbumsPrivate * priv;
};

struct _ViewsAlbumsClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsAlbumsPrivate {
	GtkListBox* listbox;
	gint item_index;
	gint item_max;
	GeeArrayList* all_items;
};

struct _ObjectsAlbum {
	GObject parent_instance;
	ObjectsAlbumPrivate * priv;
	gint id;
	gint artist_id;
	gchar* artist_name;
	gint year;
	gchar* title;
	gchar* genre;
};

struct _ObjectsAlbumClass {
	GObjectClass parent_class;
};

struct _Block42Data {
	int _ref_count_;
	ViewsAlbums* self;
	WidgetsSearchEntry* search_entry;
	GtkRevealer* search_revealer;
	GtkToggleButton* sort_button;
	WidgetsPopoversSort* sort_popover;
};

struct _Block43Data {
	int _ref_count_;
	ViewsAlbums* self;
	ObjectsAlbum* album;
};

struct _Block44Data {
	int _ref_count_;
	ViewsAlbums* self;
	GtkWidget* widget;
};


static gpointer views_albums_parent_class = NULL;
extern ServicesDatabase* byte_database;
extern GSettings* byte_settings;
extern ServicesScan* byte_scan_service;

GType views_albums_get_type (void) G_GNUC_CONST;
GType objects_album_get_type (void) G_GNUC_CONST;
#define VIEWS_ALBUMS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_ALBUMS, ViewsAlbumsPrivate))
ViewsAlbums* views_albums_new (void);
ViewsAlbums* views_albums_construct (GType object_type);
static void views_albums_add_item (ViewsAlbums* self,
                            ObjectsAlbum* album);
GType widgets_album_row_get_type (void) G_GNUC_CONST;
WidgetsAlbumRow* widgets_album_row_new (ObjectsAlbum* album);
WidgetsAlbumRow* widgets_album_row_construct (GType object_type,
                                              ObjectsAlbum* album);
void views_albums_add_all_items (ViewsAlbums* self);
static GObject * views_albums_constructor (GType type,
                                    guint n_construct_properties,
                                    GObjectConstructParam * construct_properties);
GType widgets_search_entry_get_type (void) G_GNUC_CONST;
GType widgets_popovers_sort_get_type (void) G_GNUC_CONST;
static Block42Data* block42_data_ref (Block42Data* _data42_);
static void block42_data_unref (void * _userdata_);
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_albums_order_by (ServicesDatabase* self,
                                                         gint item,
                                                         gboolean is_reverse);
WidgetsSearchEntry* widgets_search_entry_new (void);
WidgetsSearchEntry* widgets_search_entry_construct (GType object_type);
WidgetsPopoversSort* widgets_popovers_sort_new (GtkWidget* relative);
WidgetsPopoversSort* widgets_popovers_sort_construct (GType object_type,
                                                      GtkWidget* relative);
void widgets_popovers_sort_set_selected (WidgetsPopoversSort* self,
                                         gint value);
void widgets_popovers_sort_set_reverse (WidgetsPopoversSort* self,
                                        gboolean value);
void widgets_popovers_sort_set_radio_01_label (WidgetsPopoversSort* self,
                                               const gchar* value);
void widgets_popovers_sort_set_radio_02_label (WidgetsPopoversSort* self,
                                               const gchar* value);
void widgets_popovers_sort_set_radio_03_label (WidgetsPopoversSort* self,
                                               const gchar* value);
void widgets_popovers_sort_set_radio_04_label (WidgetsPopoversSort* self,
                                               const gchar* value);
void widgets_popovers_sort_set_radio_05_visible (WidgetsPopoversSort* self,
                                                 gboolean value);
static void _views_albums___lambda121_ (ViewsAlbums* self);
static void __views_albums___lambda121__gtk_button_clicked (GtkButton* _sender,
                                                     gpointer self);
static void _views_albums___lambda122_ (Block42Data* _data42_);
static void __views_albums___lambda122__gtk_button_clicked (GtkButton* _sender,
                                                     gpointer self);
static gboolean _views_albums___lambda123_ (Block42Data* _data42_,
                                     GdkEventKey* key);
static gboolean __views_albums___lambda123__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                   GdkEventKey* event,
                                                                   gpointer self);
static void _views_albums___lambda124_ (Block42Data* _data42_);
static void ___lambda125_ (ViewsAlbums* self,
                    GtkWidget* widget);
static void ____lambda125__gtk_callback (GtkWidget* widget,
                                  gpointer self);
GeeArrayList* services_database_get_all_albums_search (ServicesDatabase* self,
                                                       const gchar* search_text);
static void ___lambda126_ (ViewsAlbums* self,
                    GtkWidget* widget);
static void ____lambda126__gtk_callback (GtkWidget* widget,
                                  gpointer self);
static void __views_albums___lambda124__gtk_search_entry_search_changed (GtkSearchEntry* _sender,
                                                                  gpointer self);
static void _views_albums___lambda127_ (Block42Data* _data42_);
static void __views_albums___lambda127__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                            gpointer self);
static void _views_albums___lambda128_ (Block42Data* _data42_);
static void __views_albums___lambda128__gtk_popover_closed (GtkPopover* _sender,
                                                     gpointer self);
static void _views_albums___lambda129_ (ViewsAlbums* self,
                                 gint mode);
static void __lambda130_ (ViewsAlbums* self,
                   GtkWidget* widget);
static void ___lambda130__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __views_albums___lambda129__widgets_popovers_sort_mode_changed (WidgetsPopoversSort* _sender,
                                                                     gint index,
                                                                     gpointer self);
static void _views_albums___lambda131_ (ViewsAlbums* self,
                                 gboolean reverse);
static void __lambda132_ (ViewsAlbums* self,
                   GtkWidget* widget);
static void ___lambda132__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __views_albums___lambda131__widgets_popovers_sort_order_reverse (WidgetsPopoversSort* _sender,
                                                                      gboolean mode,
                                                                      gpointer self);
static void _views_albums___lambda133_ (ViewsAlbums* self,
                                 GtkListBoxRow* row);
ObjectsAlbum* widgets_album_row_get_album (WidgetsAlbumRow* self);
static void __views_albums___lambda133__gtk_list_box_row_activated (GtkListBox* _sender,
                                                             GtkListBoxRow* row,
                                                             gpointer self);
static void _views_albums___lambda134_ (ViewsAlbums* self,
                                 ObjectsAlbum* album);
static Block43Data* block43_data_ref (Block43Data* _data43_);
static void block43_data_unref (void * _userdata_);
static gboolean __lambda135_ (Block43Data* _data43_);
static gboolean ___lambda135__gsource_func (gpointer self);
static void __views_albums___lambda134__services_database_added_new_album (ServicesDatabase* _sender,
                                                                    ObjectsAlbum* album,
                                                                    gpointer self);
static void _views_albums___lambda136_ (ViewsAlbums* self,
                                 GtkPositionType pos);
static void __views_albums___lambda136__gtk_scrolled_window_edge_reached (GtkScrolledWindow* _sender,
                                                                   GtkPositionType pos,
                                                                   gpointer self);
static void _views_albums___lambda137_ (ViewsAlbums* self);
static void __lambda138_ (ViewsAlbums* self,
                   GtkWidget* widget);
static Block44Data* block44_data_ref (Block44Data* _data44_);
static void block44_data_unref (void * _userdata_);
static gboolean __lambda139_ (Block44Data* _data44_);
static gboolean ___lambda139__gsource_func (gpointer self);
static void ___lambda138__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __views_albums___lambda137__services_database_reset_library (ServicesDatabase* _sender,
                                                                  gpointer self);
GType services_scan_get_type (void) G_GNUC_CONST;
static void _views_albums___lambda140_ (Block42Data* _data42_);
static void __views_albums___lambda140__services_scan_sync_started (ServicesScan* _sender,
                                                             gpointer self);
static void _views_albums___lambda141_ (Block42Data* _data42_);
static void __views_albums___lambda141__services_scan_sync_finished (ServicesScan* _sender,
                                                              gpointer self);
static void views_albums_finalize (GObject * obj);


ViewsAlbums*
views_albums_construct (GType object_type)
{
	ViewsAlbums * self = NULL;
	self = (ViewsAlbums*) g_object_new (object_type, NULL);
	return self;
}


ViewsAlbums*
views_albums_new (void)
{
	return views_albums_construct (VIEWS_TYPE_ALBUMS);
}


static void
views_albums_add_item (ViewsAlbums* self,
                       ObjectsAlbum* album)
{
	gint _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (album != NULL);
	_tmp0_ = album->id;
	if (_tmp0_ != 0) {
		WidgetsAlbumRow* row = NULL;
		WidgetsAlbumRow* _tmp1_;
		GtkListBox* _tmp2_;
		WidgetsAlbumRow* _tmp3_;
		GtkListBox* _tmp4_;
		_tmp1_ = widgets_album_row_new (album);
		g_object_ref_sink (_tmp1_);
		row = _tmp1_;
		_tmp2_ = self->priv->listbox;
		_tmp3_ = row;
		gtk_container_add ((GtkContainer*) _tmp2_, (GtkWidget*) _tmp3_);
		_tmp4_ = self->priv->listbox;
		gtk_widget_show_all ((GtkWidget*) _tmp4_);
		_g_object_unref0 (row);
	}
}


void
views_albums_add_all_items (ViewsAlbums* self)
{
	gint _tmp0_;
	GeeArrayList* _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->item_max;
	_tmp1_ = self->priv->all_items;
	_tmp2_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp1_);
	_tmp3_ = _tmp2_;
	if (_tmp0_ > _tmp3_) {
		GeeArrayList* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
		_tmp4_ = self->priv->all_items;
		_tmp5_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp4_);
		_tmp6_ = _tmp5_;
		self->priv->item_max = _tmp6_;
	}
	{
		gint i = 0;
		gint _tmp7_;
		_tmp7_ = self->priv->item_index;
		i = _tmp7_;
		{
			gboolean _tmp8_ = FALSE;
			_tmp8_ = TRUE;
			while (TRUE) {
				gint _tmp10_;
				gint _tmp11_;
				WidgetsAlbumRow* row = NULL;
				GeeArrayList* _tmp12_;
				gint _tmp13_;
				gpointer _tmp14_;
				ObjectsAlbum* _tmp15_;
				WidgetsAlbumRow* _tmp16_;
				WidgetsAlbumRow* _tmp17_;
				GtkListBox* _tmp18_;
				WidgetsAlbumRow* _tmp19_;
				GtkListBox* _tmp20_;
				if (!_tmp8_) {
					gint _tmp9_;
					_tmp9_ = i;
					i = _tmp9_ + 1;
				}
				_tmp8_ = FALSE;
				_tmp10_ = i;
				_tmp11_ = self->priv->item_max;
				if (!(_tmp10_ < _tmp11_)) {
					break;
				}
				_tmp12_ = self->priv->all_items;
				_tmp13_ = i;
				_tmp14_ = gee_abstract_list_get ((GeeAbstractList*) _tmp12_, _tmp13_);
				_tmp15_ = (ObjectsAlbum*) _tmp14_;
				_tmp16_ = widgets_album_row_new (_tmp15_);
				g_object_ref_sink (_tmp16_);
				_tmp17_ = _tmp16_;
				_g_object_unref0 (_tmp15_);
				row = _tmp17_;
				_tmp18_ = self->priv->listbox;
				_tmp19_ = row;
				gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) _tmp19_);
				_tmp20_ = self->priv->listbox;
				gtk_widget_show_all ((GtkWidget*) _tmp20_);
				_g_object_unref0 (row);
			}
		}
	}
}


static Block42Data*
block42_data_ref (Block42Data* _data42_)
{
	g_atomic_int_inc (&_data42_->_ref_count_);
	return _data42_;
}


static void
block42_data_unref (void * _userdata_)
{
	Block42Data* _data42_;
	_data42_ = (Block42Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data42_->_ref_count_)) {
		ViewsAlbums* self;
		self = _data42_->self;
		_g_object_unref0 (_data42_->sort_popover);
		_g_object_unref0 (_data42_->sort_button);
		_g_object_unref0 (_data42_->search_revealer);
		_g_object_unref0 (_data42_->search_entry);
		_g_object_unref0 (self);
		g_slice_free (Block42Data, _data42_);
	}
}


static void
_views_albums___lambda121_ (ViewsAlbums* self)
{
	g_signal_emit (self, views_albums_signals[VIEWS_ALBUMS_GO_BACK_SIGNAL], 0);
}


static void
__views_albums___lambda121__gtk_button_clicked (GtkButton* _sender,
                                                gpointer self)
{
	_views_albums___lambda121_ ((ViewsAlbums*) self);
}


static void
_views_albums___lambda122_ (Block42Data* _data42_)
{
	ViewsAlbums* self;
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	self = _data42_->self;
	_tmp0_ = _data42_->search_revealer;
	_tmp1_ = gtk_revealer_get_reveal_child (_tmp0_);
	_tmp2_ = _tmp1_;
	if (_tmp2_) {
		GtkRevealer* _tmp3_;
		WidgetsSearchEntry* _tmp4_;
		_tmp3_ = _data42_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp3_, FALSE);
		_tmp4_ = _data42_->search_entry;
		gtk_entry_set_text ((GtkEntry*) _tmp4_, "");
	} else {
		GtkRevealer* _tmp5_;
		WidgetsSearchEntry* _tmp6_;
		_tmp5_ = _data42_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp5_, TRUE);
		_tmp6_ = _data42_->search_entry;
		gtk_widget_grab_focus ((GtkWidget*) _tmp6_);
	}
}


static void
__views_albums___lambda122__gtk_button_clicked (GtkButton* _sender,
                                                gpointer self)
{
	_views_albums___lambda122_ (self);
}


static gboolean
_views_albums___lambda123_ (Block42Data* _data42_,
                            GdkEventKey* key)
{
	ViewsAlbums* self;
	gboolean result = FALSE;
	guint _tmp0_;
	self = _data42_->self;
	g_return_val_if_fail (key != NULL, FALSE);
	_tmp0_ = key->keyval;
	if (_tmp0_ == ((guint) 65307)) {
		GtkRevealer* _tmp1_;
		WidgetsSearchEntry* _tmp2_;
		_tmp1_ = _data42_->search_revealer;
		gtk_revealer_set_reveal_child (_tmp1_, FALSE);
		_tmp2_ = _data42_->search_entry;
		gtk_entry_set_text ((GtkEntry*) _tmp2_, "");
	}
	result = FALSE;
	return result;
}


static gboolean
__views_albums___lambda123__gtk_widget_key_release_event (GtkWidget* _sender,
                                                          GdkEventKey* event,
                                                          gpointer self)
{
	gboolean result;
	result = _views_albums___lambda123_ (self, event);
	return result;
}


static void
___lambda125_ (ViewsAlbums* self,
               GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
____lambda125__gtk_callback (GtkWidget* widget,
                             gpointer self)
{
	___lambda125_ ((ViewsAlbums*) self, widget);
}


static void
___lambda126_ (ViewsAlbums* self,
               GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
____lambda126__gtk_callback (GtkWidget* widget,
                             gpointer self)
{
	___lambda126_ ((ViewsAlbums*) self, widget);
}


static void
_views_albums___lambda124_ (Block42Data* _data42_)
{
	ViewsAlbums* self;
	WidgetsSearchEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	self = _data42_->self;
	_tmp0_ = _data42_->search_entry;
	_tmp1_ = gtk_entry_get_text ((GtkEntry*) _tmp0_);
	_tmp2_ = _tmp1_;
	if (g_strcmp0 (_tmp2_, "") != 0) {
		GtkListBox* _tmp3_;
		ServicesDatabase* _tmp4_;
		WidgetsSearchEntry* _tmp5_;
		const gchar* _tmp6_;
		const gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		GeeArrayList* _tmp10_;
		self->priv->item_index = 0;
		self->priv->item_max = 100;
		_tmp3_ = self->priv->listbox;
		gtk_container_foreach ((GtkContainer*) _tmp3_, ____lambda125__gtk_callback, self);
		_tmp4_ = byte_database;
		_tmp5_ = _data42_->search_entry;
		_tmp6_ = gtk_entry_get_text ((GtkEntry*) _tmp5_);
		_tmp7_ = _tmp6_;
		_tmp8_ = g_utf8_strdown (_tmp7_, (gssize) -1);
		_tmp9_ = _tmp8_;
		_tmp10_ = services_database_get_all_albums_search (_tmp4_, _tmp9_);
		_g_object_unref0 (self->priv->all_items);
		self->priv->all_items = _tmp10_;
		_g_free0 (_tmp9_);
		views_albums_add_all_items (self);
	} else {
		GtkListBox* _tmp11_;
		ServicesDatabase* _tmp12_;
		GSettings* _tmp13_;
		GSettings* _tmp14_;
		GeeArrayList* _tmp15_;
		self->priv->item_index = 0;
		self->priv->item_max = 100;
		_tmp11_ = self->priv->listbox;
		gtk_container_foreach ((GtkContainer*) _tmp11_, ____lambda126__gtk_callback, self);
		_tmp12_ = byte_database;
		_tmp13_ = byte_settings;
		_tmp14_ = byte_settings;
		_tmp15_ = services_database_get_all_albums_order_by (_tmp12_, g_settings_get_enum (_tmp13_, "album-sort"), g_settings_get_boolean (_tmp14_, "album-order-reverse"));
		_g_object_unref0 (self->priv->all_items);
		self->priv->all_items = _tmp15_;
		views_albums_add_all_items (self);
	}
}


static void
__views_albums___lambda124__gtk_search_entry_search_changed (GtkSearchEntry* _sender,
                                                             gpointer self)
{
	_views_albums___lambda124_ (self);
}


static void
_views_albums___lambda127_ (Block42Data* _data42_)
{
	ViewsAlbums* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	self = _data42_->self;
	_tmp0_ = _data42_->sort_button;
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
	_tmp2_ = _tmp1_;
	if (_tmp2_) {
		WidgetsPopoversSort* _tmp3_;
		_tmp3_ = _data42_->sort_popover;
		gtk_widget_show_all ((GtkWidget*) _tmp3_);
	}
}


static void
__views_albums___lambda127__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                       gpointer self)
{
	_views_albums___lambda127_ (self);
}


static void
_views_albums___lambda128_ (Block42Data* _data42_)
{
	ViewsAlbums* self;
	GtkToggleButton* _tmp0_;
	self = _data42_->self;
	_tmp0_ = _data42_->sort_button;
	gtk_toggle_button_set_active (_tmp0_, FALSE);
}


static void
__views_albums___lambda128__gtk_popover_closed (GtkPopover* _sender,
                                                gpointer self)
{
	_views_albums___lambda128_ (self);
}


static void
__lambda130_ (ViewsAlbums* self,
              GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
___lambda130__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda130_ ((ViewsAlbums*) self, widget);
}


static void
_views_albums___lambda129_ (ViewsAlbums* self,
                            gint mode)
{
	GSettings* _tmp0_;
	GtkListBox* _tmp1_;
	ServicesDatabase* _tmp2_;
	GSettings* _tmp3_;
	GeeArrayList* _tmp4_;
	_tmp0_ = byte_settings;
	g_settings_set_enum (_tmp0_, "album-sort", mode);
	self->priv->item_index = 0;
	self->priv->item_max = 100;
	_tmp1_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp1_, ___lambda130__gtk_callback, self);
	_tmp2_ = byte_database;
	_tmp3_ = byte_settings;
	_tmp4_ = services_database_get_all_albums_order_by (_tmp2_, mode, g_settings_get_boolean (_tmp3_, "album-order-reverse"));
	_g_object_unref0 (self->priv->all_items);
	self->priv->all_items = _tmp4_;
	views_albums_add_all_items (self);
}


static void
__views_albums___lambda129__widgets_popovers_sort_mode_changed (WidgetsPopoversSort* _sender,
                                                                gint index,
                                                                gpointer self)
{
	_views_albums___lambda129_ ((ViewsAlbums*) self, index);
}


static void
__lambda132_ (ViewsAlbums* self,
              GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
___lambda132__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda132_ ((ViewsAlbums*) self, widget);
}


static void
_views_albums___lambda131_ (ViewsAlbums* self,
                            gboolean reverse)
{
	GSettings* _tmp0_;
	GtkListBox* _tmp1_;
	ServicesDatabase* _tmp2_;
	GSettings* _tmp3_;
	GSettings* _tmp4_;
	GeeArrayList* _tmp5_;
	_tmp0_ = byte_settings;
	g_settings_set_boolean (_tmp0_, "album-order-reverse", reverse);
	self->priv->item_index = 0;
	self->priv->item_max = 100;
	_tmp1_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp1_, ___lambda132__gtk_callback, self);
	_tmp2_ = byte_database;
	_tmp3_ = byte_settings;
	_tmp4_ = byte_settings;
	_tmp5_ = services_database_get_all_albums_order_by (_tmp2_, g_settings_get_enum (_tmp3_, "album-sort"), g_settings_get_boolean (_tmp4_, "album-order-reverse"));
	_g_object_unref0 (self->priv->all_items);
	self->priv->all_items = _tmp5_;
	views_albums_add_all_items (self);
}


static void
__views_albums___lambda131__widgets_popovers_sort_order_reverse (WidgetsPopoversSort* _sender,
                                                                 gboolean mode,
                                                                 gpointer self)
{
	_views_albums___lambda131_ ((ViewsAlbums*) self, mode);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
_views_albums___lambda133_ (ViewsAlbums* self,
                            GtkListBoxRow* row)
{
	WidgetsAlbumRow* item = NULL;
	WidgetsAlbumRow* _tmp0_;
	WidgetsAlbumRow* _tmp1_;
	ObjectsAlbum* _tmp2_;
	ObjectsAlbum* _tmp3_;
	g_return_if_fail (row != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_ALBUM_ROW) ? ((WidgetsAlbumRow*) row) : NULL);
	item = _tmp0_;
	_tmp1_ = item;
	_tmp2_ = widgets_album_row_get_album (_tmp1_);
	_tmp3_ = _tmp2_;
	g_signal_emit (self, views_albums_signals[VIEWS_ALBUMS_GO_ALBUM_SIGNAL], 0, _tmp3_);
	_g_object_unref0 (item);
}


static void
__views_albums___lambda133__gtk_list_box_row_activated (GtkListBox* _sender,
                                                        GtkListBoxRow* row,
                                                        gpointer self)
{
	_views_albums___lambda133_ ((ViewsAlbums*) self, row);
}


static Block43Data*
block43_data_ref (Block43Data* _data43_)
{
	g_atomic_int_inc (&_data43_->_ref_count_);
	return _data43_;
}


static void
block43_data_unref (void * _userdata_)
{
	Block43Data* _data43_;
	_data43_ = (Block43Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data43_->_ref_count_)) {
		ViewsAlbums* self;
		self = _data43_->self;
		_g_object_unref0 (_data43_->album);
		_g_object_unref0 (self);
		g_slice_free (Block43Data, _data43_);
	}
}


static gboolean
__lambda135_ (Block43Data* _data43_)
{
	ViewsAlbums* self;
	gboolean result = FALSE;
	self = _data43_->self;
	views_albums_add_item (self, _data43_->album);
	result = FALSE;
	return result;
}


static gboolean
___lambda135__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda135_ (self);
	return result;
}


static void
_views_albums___lambda134_ (ViewsAlbums* self,
                            ObjectsAlbum* album)
{
	Block43Data* _data43_;
	ObjectsAlbum* _tmp0_;
	g_return_if_fail (album != NULL);
	_data43_ = g_slice_new0 (Block43Data);
	_data43_->_ref_count_ = 1;
	_data43_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (album);
	_g_object_unref0 (_data43_->album);
	_data43_->album = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda135__gsource_func, block43_data_ref (_data43_), block43_data_unref);
	block43_data_unref (_data43_);
	_data43_ = NULL;
}


static void
__views_albums___lambda134__services_database_added_new_album (ServicesDatabase* _sender,
                                                               ObjectsAlbum* album,
                                                               gpointer self)
{
	_views_albums___lambda134_ ((ViewsAlbums*) self, album);
}


static void
_views_albums___lambda136_ (ViewsAlbums* self,
                            GtkPositionType pos)
{
	if (pos == GTK_POS_BOTTOM) {
		gint _tmp0_;
		gint _tmp1_;
		gint _tmp2_;
		GeeArrayList* _tmp3_;
		gint _tmp4_;
		gint _tmp5_;
		_tmp0_ = self->priv->item_max;
		self->priv->item_index = _tmp0_;
		_tmp1_ = self->priv->item_max;
		self->priv->item_max = _tmp1_ + 200;
		_tmp2_ = self->priv->item_max;
		_tmp3_ = self->priv->all_items;
		_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
		_tmp5_ = _tmp4_;
		if (_tmp2_ > _tmp5_) {
			GeeArrayList* _tmp6_;
			gint _tmp7_;
			gint _tmp8_;
			_tmp6_ = self->priv->all_items;
			_tmp7_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp6_);
			_tmp8_ = _tmp7_;
			self->priv->item_max = _tmp8_;
		}
		views_albums_add_all_items (self);
	}
}


static void
__views_albums___lambda136__gtk_scrolled_window_edge_reached (GtkScrolledWindow* _sender,
                                                              GtkPositionType pos,
                                                              gpointer self)
{
	_views_albums___lambda136_ ((ViewsAlbums*) self, pos);
}


static Block44Data*
block44_data_ref (Block44Data* _data44_)
{
	g_atomic_int_inc (&_data44_->_ref_count_);
	return _data44_;
}


static void
block44_data_unref (void * _userdata_)
{
	Block44Data* _data44_;
	_data44_ = (Block44Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data44_->_ref_count_)) {
		ViewsAlbums* self;
		self = _data44_->self;
		_g_object_unref0 (_data44_->widget);
		_g_object_unref0 (self);
		g_slice_free (Block44Data, _data44_);
	}
}


static gboolean
__lambda139_ (Block44Data* _data44_)
{
	ViewsAlbums* self;
	gboolean result = FALSE;
	self = _data44_->self;
	gtk_widget_destroy (_data44_->widget);
	result = FALSE;
	return result;
}


static gboolean
___lambda139__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda139_ (self);
	return result;
}


static void
__lambda138_ (ViewsAlbums* self,
              GtkWidget* widget)
{
	Block44Data* _data44_;
	GtkWidget* _tmp0_;
	g_return_if_fail (widget != NULL);
	_data44_ = g_slice_new0 (Block44Data);
	_data44_->_ref_count_ = 1;
	_data44_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (widget);
	_g_object_unref0 (_data44_->widget);
	_data44_->widget = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda139__gsource_func, block44_data_ref (_data44_), block44_data_unref);
	block44_data_unref (_data44_);
	_data44_ = NULL;
}


static void
___lambda138__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda138_ ((ViewsAlbums*) self, widget);
}


static void
_views_albums___lambda137_ (ViewsAlbums* self)
{
	GtkListBox* _tmp0_;
	_tmp0_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda138__gtk_callback, self);
}


static void
__views_albums___lambda137__services_database_reset_library (ServicesDatabase* _sender,
                                                             gpointer self)
{
	_views_albums___lambda137_ ((ViewsAlbums*) self);
}


static void
_views_albums___lambda140_ (Block42Data* _data42_)
{
	ViewsAlbums* self;
	GtkToggleButton* _tmp0_;
	WidgetsSearchEntry* _tmp1_;
	self = _data42_->self;
	_tmp0_ = _data42_->sort_button;
	gtk_widget_set_sensitive ((GtkWidget*) _tmp0_, FALSE);
	_tmp1_ = _data42_->search_entry;
	gtk_widget_set_sensitive ((GtkWidget*) _tmp1_, FALSE);
}


static void
__views_albums___lambda140__services_scan_sync_started (ServicesScan* _sender,
                                                        gpointer self)
{
	_views_albums___lambda140_ (self);
}


static void
_views_albums___lambda141_ (Block42Data* _data42_)
{
	ViewsAlbums* self;
	GtkToggleButton* _tmp0_;
	WidgetsSearchEntry* _tmp1_;
	self = _data42_->self;
	_tmp0_ = _data42_->sort_button;
	gtk_widget_set_sensitive ((GtkWidget*) _tmp0_, TRUE);
	_tmp1_ = _data42_->search_entry;
	gtk_widget_set_sensitive ((GtkWidget*) _tmp1_, TRUE);
}


static void
__views_albums___lambda141__services_scan_sync_finished (ServicesScan* _sender,
                                                         gpointer self)
{
	_views_albums___lambda141_ (self);
}


static GObject *
views_albums_constructor (GType type,
                          guint n_construct_properties,
                          GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsAlbums * self;
	Block42Data* _data42_;
	ServicesDatabase* _tmp0_;
	GSettings* _tmp1_;
	GSettings* _tmp2_;
	GeeArrayList* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkStyleContext* _tmp5_;
	GtkButton* back_button = NULL;
	GtkButton* _tmp6_;
	GtkButton* _tmp7_;
	GtkButton* _tmp8_;
	GtkButton* _tmp9_;
	GtkButton* _tmp10_;
	GtkButton* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkButton* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkButton* search_button = NULL;
	GtkButton* _tmp15_;
	GtkButton* _tmp16_;
	GtkButton* _tmp17_;
	GtkButton* _tmp18_;
	GtkButton* _tmp19_;
	GtkButton* _tmp20_;
	GtkButton* _tmp21_;
	GtkStyleContext* _tmp22_;
	GtkButton* _tmp23_;
	GtkStyleContext* _tmp24_;
	GtkButton* _tmp25_;
	GtkStyleContext* _tmp26_;
	GtkButton* _tmp27_;
	GtkButton* _tmp28_;
	WidgetsSearchEntry* _tmp29_;
	WidgetsSearchEntry* _tmp30_;
	WidgetsSearchEntry* _tmp31_;
	GtkBox* search_box = NULL;
	GtkBox* _tmp32_;
	GtkBox* _tmp33_;
	GtkStyleContext* _tmp34_;
	GtkBox* _tmp35_;
	WidgetsSearchEntry* _tmp36_;
	GtkBox* _tmp37_;
	GtkSeparator* _tmp38_;
	GtkSeparator* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkRevealer* _tmp41_;
	GtkRevealer* _tmp42_;
	GtkBox* _tmp43_;
	GtkRevealer* _tmp44_;
	GtkToggleButton* _tmp45_;
	GtkToggleButton* _tmp46_;
	GtkToggleButton* _tmp47_;
	GtkToggleButton* _tmp48_;
	GtkImage* _tmp49_;
	GtkImage* _tmp50_;
	GtkToggleButton* _tmp51_;
	GtkToggleButton* _tmp52_;
	GtkStyleContext* _tmp53_;
	GtkToggleButton* _tmp54_;
	GtkStyleContext* _tmp55_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp56_;
	GtkBox* _tmp57_;
	GtkStyleContext* _tmp58_;
	GtkBox* _tmp59_;
	GtkButton* _tmp60_;
	GtkBox* _tmp61_;
	GtkButton* _tmp62_;
	GtkBox* _tmp63_;
	GtkToggleButton* _tmp64_;
	GtkToggleButton* _tmp65_;
	WidgetsPopoversSort* _tmp66_;
	WidgetsPopoversSort* _tmp67_;
	GSettings* _tmp68_;
	WidgetsPopoversSort* _tmp69_;
	GSettings* _tmp70_;
	WidgetsPopoversSort* _tmp71_;
	WidgetsPopoversSort* _tmp72_;
	WidgetsPopoversSort* _tmp73_;
	WidgetsPopoversSort* _tmp74_;
	WidgetsPopoversSort* _tmp75_;
	GtkListBox* _tmp76_;
	GtkListBox* _tmp77_;
	GtkScrolledWindow* scrolled = NULL;
	GtkScrolledWindow* _tmp78_;
	GtkScrolledWindow* _tmp79_;
	GtkScrolledWindow* _tmp80_;
	GtkScrolledWindow* _tmp81_;
	GtkScrolledWindow* _tmp82_;
	GtkListBox* _tmp83_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp84_;
	GtkBox* _tmp85_;
	GtkBox* _tmp86_;
	GtkBox* _tmp87_;
	GtkBox* _tmp88_;
	GtkBox* _tmp89_;
	GtkSeparator* _tmp90_;
	GtkSeparator* _tmp91_;
	GtkBox* _tmp92_;
	GtkRevealer* _tmp93_;
	GtkBox* _tmp94_;
	GtkScrolledWindow* _tmp95_;
	GtkBox* _tmp96_;
	GtkButton* _tmp97_;
	GtkButton* _tmp98_;
	WidgetsSearchEntry* _tmp99_;
	WidgetsSearchEntry* _tmp100_;
	GtkToggleButton* _tmp101_;
	WidgetsPopoversSort* _tmp102_;
	WidgetsPopoversSort* _tmp103_;
	WidgetsPopoversSort* _tmp104_;
	GtkListBox* _tmp105_;
	ServicesDatabase* _tmp106_;
	GtkScrolledWindow* _tmp107_;
	ServicesDatabase* _tmp108_;
	ServicesScan* _tmp109_;
	ServicesScan* _tmp110_;
	parent_class = G_OBJECT_CLASS (views_albums_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_ALBUMS, ViewsAlbums);
	_data42_ = g_slice_new0 (Block42Data);
	_data42_->_ref_count_ = 1;
	_data42_->self = g_object_ref (self);
	self->priv->item_index = 0;
	self->priv->item_max = 25;
	_tmp0_ = byte_database;
	_tmp1_ = byte_settings;
	_tmp2_ = byte_settings;
	_tmp3_ = services_database_get_all_albums_order_by (_tmp0_, g_settings_get_enum (_tmp1_, "album-sort"), g_settings_get_boolean (_tmp2_, "album-order-reverse"));
	_g_object_unref0 (self->priv->all_items);
	self->priv->all_items = _tmp3_;
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp4_, GTK_STYLE_CLASS_VIEW);
	_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp5_, "w-round");
	_tmp6_ = (GtkButton*) gtk_button_new_from_icon_name ("byte-arrow-back-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp6_);
	back_button = _tmp6_;
	_tmp7_ = back_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp7_, FALSE);
	_tmp8_ = back_button;
	g_object_set ((GtkWidget*) _tmp8_, "margin", 3, NULL);
	_tmp9_ = back_button;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp9_, 6);
	_tmp10_ = back_button;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp10_, 6);
	_tmp11_ = back_button;
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
	gtk_style_context_add_class (_tmp12_, GTK_STYLE_CLASS_FLAT);
	_tmp13_ = back_button;
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
	gtk_style_context_add_class (_tmp14_, "label-color-primary");
	_tmp15_ = (GtkButton*) gtk_button_new_from_icon_name ("edit-find-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp15_);
	search_button = _tmp15_;
	_tmp16_ = search_button;
	gtk_button_set_label (_tmp16_, _ ("Albums"));
	_tmp17_ = search_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp17_, FALSE);
	_tmp18_ = search_button;
	gtk_button_set_image_position (_tmp18_, GTK_POS_LEFT);
	_tmp19_ = search_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp19_, GTK_ALIGN_CENTER);
	_tmp20_ = search_button;
	gtk_widget_set_halign ((GtkWidget*) _tmp20_, GTK_ALIGN_CENTER);
	_tmp21_ = search_button;
	_tmp22_ = gtk_widget_get_style_context ((GtkWidget*) _tmp21_);
	gtk_style_context_add_class (_tmp22_, GTK_STYLE_CLASS_FLAT);
	_tmp23_ = search_button;
	_tmp24_ = gtk_widget_get_style_context ((GtkWidget*) _tmp23_);
	gtk_style_context_add_class (_tmp24_, "h3");
	_tmp25_ = search_button;
	_tmp26_ = gtk_widget_get_style_context ((GtkWidget*) _tmp25_);
	gtk_style_context_add_class (_tmp26_, "label-color-primary");
	_tmp27_ = search_button;
	gtk_button_set_always_show_image (_tmp27_, TRUE);
	_tmp28_ = search_button;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp28_, _ ("Search by title, artist, genre and year"));
	_tmp29_ = widgets_search_entry_new ();
	g_object_ref_sink (_tmp29_);
	_data42_->search_entry = _tmp29_;
	_tmp30_ = _data42_->search_entry;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp30_, _ ("Search by title, artist, genre and year"));
	_tmp31_ = _data42_->search_entry;
	gtk_entry_set_placeholder_text ((GtkEntry*) _tmp31_, _ ("Search by title, artist, genre and year"));
	_tmp32_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp32_);
	search_box = _tmp32_;
	_tmp33_ = search_box;
	_tmp34_ = gtk_widget_get_style_context ((GtkWidget*) _tmp33_);
	gtk_style_context_add_class (_tmp34_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp35_ = search_box;
	_tmp36_ = _data42_->search_entry;
	gtk_container_add ((GtkContainer*) _tmp35_, (GtkWidget*) _tmp36_);
	_tmp37_ = search_box;
	_tmp38_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp38_);
	_tmp39_ = _tmp38_;
	gtk_container_add ((GtkContainer*) _tmp37_, (GtkWidget*) _tmp39_);
	_g_object_unref0 (_tmp39_);
	_tmp40_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp40_);
	_data42_->search_revealer = _tmp40_;
	_tmp41_ = _data42_->search_revealer;
	gtk_revealer_set_transition_type (_tmp41_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
	_tmp42_ = _data42_->search_revealer;
	_tmp43_ = search_box;
	gtk_container_add ((GtkContainer*) _tmp42_, (GtkWidget*) _tmp43_);
	_tmp44_ = _data42_->search_revealer;
	gtk_revealer_set_reveal_child (_tmp44_, FALSE);
	_tmp45_ = (GtkToggleButton*) gtk_toggle_button_new ();
	g_object_ref_sink (_tmp45_);
	_data42_->sort_button = _tmp45_;
	_tmp46_ = _data42_->sort_button;
	g_object_set ((GtkWidget*) _tmp46_, "margin", 3, NULL);
	_tmp47_ = _data42_->sort_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp47_, FALSE);
	_tmp48_ = _data42_->sort_button;
	_tmp49_ = (GtkImage*) gtk_image_new_from_icon_name ("byte-sort-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp49_);
	_tmp50_ = _tmp49_;
	gtk_container_add ((GtkContainer*) _tmp48_, (GtkWidget*) _tmp50_);
	_g_object_unref0 (_tmp50_);
	_tmp51_ = _data42_->sort_button;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp51_, _ ("Sort"));
	_tmp52_ = _data42_->sort_button;
	_tmp53_ = gtk_widget_get_style_context ((GtkWidget*) _tmp52_);
	gtk_style_context_add_class (_tmp53_, GTK_STYLE_CLASS_FLAT);
	_tmp54_ = _data42_->sort_button;
	_tmp55_ = gtk_widget_get_style_context ((GtkWidget*) _tmp54_);
	gtk_style_context_add_class (_tmp55_, "sort-button");
	_tmp56_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp56_);
	header_box = _tmp56_;
	_tmp57_ = header_box;
	_tmp58_ = gtk_widget_get_style_context ((GtkWidget*) _tmp57_);
	gtk_style_context_add_class (_tmp58_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp59_ = header_box;
	_tmp60_ = back_button;
	gtk_box_pack_start (_tmp59_, (GtkWidget*) _tmp60_, FALSE, FALSE, (guint) 0);
	_tmp61_ = header_box;
	_tmp62_ = search_button;
	gtk_box_set_center_widget (_tmp61_, (GtkWidget*) _tmp62_);
	_tmp63_ = header_box;
	_tmp64_ = _data42_->sort_button;
	gtk_box_pack_end (_tmp63_, (GtkWidget*) _tmp64_, FALSE, FALSE, (guint) 0);
	_tmp65_ = _data42_->sort_button;
	_tmp66_ = widgets_popovers_sort_new ((GtkWidget*) _tmp65_);
	g_object_ref_sink (_tmp66_);
	_data42_->sort_popover = _tmp66_;
	_tmp67_ = _data42_->sort_popover;
	_tmp68_ = byte_settings;
	widgets_popovers_sort_set_selected (_tmp67_, g_settings_get_enum (_tmp68_, "album-sort"));
	_tmp69_ = _data42_->sort_popover;
	_tmp70_ = byte_settings;
	widgets_popovers_sort_set_reverse (_tmp69_, g_settings_get_boolean (_tmp70_, "album-order-reverse"));
	_tmp71_ = _data42_->sort_popover;
	widgets_popovers_sort_set_radio_01_label (_tmp71_, _ ("Name"));
	_tmp72_ = _data42_->sort_popover;
	widgets_popovers_sort_set_radio_02_label (_tmp72_, _ ("Artist"));
	_tmp73_ = _data42_->sort_popover;
	widgets_popovers_sort_set_radio_03_label (_tmp73_, _ ("Year"));
	_tmp74_ = _data42_->sort_popover;
	widgets_popovers_sort_set_radio_04_label (_tmp74_, _ ("Genre"));
	_tmp75_ = _data42_->sort_popover;
	widgets_popovers_sort_set_radio_05_visible (_tmp75_, FALSE);
	_tmp76_ = (GtkListBox*) gtk_list_box_new ();
	g_object_ref_sink (_tmp76_);
	_g_object_unref0 (self->priv->listbox);
	self->priv->listbox = _tmp76_;
	_tmp77_ = self->priv->listbox;
	g_object_set ((GtkWidget*) _tmp77_, "expand", TRUE, NULL);
	_tmp78_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
	g_object_ref_sink (_tmp78_);
	scrolled = _tmp78_;
	_tmp79_ = scrolled;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp79_, 3);
	_tmp80_ = scrolled;
	g_object_set (_tmp80_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
	_tmp81_ = scrolled;
	g_object_set ((GtkWidget*) _tmp81_, "expand", TRUE, NULL);
	_tmp82_ = scrolled;
	_tmp83_ = self->priv->listbox;
	gtk_container_add ((GtkContainer*) _tmp82_, (GtkWidget*) _tmp83_);
	_tmp84_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp84_);
	main_box = _tmp84_;
	_tmp85_ = main_box;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp85_, 3);
	_tmp86_ = main_box;
	g_object_set ((GtkWidget*) _tmp86_, "expand", TRUE, NULL);
	_tmp87_ = main_box;
	_tmp88_ = header_box;
	gtk_box_pack_start (_tmp87_, (GtkWidget*) _tmp88_, FALSE, FALSE, (guint) 0);
	_tmp89_ = main_box;
	_tmp90_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp90_);
	_tmp91_ = _tmp90_;
	gtk_box_pack_start (_tmp89_, (GtkWidget*) _tmp91_, FALSE, FALSE, (guint) 0);
	_g_object_unref0 (_tmp91_);
	_tmp92_ = main_box;
	_tmp93_ = _data42_->search_revealer;
	gtk_box_pack_start (_tmp92_, (GtkWidget*) _tmp93_, FALSE, FALSE, (guint) 0);
	_tmp94_ = main_box;
	_tmp95_ = scrolled;
	gtk_box_pack_start (_tmp94_, (GtkWidget*) _tmp95_, TRUE, TRUE, (guint) 0);
	_tmp96_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp96_);
	views_albums_add_all_items (self);
	_tmp97_ = back_button;
	g_signal_connect_object (_tmp97_, "clicked", (GCallback) __views_albums___lambda121__gtk_button_clicked, self, 0);
	_tmp98_ = search_button;
	g_signal_connect_data (_tmp98_, "clicked", (GCallback) __views_albums___lambda122__gtk_button_clicked, block42_data_ref (_data42_), (GClosureNotify) block42_data_unref, 0);
	_tmp99_ = _data42_->search_entry;
	g_signal_connect_data ((GtkWidget*) _tmp99_, "key-release-event", (GCallback) __views_albums___lambda123__gtk_widget_key_release_event, block42_data_ref (_data42_), (GClosureNotify) block42_data_unref, 0);
	_tmp100_ = _data42_->search_entry;
	g_signal_connect_data ((GtkSearchEntry*) _tmp100_, "search-changed", (GCallback) __views_albums___lambda124__gtk_search_entry_search_changed, block42_data_ref (_data42_), (GClosureNotify) block42_data_unref, 0);
	_tmp101_ = _data42_->sort_button;
	g_signal_connect_data (_tmp101_, "toggled", (GCallback) __views_albums___lambda127__gtk_toggle_button_toggled, block42_data_ref (_data42_), (GClosureNotify) block42_data_unref, 0);
	_tmp102_ = _data42_->sort_popover;
	g_signal_connect_data ((GtkPopover*) _tmp102_, "closed", (GCallback) __views_albums___lambda128__gtk_popover_closed, block42_data_ref (_data42_), (GClosureNotify) block42_data_unref, 0);
	_tmp103_ = _data42_->sort_popover;
	g_signal_connect_object (_tmp103_, "mode-changed", (GCallback) __views_albums___lambda129__widgets_popovers_sort_mode_changed, self, 0);
	_tmp104_ = _data42_->sort_popover;
	g_signal_connect_object (_tmp104_, "order-reverse", (GCallback) __views_albums___lambda131__widgets_popovers_sort_order_reverse, self, 0);
	_tmp105_ = self->priv->listbox;
	g_signal_connect_object (_tmp105_, "row-activated", (GCallback) __views_albums___lambda133__gtk_list_box_row_activated, self, 0);
	_tmp106_ = byte_database;
	g_signal_connect_object (_tmp106_, "added-new-album", (GCallback) __views_albums___lambda134__services_database_added_new_album, self, 0);
	_tmp107_ = scrolled;
	g_signal_connect_object (_tmp107_, "edge-reached", (GCallback) __views_albums___lambda136__gtk_scrolled_window_edge_reached, self, 0);
	_tmp108_ = byte_database;
	g_signal_connect_object (_tmp108_, "reset-library", (GCallback) __views_albums___lambda137__services_database_reset_library, self, 0);
	_tmp109_ = byte_scan_service;
	g_signal_connect_data (_tmp109_, "sync-started", (GCallback) __views_albums___lambda140__services_scan_sync_started, block42_data_ref (_data42_), (GClosureNotify) block42_data_unref, 0);
	_tmp110_ = byte_scan_service;
	g_signal_connect_data (_tmp110_, "sync-finished", (GCallback) __views_albums___lambda141__services_scan_sync_finished, block42_data_ref (_data42_), (GClosureNotify) block42_data_unref, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (scrolled);
	_g_object_unref0 (header_box);
	_g_object_unref0 (search_box);
	_g_object_unref0 (search_button);
	_g_object_unref0 (back_button);
	block42_data_unref (_data42_);
	_data42_ = NULL;
	return obj;
}


static void
views_albums_class_init (ViewsAlbumsClass * klass)
{
	views_albums_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (ViewsAlbumsPrivate));
	G_OBJECT_CLASS (klass)->constructor = views_albums_constructor;
	G_OBJECT_CLASS (klass)->finalize = views_albums_finalize;
	views_albums_signals[VIEWS_ALBUMS_GO_BACK_SIGNAL] = g_signal_new ("go-back", VIEWS_TYPE_ALBUMS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	views_albums_signals[VIEWS_ALBUMS_GO_ALBUM_SIGNAL] = g_signal_new ("go-album", VIEWS_TYPE_ALBUMS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, OBJECTS_TYPE_ALBUM);
}


static void
views_albums_instance_init (ViewsAlbums * self)
{
	self->priv = VIEWS_ALBUMS_GET_PRIVATE (self);
}


static void
views_albums_finalize (GObject * obj)
{
	ViewsAlbums * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_ALBUMS, ViewsAlbums);
	_g_object_unref0 (self->priv->listbox);
	_g_object_unref0 (self->priv->all_items);
	G_OBJECT_CLASS (views_albums_parent_class)->finalize (obj);
}


GType
views_albums_get_type (void)
{
	static volatile gsize views_albums_type_id__volatile = 0;
	if (g_once_init_enter (&views_albums_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsAlbumsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_albums_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsAlbums), 0, (GInstanceInitFunc) views_albums_instance_init, NULL };
		GType views_albums_type_id;
		views_albums_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsAlbums", &g_define_type_info, 0);
		g_once_init_leave (&views_albums_type_id__volatile, views_albums_type_id);
	}
	return views_albums_type_id__volatile;
}



