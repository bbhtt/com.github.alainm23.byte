/* Album.c generated by valac 0.40.11, the Vala compiler
 * generated from Album.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <glib/gi18n-lib.h>
#include <pango/pango.h>
#include <granite.h>
#include <gio/gio.h>
#include <stdio.h>


#define VIEWS_TYPE_ALBUM (views_album_get_type ())
#define VIEWS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_ALBUM, ViewsAlbum))
#define VIEWS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_ALBUM, ViewsAlbumClass))
#define VIEWS_IS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_ALBUM))
#define VIEWS_IS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_ALBUM))
#define VIEWS_ALBUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_ALBUM, ViewsAlbumClass))

typedef struct _ViewsAlbum ViewsAlbum;
typedef struct _ViewsAlbumClass ViewsAlbumClass;
typedef struct _ViewsAlbumPrivate ViewsAlbumPrivate;

#define OBJECTS_TYPE_ALBUM (objects_album_get_type ())
#define OBJECTS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ALBUM, ObjectsAlbum))
#define OBJECTS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ALBUM, ObjectsAlbumClass))
#define OBJECTS_IS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ALBUM))
#define OBJECTS_IS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ALBUM))
#define OBJECTS_ALBUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ALBUM, ObjectsAlbumClass))

typedef struct _ObjectsAlbum ObjectsAlbum;
typedef struct _ObjectsAlbumClass ObjectsAlbumClass;

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;

#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;
enum  {
	VIEWS_ALBUM_0_PROPERTY,
	VIEWS_ALBUM_BACK_PAGE_PROPERTY,
	VIEWS_ALBUM_ALBUM_PROPERTY,
	VIEWS_ALBUM_NUM_PROPERTIES
};
static GParamSpec* views_album_properties[VIEWS_ALBUM_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ObjectsAlbumPrivate ObjectsAlbumPrivate;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define SERVICES_TYPE_SCAN (services_scan_get_type ())
#define SERVICES_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SCAN, ServicesScan))
#define SERVICES_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SCAN, ServicesScanClass))
#define SERVICES_IS_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SCAN))
#define SERVICES_IS_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SCAN))
#define SERVICES_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SCAN, ServicesScanClass))

typedef struct _ServicesScan ServicesScan;
typedef struct _ServicesScanClass ServicesScanClass;
typedef struct _ServicesScanPrivate ServicesScanPrivate;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define WIDGETS_TYPE_TRACK_ALBUM_ROW (widgets_track_album_row_get_type ())
#define WIDGETS_TRACK_ALBUM_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TRACK_ALBUM_ROW, WidgetsTrackAlbumRow))
#define WIDGETS_TRACK_ALBUM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TRACK_ALBUM_ROW, WidgetsTrackAlbumRowClass))
#define WIDGETS_IS_TRACK_ALBUM_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TRACK_ALBUM_ROW))
#define WIDGETS_IS_TRACK_ALBUM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TRACK_ALBUM_ROW))
#define WIDGETS_TRACK_ALBUM_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TRACK_ALBUM_ROW, WidgetsTrackAlbumRowClass))

typedef struct _WidgetsTrackAlbumRow WidgetsTrackAlbumRow;
typedef struct _WidgetsTrackAlbumRowClass WidgetsTrackAlbumRowClass;
typedef struct _Block45Data Block45Data;
typedef struct _ObjectsTrackPrivate ObjectsTrackPrivate;
typedef struct _Block46Data Block46Data;
typedef struct _Block47Data Block47Data;
enum  {
	VIEWS_ALBUM_GO_BACK_SIGNAL,
	VIEWS_ALBUM_NUM_SIGNALS
};
static guint views_album_signals[VIEWS_ALBUM_NUM_SIGNALS] = {0};

struct _ViewsAlbum {
	GtkEventBox parent_instance;
	ViewsAlbumPrivate * priv;
	ObjectsAlbum* _album;
};

struct _ViewsAlbumClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsAlbumPrivate {
	GtkLabel* title_label;
	GtkLabel* artist_label;
	GtkLabel* genre_label;
	GtkLabel* year_label;
	GtkListBox* listbox;
	gchar* cover_path;
	WidgetsCover* image_cover;
	gchar* _back_page;
	GeeArrayList* all_tracks;
};

struct _ObjectsAlbum {
	GObject parent_instance;
	ObjectsAlbumPrivate * priv;
	gint id;
	gint artist_id;
	gchar* artist_name;
	gint year;
	gchar* title;
	gchar* genre;
};

struct _ObjectsAlbumClass {
	GObjectClass parent_class;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};

struct _ServicesScan {
	GObject parent_instance;
	ServicesScanPrivate * priv;
	gint counter;
	gint counter_max;
	gboolean is_sync;
};

struct _ServicesScanClass {
	GObjectClass parent_class;
};

struct _Block45Data {
	int _ref_count_;
	ViewsAlbum* self;
	ObjectsTrack* track;
};

struct _ObjectsTrack {
	GObject parent_instance;
	ObjectsTrackPrivate * priv;
	gint track_order;
	gint id;
	gint album_id;
	gint track;
	gint disc;
	gint play_count;
	gint is_favorite;
	gint bitrate;
	gint bpm;
	gint rating;
	gint samplerate;
	gint channels;
	gint year;
	gint playlist;
	guint64 duration;
	gchar* path;
	gchar* title;
	gchar* favorite_added;
	gchar* last_played;
	gchar* album_title;
	gchar* artist_name;
	gchar* composer;
	gchar* grouping;
	gchar* comment;
	gchar* lyrics;
	gchar* genre;
	gchar* album_artist;
	gchar* date_added;
};

struct _ObjectsTrackClass {
	GObjectClass parent_class;
};

struct _Block46Data {
	int _ref_count_;
	ViewsAlbum* self;
	gint album_id;
};

struct _Block47Data {
	int _ref_count_;
	ViewsAlbum* self;
	GtkWidget* widget;
};


static gpointer views_album_parent_class = NULL;
extern Utils* byte_utils;
extern ServicesScan* byte_scan_service;
extern ServicesDatabase* byte_database;
extern GSettings* byte_settings;

GType views_album_get_type (void) G_GNUC_CONST;
GType objects_album_get_type (void) G_GNUC_CONST;
GType widgets_cover_get_type (void) G_GNUC_CONST;
GType objects_track_get_type (void) G_GNUC_CONST;
#define VIEWS_ALBUM_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_ALBUM, ViewsAlbumPrivate))
ViewsAlbum* views_album_new (void);
ViewsAlbum* views_album_construct (GType object_type);
const gchar* views_album_get_back_page (ViewsAlbum* self);
void views_album_set_back_page (ViewsAlbum* self,
                                const gchar* value);
ObjectsAlbum* views_album_get_album (ViewsAlbum* self);
void views_album_set_album (ViewsAlbum* self,
                            ObjectsAlbum* value);
GType utils_get_type (void) G_GNUC_CONST;
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
static void _views_album_album___lambda257_ (ViewsAlbum* self,
                                      GtkWidget* widget);
static void __views_album_album___lambda257__gtk_callback (GtkWidget* widget,
                                                    gpointer self);
GType services_scan_get_type (void) G_GNUC_CONST;
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_tracks_by_album (ServicesDatabase* self,
                                                         gint id);
GType widgets_track_album_row_get_type (void) G_GNUC_CONST;
WidgetsTrackAlbumRow* widgets_track_album_row_new (ObjectsTrack* track);
WidgetsTrackAlbumRow* widgets_track_album_row_construct (GType object_type,
                                                         ObjectsTrack* track);
static GObject * views_album_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties);
WidgetsCover* widgets_cover_new_from_file (const gchar* filepath,
                                           gint pixel_size,
                                           const gchar* type);
WidgetsCover* widgets_cover_construct_from_file (GType object_type,
                                                 const gchar* filepath,
                                                 gint pixel_size,
                                                 const gchar* type);
static void _views_album___lambda278_ (ViewsAlbum* self);
static void __views_album___lambda278__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self);
static void _views_album___lambda279_ (ViewsAlbum* self,
                                GtkListBoxRow* row);
void utils_set_items (Utils* self,
                      GeeArrayList* all_items,
                      gboolean shuffle_mode,
                      ObjectsTrack* track);
ObjectsTrack* widgets_track_album_row_get_track (WidgetsTrackAlbumRow* self);
static void __views_album___lambda279__gtk_list_box_row_activated (GtkListBox* _sender,
                                                            GtkListBoxRow* row,
                                                            gpointer self);
static void _views_album___lambda280_ (ViewsAlbum* self);
static void __views_album___lambda280__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self);
static void _views_album___lambda281_ (ViewsAlbum* self);
static void __views_album___lambda281__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self);
static void _views_album___lambda282_ (ViewsAlbum* self,
                                ObjectsTrack* track);
static Block45Data* block45_data_ref (Block45Data* _data45_);
static void block45_data_unref (void * _userdata_);
static gboolean __lambda283_ (Block45Data* _data45_);
static gboolean ___lambda283__gsource_func (gpointer self);
static void __views_album___lambda282__services_database_adden_new_track (ServicesDatabase* _sender,
                                                                   ObjectsTrack* track,
                                                                   gpointer self);
static void _views_album___lambda284_ (ViewsAlbum* self,
                                gint album_id);
static Block46Data* block46_data_ref (Block46Data* _data46_);
static void block46_data_unref (void * _userdata_);
static gboolean __lambda285_ (Block46Data* _data46_);
static gboolean ___lambda285__gsource_func (gpointer self);
static void __views_album___lambda284__services_database_updated_album_cover (ServicesDatabase* _sender,
                                                                       gint album_id,
                                                                       gpointer self);
static void _views_album___lambda286_ (ViewsAlbum* self);
static void __lambda287_ (ViewsAlbum* self,
                   GtkWidget* widget);
static Block47Data* block47_data_ref (Block47Data* _data47_);
static void block47_data_unref (void * _userdata_);
static gboolean __lambda288_ (Block47Data* _data47_);
static gboolean ___lambda288__gsource_func (gpointer self);
static void ___lambda287__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __views_album___lambda286__services_database_reset_library (ServicesDatabase* _sender,
                                                                 gpointer self);
static void views_album_finalize (GObject * obj);
static void _vala_views_album_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec);
static void _vala_views_album_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec);


ViewsAlbum*
views_album_construct (GType object_type)
{
	ViewsAlbum * self = NULL;
	self = (ViewsAlbum*) g_object_new (object_type, NULL);
	return self;
}


ViewsAlbum*
views_album_new (void)
{
	return views_album_construct (VIEWS_TYPE_ALBUM);
}


const gchar*
views_album_get_back_page (ViewsAlbum* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_back_page;
	result = _tmp0_;
	return result;
}


void
views_album_set_back_page (ViewsAlbum* self,
                           const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, views_album_get_back_page (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_back_page);
		self->priv->_back_page = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, views_album_properties[VIEWS_ALBUM_BACK_PAGE_PROPERTY]);
	}
}


ObjectsAlbum*
views_album_get_album (ViewsAlbum* self)
{
	ObjectsAlbum* result;
	ObjectsAlbum* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->_album;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
_views_album_album___lambda257_ (ViewsAlbum* self,
                                 GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
__views_album_album___lambda257__gtk_callback (GtkWidget* widget,
                                               gpointer self)
{
	_views_album_album___lambda257_ ((ViewsAlbum*) self, widget);
}


void
views_album_set_album (ViewsAlbum* self,
                       ObjectsAlbum* value)
{
	ObjectsAlbum* _tmp0_;
	ObjectsAlbum* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GtkLabel* _tmp5_;
	ObjectsAlbum* _tmp6_;
	const gchar* _tmp7_;
	GtkLabel* _tmp8_;
	ObjectsAlbum* _tmp9_;
	const gchar* _tmp10_;
	GtkLabel* _tmp11_;
	ObjectsAlbum* _tmp12_;
	const gchar* _tmp13_;
	GtkLabel* _tmp14_;
	ObjectsAlbum* _tmp15_;
	gint _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	GtkListBox* _tmp33_;
	ServicesScan* _tmp34_;
	gboolean _tmp35_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	_tmp0_ = _g_object_ref0 (value);
	_g_object_unref0 (self->_album);
	self->_album = _tmp0_;
	_tmp1_ = self->_album;
	_tmp2_ = _tmp1_->title;
	_tmp3_ = g_strdup_printf ("Title: %s\n", _tmp2_);
	_tmp4_ = _tmp3_;
	g_print ("%s", _tmp4_);
	_g_free0 (_tmp4_);
	_tmp5_ = self->priv->title_label;
	_tmp6_ = self->_album;
	_tmp7_ = _tmp6_->title;
	gtk_label_set_label (_tmp5_, _tmp7_);
	_tmp8_ = self->priv->artist_label;
	_tmp9_ = self->_album;
	_tmp10_ = _tmp9_->artist_name;
	gtk_label_set_label (_tmp8_, _tmp10_);
	_tmp11_ = self->priv->genre_label;
	_tmp12_ = self->_album;
	_tmp13_ = _tmp12_->genre;
	gtk_label_set_label (_tmp11_, _tmp13_);
	_tmp14_ = self->priv->year_label;
	_tmp15_ = self->_album;
	_tmp16_ = _tmp15_->year;
	_tmp17_ = g_strdup_printf ("%i", _tmp16_);
	_tmp18_ = _tmp17_;
	gtk_label_set_label (_tmp14_, _tmp18_);
	_g_free0 (_tmp18_);
	{
		Utils* _tmp19_;
		const gchar* _tmp20_;
		ObjectsAlbum* _tmp21_;
		gint _tmp22_;
		gchar* _tmp23_;
		gchar* _tmp24_;
		gchar* _tmp25_;
		GdkPixbuf* pixbuf = NULL;
		const gchar* _tmp26_;
		GdkPixbuf* _tmp27_;
		WidgetsCover* _tmp28_;
		GdkPixbuf* _tmp29_;
		_tmp19_ = byte_utils;
		_tmp20_ = _tmp19_->COVER_FOLDER;
		_tmp21_ = self->_album;
		_tmp22_ = _tmp21_->id;
		_tmp23_ = g_strdup_printf ("album-%i.jpg", _tmp22_);
		_tmp24_ = _tmp23_;
		_tmp25_ = g_build_filename (_tmp20_, _tmp24_, NULL);
		_g_free0 (self->priv->cover_path);
		self->priv->cover_path = _tmp25_;
		_g_free0 (_tmp24_);
		_tmp26_ = self->priv->cover_path;
		_tmp27_ = gdk_pixbuf_new_from_file_at_size (_tmp26_, 128, 128, &_inner_error_);
		pixbuf = _tmp27_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch46_g_error;
		}
		_tmp28_ = self->priv->image_cover;
		_tmp29_ = pixbuf;
		widgets_cover_set_pixbuf (_tmp28_, _tmp29_);
		_g_object_unref0 (pixbuf);
	}
	goto __finally46;
	__catch46_g_error:
	{
		GError* e = NULL;
		GdkPixbuf* pixbuf = NULL;
		GdkPixbuf* _tmp30_;
		WidgetsCover* _tmp31_;
		GdkPixbuf* _tmp32_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp30_ = gdk_pixbuf_new_from_file_at_size ("/usr/share/com.github.alainm23.byte/album-default-cover.svg", 128, 128, &_inner_error_);
		pixbuf = _tmp30_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_error_free0 (e);
			goto __finally46;
		}
		_tmp31_ = self->priv->image_cover;
		_tmp32_ = pixbuf;
		widgets_cover_set_pixbuf (_tmp31_, _tmp32_);
		_g_object_unref0 (pixbuf);
		_g_error_free0 (e);
	}
	__finally46:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp33_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp33_, __views_album_album___lambda257__gtk_callback, self);
	_tmp34_ = byte_scan_service;
	_tmp35_ = _tmp34_->is_sync;
	if (_tmp35_ == FALSE) {
		GeeArrayList* _tmp36_;
		ServicesDatabase* _tmp37_;
		ObjectsAlbum* _tmp38_;
		gint _tmp39_;
		GeeArrayList* _tmp40_;
		GtkListBox* _tmp56_;
		_tmp36_ = gee_array_list_new (OBJECTS_TYPE_TRACK, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL);
		_g_object_unref0 (self->priv->all_tracks);
		self->priv->all_tracks = _tmp36_;
		_tmp37_ = byte_database;
		_tmp38_ = self->_album;
		_tmp39_ = _tmp38_->id;
		_tmp40_ = services_database_get_all_tracks_by_album (_tmp37_, _tmp39_);
		_g_object_unref0 (self->priv->all_tracks);
		self->priv->all_tracks = _tmp40_;
		{
			GeeArrayList* _item_list = NULL;
			GeeArrayList* _tmp41_;
			GeeArrayList* _tmp42_;
			gint _item_size = 0;
			GeeArrayList* _tmp43_;
			gint _tmp44_;
			gint _tmp45_;
			gint _item_index = 0;
			_tmp41_ = self->priv->all_tracks;
			_tmp42_ = _g_object_ref0 (_tmp41_);
			_item_list = _tmp42_;
			_tmp43_ = _item_list;
			_tmp44_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp43_);
			_tmp45_ = _tmp44_;
			_item_size = _tmp45_;
			_item_index = -1;
			while (TRUE) {
				gint _tmp46_;
				gint _tmp47_;
				gint _tmp48_;
				ObjectsTrack* item = NULL;
				GeeArrayList* _tmp49_;
				gint _tmp50_;
				gpointer _tmp51_;
				WidgetsTrackAlbumRow* row = NULL;
				ObjectsTrack* _tmp52_;
				WidgetsTrackAlbumRow* _tmp53_;
				GtkListBox* _tmp54_;
				WidgetsTrackAlbumRow* _tmp55_;
				_tmp46_ = _item_index;
				_item_index = _tmp46_ + 1;
				_tmp47_ = _item_index;
				_tmp48_ = _item_size;
				if (!(_tmp47_ < _tmp48_)) {
					break;
				}
				_tmp49_ = _item_list;
				_tmp50_ = _item_index;
				_tmp51_ = gee_abstract_list_get ((GeeAbstractList*) _tmp49_, _tmp50_);
				item = (ObjectsTrack*) _tmp51_;
				_tmp52_ = item;
				_tmp53_ = widgets_track_album_row_new (_tmp52_);
				g_object_ref_sink (_tmp53_);
				row = _tmp53_;
				_tmp54_ = self->priv->listbox;
				_tmp55_ = row;
				gtk_container_add ((GtkContainer*) _tmp54_, (GtkWidget*) _tmp55_);
				_g_object_unref0 (row);
				_g_object_unref0 (item);
			}
			_g_object_unref0 (_item_list);
		}
		_tmp56_ = self->priv->listbox;
		gtk_widget_show_all ((GtkWidget*) _tmp56_);
	}
	g_object_notify_by_pspec ((GObject *) self, views_album_properties[VIEWS_ALBUM_ALBUM_PROPERTY]);
}


static void
_views_album___lambda278_ (ViewsAlbum* self)
{
	const gchar* _tmp0_;
	_tmp0_ = self->priv->_back_page;
	g_signal_emit (self, views_album_signals[VIEWS_ALBUM_GO_BACK_SIGNAL], 0, _tmp0_);
}


static void
__views_album___lambda278__gtk_button_clicked (GtkButton* _sender,
                                               gpointer self)
{
	_views_album___lambda278_ ((ViewsAlbum*) self);
}


static void
_views_album___lambda279_ (ViewsAlbum* self,
                           GtkListBoxRow* row)
{
	WidgetsTrackAlbumRow* item = NULL;
	WidgetsTrackAlbumRow* _tmp0_;
	Utils* _tmp1_;
	GeeArrayList* _tmp2_;
	GSettings* _tmp3_;
	WidgetsTrackAlbumRow* _tmp4_;
	ObjectsTrack* _tmp5_;
	ObjectsTrack* _tmp6_;
	g_return_if_fail (row != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TRACK_ALBUM_ROW) ? ((WidgetsTrackAlbumRow*) row) : NULL);
	item = _tmp0_;
	_tmp1_ = byte_utils;
	_tmp2_ = self->priv->all_tracks;
	_tmp3_ = byte_settings;
	_tmp4_ = item;
	_tmp5_ = widgets_track_album_row_get_track (_tmp4_);
	_tmp6_ = _tmp5_;
	utils_set_items (_tmp1_, _tmp2_, g_settings_get_boolean (_tmp3_, "shuffle-mode"), _tmp6_);
	_g_object_unref0 (item);
}


static void
__views_album___lambda279__gtk_list_box_row_activated (GtkListBox* _sender,
                                                       GtkListBoxRow* row,
                                                       gpointer self)
{
	_views_album___lambda279_ ((ViewsAlbum*) self, row);
}


static void
_views_album___lambda280_ (ViewsAlbum* self)
{
	Utils* _tmp0_;
	GeeArrayList* _tmp1_;
	_tmp0_ = byte_utils;
	_tmp1_ = self->priv->all_tracks;
	utils_set_items (_tmp0_, _tmp1_, FALSE, NULL);
}


static void
__views_album___lambda280__gtk_button_clicked (GtkButton* _sender,
                                               gpointer self)
{
	_views_album___lambda280_ ((ViewsAlbum*) self);
}


static void
_views_album___lambda281_ (ViewsAlbum* self)
{
	Utils* _tmp0_;
	GeeArrayList* _tmp1_;
	_tmp0_ = byte_utils;
	_tmp1_ = self->priv->all_tracks;
	utils_set_items (_tmp0_, _tmp1_, TRUE, NULL);
}


static void
__views_album___lambda281__gtk_button_clicked (GtkButton* _sender,
                                               gpointer self)
{
	_views_album___lambda281_ ((ViewsAlbum*) self);
}


static Block45Data*
block45_data_ref (Block45Data* _data45_)
{
	g_atomic_int_inc (&_data45_->_ref_count_);
	return _data45_;
}


static void
block45_data_unref (void * _userdata_)
{
	Block45Data* _data45_;
	_data45_ = (Block45Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data45_->_ref_count_)) {
		ViewsAlbum* self;
		self = _data45_->self;
		_g_object_unref0 (_data45_->track);
		_g_object_unref0 (self);
		g_slice_free (Block45Data, _data45_);
	}
}


static gboolean
__lambda283_ (Block45Data* _data45_)
{
	ViewsAlbum* self;
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	self = _data45_->self;
	if (_data45_->track != NULL) {
		ObjectsAlbum* _tmp2_;
		_tmp2_ = self->_album;
		_tmp1_ = _tmp2_ != NULL;
	} else {
		_tmp1_ = FALSE;
	}
	if (_tmp1_) {
		gint _tmp3_;
		ObjectsAlbum* _tmp4_;
		gint _tmp5_;
		_tmp3_ = _data45_->track->album_id;
		_tmp4_ = self->_album;
		_tmp5_ = _tmp4_->id;
		_tmp0_ = _tmp3_ == _tmp5_;
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		WidgetsTrackAlbumRow* row = NULL;
		WidgetsTrackAlbumRow* _tmp6_;
		GtkListBox* _tmp7_;
		WidgetsTrackAlbumRow* _tmp8_;
		GtkListBox* _tmp9_;
		_tmp6_ = widgets_track_album_row_new (_data45_->track);
		g_object_ref_sink (_tmp6_);
		row = _tmp6_;
		_tmp7_ = self->priv->listbox;
		_tmp8_ = row;
		gtk_container_add ((GtkContainer*) _tmp7_, (GtkWidget*) _tmp8_);
		_tmp9_ = self->priv->listbox;
		gtk_widget_show_all ((GtkWidget*) _tmp9_);
		_g_object_unref0 (row);
	}
	result = FALSE;
	return result;
}


static gboolean
___lambda283__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda283_ (self);
	return result;
}


static void
_views_album___lambda282_ (ViewsAlbum* self,
                           ObjectsTrack* track)
{
	Block45Data* _data45_;
	ObjectsTrack* _tmp0_;
	_data45_ = g_slice_new0 (Block45Data);
	_data45_->_ref_count_ = 1;
	_data45_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (track);
	_g_object_unref0 (_data45_->track);
	_data45_->track = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda283__gsource_func, block45_data_ref (_data45_), block45_data_unref);
	block45_data_unref (_data45_);
	_data45_ = NULL;
}


static void
__views_album___lambda282__services_database_adden_new_track (ServicesDatabase* _sender,
                                                              ObjectsTrack* track,
                                                              gpointer self)
{
	_views_album___lambda282_ ((ViewsAlbum*) self, track);
}


static Block46Data*
block46_data_ref (Block46Data* _data46_)
{
	g_atomic_int_inc (&_data46_->_ref_count_);
	return _data46_;
}


static void
block46_data_unref (void * _userdata_)
{
	Block46Data* _data46_;
	_data46_ = (Block46Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data46_->_ref_count_)) {
		ViewsAlbum* self;
		self = _data46_->self;
		_g_object_unref0 (self);
		g_slice_free (Block46Data, _data46_);
	}
}


static gboolean
__lambda285_ (Block46Data* _data46_)
{
	ViewsAlbum* self;
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	ObjectsAlbum* _tmp1_;
	GError * _inner_error_ = NULL;
	self = _data46_->self;
	_tmp1_ = self->_album;
	if (_tmp1_ != NULL) {
		ObjectsAlbum* _tmp2_;
		gint _tmp3_;
		_tmp2_ = self->_album;
		_tmp3_ = _tmp2_->id;
		_tmp0_ = _data46_->album_id == _tmp3_;
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		{
			GdkPixbuf* _tmp4_ = NULL;
			Utils* _tmp5_;
			const gchar* _tmp6_;
			gchar* _tmp7_;
			gchar* _tmp8_;
			gchar* _tmp9_;
			gchar* _tmp10_;
			GdkPixbuf* _tmp11_;
			GdkPixbuf* _tmp12_;
			WidgetsCover* _tmp13_;
			_tmp5_ = byte_utils;
			_tmp6_ = _tmp5_->COVER_FOLDER;
			_tmp7_ = g_strdup_printf ("album-%i.jpg", _data46_->album_id);
			_tmp8_ = _tmp7_;
			_tmp9_ = g_build_filename (_tmp6_, _tmp8_, NULL);
			_tmp10_ = _tmp9_;
			_tmp11_ = gdk_pixbuf_new_from_file_at_size (_tmp10_, 128, 128, &_inner_error_);
			_tmp12_ = _tmp11_;
			_g_free0 (_tmp10_);
			_g_free0 (_tmp8_);
			_tmp4_ = _tmp12_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch47_g_error;
			}
			_tmp13_ = self->priv->image_cover;
			widgets_cover_set_pixbuf (_tmp13_, _tmp4_);
			_g_object_unref0 (_tmp4_);
		}
		goto __finally47;
		__catch47_g_error:
		{
			GError* e = NULL;
			FILE* _tmp14_;
			GError* _tmp15_;
			const gchar* _tmp16_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp14_ = stderr;
			_tmp15_ = e;
			_tmp16_ = _tmp15_->message;
			fprintf (_tmp14_, "Error setting default avatar icon: %s ", _tmp16_);
			_g_error_free0 (e);
		}
		__finally47:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			gboolean _tmp17_ = FALSE;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return _tmp17_;
		}
	}
	result = FALSE;
	return result;
}


static gboolean
___lambda285__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda285_ (self);
	return result;
}


static void
_views_album___lambda284_ (ViewsAlbum* self,
                           gint album_id)
{
	Block46Data* _data46_;
	_data46_ = g_slice_new0 (Block46Data);
	_data46_->_ref_count_ = 1;
	_data46_->self = g_object_ref (self);
	_data46_->album_id = album_id;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda285__gsource_func, block46_data_ref (_data46_), block46_data_unref);
	block46_data_unref (_data46_);
	_data46_ = NULL;
}


static void
__views_album___lambda284__services_database_updated_album_cover (ServicesDatabase* _sender,
                                                                  gint album_id,
                                                                  gpointer self)
{
	_views_album___lambda284_ ((ViewsAlbum*) self, album_id);
}


static Block47Data*
block47_data_ref (Block47Data* _data47_)
{
	g_atomic_int_inc (&_data47_->_ref_count_);
	return _data47_;
}


static void
block47_data_unref (void * _userdata_)
{
	Block47Data* _data47_;
	_data47_ = (Block47Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data47_->_ref_count_)) {
		ViewsAlbum* self;
		self = _data47_->self;
		_g_object_unref0 (_data47_->widget);
		_g_object_unref0 (self);
		g_slice_free (Block47Data, _data47_);
	}
}


static gboolean
__lambda288_ (Block47Data* _data47_)
{
	ViewsAlbum* self;
	gboolean result = FALSE;
	self = _data47_->self;
	gtk_widget_destroy (_data47_->widget);
	result = FALSE;
	return result;
}


static gboolean
___lambda288__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda288_ (self);
	return result;
}


static void
__lambda287_ (ViewsAlbum* self,
              GtkWidget* widget)
{
	Block47Data* _data47_;
	GtkWidget* _tmp0_;
	g_return_if_fail (widget != NULL);
	_data47_ = g_slice_new0 (Block47Data);
	_data47_->_ref_count_ = 1;
	_data47_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (widget);
	_g_object_unref0 (_data47_->widget);
	_data47_->widget = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda288__gsource_func, block47_data_ref (_data47_), block47_data_unref);
	block47_data_unref (_data47_);
	_data47_ = NULL;
}


static void
___lambda287__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda287_ ((ViewsAlbum*) self, widget);
}


static void
_views_album___lambda286_ (ViewsAlbum* self)
{
	GtkListBox* _tmp0_;
	_tmp0_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda287__gtk_callback, self);
}


static void
__views_album___lambda286__services_database_reset_library (ServicesDatabase* _sender,
                                                            gpointer self)
{
	_views_album___lambda286_ ((ViewsAlbum*) self);
}


static GObject *
views_album_constructor (GType type,
                         guint n_construct_properties,
                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsAlbum * self;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkButton* back_button = NULL;
	GtkButton* _tmp2_;
	GtkButton* _tmp3_;
	GtkButton* _tmp4_;
	GtkButton* _tmp5_;
	GtkButton* _tmp6_;
	GtkButton* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkButton* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkLabel* center_label = NULL;
	GtkLabel* _tmp11_;
	GtkLabel* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	GtkStyleContext* _tmp15_;
	GtkLabel* _tmp16_;
	GtkStyleContext* _tmp17_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp18_;
	GtkBox* _tmp19_;
	GtkStyleContext* _tmp20_;
	GtkBox* _tmp21_;
	GtkButton* _tmp22_;
	GtkBox* _tmp23_;
	GtkLabel* _tmp24_;
	WidgetsCover* _tmp25_;
	WidgetsCover* _tmp26_;
	WidgetsCover* _tmp27_;
	GtkLabel* _tmp28_;
	GtkLabel* _tmp29_;
	GtkLabel* _tmp30_;
	GtkLabel* _tmp31_;
	GtkLabel* _tmp32_;
	GtkStyleContext* _tmp33_;
	GtkLabel* _tmp34_;
	GtkLabel* _tmp35_;
	GtkLabel* _tmp36_;
	GtkLabel* _tmp37_;
	GtkStyleContext* _tmp38_;
	GtkLabel* _tmp39_;
	GtkLabel* _tmp40_;
	GtkLabel* _tmp41_;
	GtkLabel* _tmp42_;
	GtkLabel* _tmp43_;
	GtkLabel* _tmp44_;
	GtkLabel* _tmp45_;
	GtkLabel* _tmp46_;
	GtkLabel* _tmp47_;
	GtkLabel* _tmp48_;
	GtkLabel* _tmp49_;
	GtkLabel* _tmp50_;
	GtkStyleContext* _tmp51_;
	GtkLabel* _tmp52_;
	GtkLabel* _tmp53_;
	GtkLabel* _tmp54_;
	GtkLabel* _tmp55_;
	GtkLabel* _tmp56_;
	GtkStyleContext* _tmp57_;
	GtkLabel* _tmp58_;
	GtkButton* play_button = NULL;
	GtkButton* _tmp59_;
	GtkButton* _tmp60_;
	GtkButton* _tmp61_;
	GtkButton* _tmp62_;
	GtkButton* _tmp63_;
	GtkStyleContext* _tmp64_;
	GtkButton* _tmp65_;
	GtkStyleContext* _tmp66_;
	GtkButton* shuffle_button = NULL;
	GtkButton* _tmp67_;
	GtkButton* _tmp68_;
	GtkButton* _tmp69_;
	GtkButton* _tmp70_;
	GtkButton* _tmp71_;
	GtkStyleContext* _tmp72_;
	GtkButton* _tmp73_;
	GtkStyleContext* _tmp74_;
	GtkGrid* action_grid = NULL;
	GtkGrid* _tmp75_;
	GtkGrid* _tmp76_;
	GtkGrid* _tmp77_;
	GtkGrid* _tmp78_;
	GtkButton* _tmp79_;
	GtkGrid* _tmp80_;
	GtkButton* _tmp81_;
	GtkBox* detail_box = NULL;
	GtkBox* _tmp82_;
	GtkBox* _tmp83_;
	GtkStyleContext* _tmp84_;
	GtkBox* _tmp85_;
	GtkLabel* _tmp86_;
	GtkBox* _tmp87_;
	GtkLabel* _tmp88_;
	GtkBox* _tmp89_;
	GtkLabel* _tmp90_;
	GtkBox* _tmp91_;
	GtkLabel* _tmp92_;
	GtkBox* album_box = NULL;
	GtkBox* _tmp93_;
	GtkBox* _tmp94_;
	GtkBox* _tmp95_;
	GtkBox* _tmp96_;
	WidgetsCover* _tmp97_;
	GtkBox* _tmp98_;
	GtkBox* _tmp99_;
	GtkListBox* _tmp100_;
	GtkListBox* _tmp101_;
	GtkSeparator* separator = NULL;
	GtkSeparator* _tmp102_;
	GtkSeparator* _tmp103_;
	GtkSeparator* _tmp104_;
	GtkBox* scrolled_box = NULL;
	GtkBox* _tmp105_;
	GtkBox* _tmp106_;
	GtkBox* _tmp107_;
	GtkBox* _tmp108_;
	GtkBox* _tmp109_;
	GtkSeparator* _tmp110_;
	GtkBox* _tmp111_;
	GtkGrid* _tmp112_;
	GtkBox* _tmp113_;
	GtkListBox* _tmp114_;
	GtkScrolledWindow* main_scrolled = NULL;
	GtkScrolledWindow* _tmp115_;
	GtkScrolledWindow* _tmp116_;
	GtkScrolledWindow* _tmp117_;
	GtkScrolledWindow* _tmp118_;
	GtkScrolledWindow* _tmp119_;
	GtkBox* _tmp120_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp121_;
	GtkBox* _tmp122_;
	GtkBox* _tmp123_;
	GtkBox* _tmp124_;
	GtkBox* _tmp125_;
	GtkSeparator* _tmp126_;
	GtkSeparator* _tmp127_;
	GtkBox* _tmp128_;
	GtkScrolledWindow* _tmp129_;
	GtkBox* _tmp130_;
	GtkButton* _tmp131_;
	GtkListBox* _tmp132_;
	GtkButton* _tmp133_;
	GtkButton* _tmp134_;
	ServicesDatabase* _tmp135_;
	ServicesDatabase* _tmp136_;
	ServicesDatabase* _tmp137_;
	parent_class = G_OBJECT_CLASS (views_album_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_ALBUM, ViewsAlbum);
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_VIEW);
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp1_, "w-round");
	_tmp2_ = (GtkButton*) gtk_button_new_from_icon_name ("byte-arrow-back-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp2_);
	back_button = _tmp2_;
	_tmp3_ = back_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp3_, FALSE);
	_tmp4_ = back_button;
	g_object_set ((GtkWidget*) _tmp4_, "margin", 3, NULL);
	_tmp5_ = back_button;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp5_, 6);
	_tmp6_ = back_button;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp6_, 6);
	_tmp7_ = back_button;
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
	gtk_style_context_add_class (_tmp8_, GTK_STYLE_CLASS_FLAT);
	_tmp9_ = back_button;
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
	gtk_style_context_add_class (_tmp10_, "label-color-primary");
	_tmp11_ = (GtkLabel*) gtk_label_new (_ ("Album"));
	g_object_ref_sink (_tmp11_);
	center_label = _tmp11_;
	_tmp12_ = center_label;
	gtk_label_set_use_markup (_tmp12_, TRUE);
	_tmp13_ = center_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp13_, GTK_ALIGN_CENTER);
	_tmp14_ = center_label;
	_tmp15_ = gtk_widget_get_style_context ((GtkWidget*) _tmp14_);
	gtk_style_context_add_class (_tmp15_, "h3");
	_tmp16_ = center_label;
	_tmp17_ = gtk_widget_get_style_context ((GtkWidget*) _tmp16_);
	gtk_style_context_add_class (_tmp17_, "label-color-primary");
	_tmp18_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp18_);
	header_box = _tmp18_;
	_tmp19_ = header_box;
	_tmp20_ = gtk_widget_get_style_context ((GtkWidget*) _tmp19_);
	gtk_style_context_add_class (_tmp20_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp21_ = header_box;
	_tmp22_ = back_button;
	gtk_box_pack_start (_tmp21_, (GtkWidget*) _tmp22_, FALSE, FALSE, (guint) 0);
	_tmp23_ = header_box;
	_tmp24_ = center_label;
	gtk_box_set_center_widget (_tmp23_, (GtkWidget*) _tmp24_);
	_tmp25_ = widgets_cover_new_from_file ("/usr/share/com.github.alainm23.byte/album-default-cover.svg", 128, "album");
	g_object_ref_sink (_tmp25_);
	_g_object_unref0 (self->priv->image_cover);
	self->priv->image_cover = _tmp25_;
	_tmp26_ = self->priv->image_cover;
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_START);
	_tmp27_ = self->priv->image_cover;
	gtk_widget_set_valign ((GtkWidget*) _tmp27_, GTK_ALIGN_START);
	_tmp28_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp28_);
	_g_object_unref0 (self->priv->title_label);
	self->priv->title_label = _tmp28_;
	_tmp29_ = self->priv->title_label;
	g_object_set (_tmp29_, "wrap", TRUE, NULL);
	_tmp30_ = self->priv->title_label;
	g_object_set (_tmp30_, "wrap-mode", PANGO_WRAP_CHAR, NULL);
	_tmp31_ = self->priv->title_label;
	gtk_label_set_justify (_tmp31_, GTK_JUSTIFY_FILL);
	_tmp32_ = self->priv->title_label;
	_tmp33_ = gtk_widget_get_style_context ((GtkWidget*) _tmp32_);
	gtk_style_context_add_class (_tmp33_, "font-bold");
	_tmp34_ = self->priv->title_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp34_, GTK_ALIGN_START);
	_tmp35_ = self->priv->title_label;
	gtk_label_set_selectable (_tmp35_, TRUE);
	_tmp36_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp36_);
	_g_object_unref0 (self->priv->artist_label);
	self->priv->artist_label = _tmp36_;
	_tmp37_ = self->priv->artist_label;
	_tmp38_ = gtk_widget_get_style_context ((GtkWidget*) _tmp37_);
	gtk_style_context_add_class (_tmp38_, "font-album-artist");
	_tmp39_ = self->priv->artist_label;
	g_object_set (_tmp39_, "wrap", TRUE, NULL);
	_tmp40_ = self->priv->artist_label;
	gtk_label_set_justify (_tmp40_, GTK_JUSTIFY_FILL);
	_tmp41_ = self->priv->artist_label;
	g_object_set (_tmp41_, "wrap-mode", PANGO_WRAP_CHAR, NULL);
	_tmp42_ = self->priv->artist_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp42_, GTK_ALIGN_START);
	_tmp43_ = self->priv->artist_label;
	gtk_label_set_selectable (_tmp43_, TRUE);
	_tmp44_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp44_);
	_g_object_unref0 (self->priv->genre_label);
	self->priv->genre_label = _tmp44_;
	_tmp45_ = self->priv->genre_label;
	g_object_set (_tmp45_, "wrap", TRUE, NULL);
	_tmp46_ = self->priv->genre_label;
	g_object_set (_tmp46_, "wrap-mode", PANGO_WRAP_CHAR, NULL);
	_tmp47_ = self->priv->genre_label;
	gtk_label_set_justify (_tmp47_, GTK_JUSTIFY_FILL);
	_tmp48_ = self->priv->genre_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp48_, GTK_ALIGN_START);
	_tmp49_ = self->priv->genre_label;
	gtk_label_set_ellipsize (_tmp49_, PANGO_ELLIPSIZE_END);
	_tmp50_ = self->priv->genre_label;
	_tmp51_ = gtk_widget_get_style_context ((GtkWidget*) _tmp50_);
	gtk_style_context_add_class (_tmp51_, GTK_STYLE_CLASS_DIM_LABEL);
	_tmp52_ = self->priv->genre_label;
	gtk_label_set_selectable (_tmp52_, TRUE);
	_tmp53_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp53_);
	_g_object_unref0 (self->priv->year_label);
	self->priv->year_label = _tmp53_;
	_tmp54_ = self->priv->year_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp54_, GTK_ALIGN_START);
	_tmp55_ = self->priv->year_label;
	gtk_label_set_ellipsize (_tmp55_, PANGO_ELLIPSIZE_END);
	_tmp56_ = self->priv->year_label;
	_tmp57_ = gtk_widget_get_style_context ((GtkWidget*) _tmp56_);
	gtk_style_context_add_class (_tmp57_, GTK_STYLE_CLASS_DIM_LABEL);
	_tmp58_ = self->priv->year_label;
	gtk_label_set_selectable (_tmp58_, TRUE);
	_tmp59_ = (GtkButton*) gtk_button_new_from_icon_name ("media-playback-start-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp59_);
	play_button = _tmp59_;
	_tmp60_ = play_button;
	gtk_button_set_always_show_image (_tmp60_, TRUE);
	_tmp61_ = play_button;
	gtk_button_set_label (_tmp61_, _ ("Play"));
	_tmp62_ = play_button;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp62_, TRUE);
	_tmp63_ = play_button;
	_tmp64_ = gtk_widget_get_style_context ((GtkWidget*) _tmp63_);
	gtk_style_context_add_class (_tmp64_, "home-button");
	_tmp65_ = play_button;
	_tmp66_ = gtk_widget_get_style_context ((GtkWidget*) _tmp65_);
	gtk_style_context_add_class (_tmp66_, GTK_STYLE_CLASS_FLAT);
	_tmp67_ = (GtkButton*) gtk_button_new_from_icon_name ("media-playlist-shuffle-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp67_);
	shuffle_button = _tmp67_;
	_tmp68_ = shuffle_button;
	gtk_button_set_always_show_image (_tmp68_, TRUE);
	_tmp69_ = shuffle_button;
	gtk_button_set_label (_tmp69_, _ ("Shuffle"));
	_tmp70_ = shuffle_button;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp70_, TRUE);
	_tmp71_ = shuffle_button;
	_tmp72_ = gtk_widget_get_style_context ((GtkWidget*) _tmp71_);
	gtk_style_context_add_class (_tmp72_, "home-button");
	_tmp73_ = shuffle_button;
	_tmp74_ = gtk_widget_get_style_context ((GtkWidget*) _tmp73_);
	gtk_style_context_add_class (_tmp74_, GTK_STYLE_CLASS_FLAT);
	_tmp75_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp75_);
	action_grid = _tmp75_;
	_tmp76_ = action_grid;
	g_object_set ((GtkWidget*) _tmp76_, "margin", 6, NULL);
	_tmp77_ = action_grid;
	gtk_grid_set_column_spacing (_tmp77_, 12);
	_tmp78_ = action_grid;
	_tmp79_ = play_button;
	gtk_container_add ((GtkContainer*) _tmp78_, (GtkWidget*) _tmp79_);
	_tmp80_ = action_grid;
	_tmp81_ = shuffle_button;
	gtk_container_add ((GtkContainer*) _tmp80_, (GtkWidget*) _tmp81_);
	_tmp82_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp82_);
	detail_box = _tmp82_;
	_tmp83_ = detail_box;
	_tmp84_ = gtk_widget_get_style_context ((GtkWidget*) _tmp83_);
	gtk_style_context_add_class (_tmp84_, GRANITE_STYLE_CLASS_WELCOME);
	_tmp85_ = detail_box;
	_tmp86_ = self->priv->title_label;
	gtk_box_pack_start (_tmp85_, (GtkWidget*) _tmp86_, FALSE, FALSE, (guint) 3);
	_tmp87_ = detail_box;
	_tmp88_ = self->priv->artist_label;
	gtk_box_pack_start (_tmp87_, (GtkWidget*) _tmp88_, FALSE, FALSE, (guint) 0);
	_tmp89_ = detail_box;
	_tmp90_ = self->priv->genre_label;
	gtk_box_pack_start (_tmp89_, (GtkWidget*) _tmp90_, FALSE, FALSE, (guint) 0);
	_tmp91_ = detail_box;
	_tmp92_ = self->priv->year_label;
	gtk_box_pack_start (_tmp91_, (GtkWidget*) _tmp92_, FALSE, FALSE, (guint) 0);
	_tmp93_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
	g_object_ref_sink (_tmp93_);
	album_box = _tmp93_;
	_tmp94_ = album_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp94_, TRUE);
	_tmp95_ = album_box;
	g_object_set ((GtkWidget*) _tmp95_, "margin", 6, NULL);
	_tmp96_ = album_box;
	_tmp97_ = self->priv->image_cover;
	gtk_box_pack_start (_tmp96_, (GtkWidget*) _tmp97_, FALSE, FALSE, (guint) 0);
	_tmp98_ = album_box;
	_tmp99_ = detail_box;
	gtk_box_pack_start (_tmp98_, (GtkWidget*) _tmp99_, FALSE, FALSE, (guint) 0);
	_tmp100_ = (GtkListBox*) gtk_list_box_new ();
	g_object_ref_sink (_tmp100_);
	_g_object_unref0 (self->priv->listbox);
	self->priv->listbox = _tmp100_;
	_tmp101_ = self->priv->listbox;
	g_object_set ((GtkWidget*) _tmp101_, "expand", TRUE, NULL);
	_tmp102_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp102_);
	separator = _tmp102_;
	_tmp103_ = separator;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp103_, 6);
	_tmp104_ = separator;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp104_, 6);
	_tmp105_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp105_);
	scrolled_box = _tmp105_;
	_tmp106_ = scrolled_box;
	g_object_set ((GtkWidget*) _tmp106_, "expand", TRUE, NULL);
	_tmp107_ = scrolled_box;
	_tmp108_ = album_box;
	gtk_box_pack_start (_tmp107_, (GtkWidget*) _tmp108_, FALSE, FALSE, (guint) 0);
	_tmp109_ = scrolled_box;
	_tmp110_ = separator;
	gtk_box_pack_start (_tmp109_, (GtkWidget*) _tmp110_, FALSE, FALSE, (guint) 0);
	_tmp111_ = scrolled_box;
	_tmp112_ = action_grid;
	gtk_box_pack_start (_tmp111_, (GtkWidget*) _tmp112_, FALSE, FALSE, (guint) 0);
	_tmp113_ = scrolled_box;
	_tmp114_ = self->priv->listbox;
	gtk_box_pack_start (_tmp113_, (GtkWidget*) _tmp114_, TRUE, TRUE, (guint) 0);
	_tmp115_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
	g_object_ref_sink (_tmp115_);
	main_scrolled = _tmp115_;
	_tmp116_ = main_scrolled;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp116_, 48);
	_tmp117_ = main_scrolled;
	g_object_set (_tmp117_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
	_tmp118_ = main_scrolled;
	g_object_set ((GtkWidget*) _tmp118_, "expand", TRUE, NULL);
	_tmp119_ = main_scrolled;
	_tmp120_ = scrolled_box;
	gtk_container_add ((GtkContainer*) _tmp119_, (GtkWidget*) _tmp120_);
	_tmp121_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp121_);
	main_box = _tmp121_;
	_tmp122_ = main_box;
	g_object_set ((GtkWidget*) _tmp122_, "expand", TRUE, NULL);
	_tmp123_ = main_box;
	_tmp124_ = header_box;
	gtk_box_pack_start (_tmp123_, (GtkWidget*) _tmp124_, FALSE, FALSE, (guint) 0);
	_tmp125_ = main_box;
	_tmp126_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp126_);
	_tmp127_ = _tmp126_;
	gtk_box_pack_start (_tmp125_, (GtkWidget*) _tmp127_, FALSE, FALSE, (guint) 0);
	_g_object_unref0 (_tmp127_);
	_tmp128_ = main_box;
	_tmp129_ = main_scrolled;
	gtk_box_pack_start (_tmp128_, (GtkWidget*) _tmp129_, TRUE, TRUE, (guint) 0);
	_tmp130_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp130_);
	_tmp131_ = back_button;
	g_signal_connect_object (_tmp131_, "clicked", (GCallback) __views_album___lambda278__gtk_button_clicked, self, 0);
	_tmp132_ = self->priv->listbox;
	g_signal_connect_object (_tmp132_, "row-activated", (GCallback) __views_album___lambda279__gtk_list_box_row_activated, self, 0);
	_tmp133_ = play_button;
	g_signal_connect_object (_tmp133_, "clicked", (GCallback) __views_album___lambda280__gtk_button_clicked, self, 0);
	_tmp134_ = shuffle_button;
	g_signal_connect_object (_tmp134_, "clicked", (GCallback) __views_album___lambda281__gtk_button_clicked, self, 0);
	_tmp135_ = byte_database;
	g_signal_connect_object (_tmp135_, "adden-new-track", (GCallback) __views_album___lambda282__services_database_adden_new_track, self, 0);
	_tmp136_ = byte_database;
	g_signal_connect_object (_tmp136_, "updated-album-cover", (GCallback) __views_album___lambda284__services_database_updated_album_cover, self, 0);
	_tmp137_ = byte_database;
	g_signal_connect_object (_tmp137_, "reset-library", (GCallback) __views_album___lambda286__services_database_reset_library, self, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (main_scrolled);
	_g_object_unref0 (scrolled_box);
	_g_object_unref0 (separator);
	_g_object_unref0 (album_box);
	_g_object_unref0 (detail_box);
	_g_object_unref0 (action_grid);
	_g_object_unref0 (shuffle_button);
	_g_object_unref0 (play_button);
	_g_object_unref0 (header_box);
	_g_object_unref0 (center_label);
	_g_object_unref0 (back_button);
	return obj;
}


static void
views_album_class_init (ViewsAlbumClass * klass)
{
	views_album_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (ViewsAlbumPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_views_album_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_views_album_set_property;
	G_OBJECT_CLASS (klass)->constructor = views_album_constructor;
	G_OBJECT_CLASS (klass)->finalize = views_album_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_ALBUM_BACK_PAGE_PROPERTY, views_album_properties[VIEWS_ALBUM_BACK_PAGE_PROPERTY] = g_param_spec_string ("back-page", "back-page", "back-page", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_ALBUM_ALBUM_PROPERTY, views_album_properties[VIEWS_ALBUM_ALBUM_PROPERTY] = g_param_spec_object ("album", "album", "album", OBJECTS_TYPE_ALBUM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	views_album_signals[VIEWS_ALBUM_GO_BACK_SIGNAL] = g_signal_new ("go-back", VIEWS_TYPE_ALBUM, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
}


static void
views_album_instance_init (ViewsAlbum * self)
{
	self->priv = VIEWS_ALBUM_GET_PRIVATE (self);
}


static void
views_album_finalize (GObject * obj)
{
	ViewsAlbum * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_ALBUM, ViewsAlbum);
	_g_object_unref0 (self->priv->title_label);
	_g_object_unref0 (self->priv->artist_label);
	_g_object_unref0 (self->priv->genre_label);
	_g_object_unref0 (self->priv->year_label);
	_g_object_unref0 (self->priv->listbox);
	_g_free0 (self->priv->cover_path);
	_g_object_unref0 (self->priv->image_cover);
	_g_free0 (self->priv->_back_page);
	_g_object_unref0 (self->priv->all_tracks);
	_g_object_unref0 (self->_album);
	G_OBJECT_CLASS (views_album_parent_class)->finalize (obj);
}


GType
views_album_get_type (void)
{
	static volatile gsize views_album_type_id__volatile = 0;
	if (g_once_init_enter (&views_album_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsAlbumClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_album_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsAlbum), 0, (GInstanceInitFunc) views_album_instance_init, NULL };
		GType views_album_type_id;
		views_album_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsAlbum", &g_define_type_info, 0);
		g_once_init_leave (&views_album_type_id__volatile, views_album_type_id);
	}
	return views_album_type_id__volatile;
}


static void
_vala_views_album_get_property (GObject * object,
                                guint property_id,
                                GValue * value,
                                GParamSpec * pspec)
{
	ViewsAlbum * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_ALBUM, ViewsAlbum);
	switch (property_id) {
		case VIEWS_ALBUM_BACK_PAGE_PROPERTY:
		g_value_set_string (value, views_album_get_back_page (self));
		break;
		case VIEWS_ALBUM_ALBUM_PROPERTY:
		g_value_set_object (value, views_album_get_album (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_views_album_set_property (GObject * object,
                                guint property_id,
                                const GValue * value,
                                GParamSpec * pspec)
{
	ViewsAlbum * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_ALBUM, ViewsAlbum);
	switch (property_id) {
		case VIEWS_ALBUM_BACK_PAGE_PROPERTY:
		views_album_set_back_page (self, g_value_get_string (value));
		break;
		case VIEWS_ALBUM_ALBUM_PROPERTY:
		views_album_set_album (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



