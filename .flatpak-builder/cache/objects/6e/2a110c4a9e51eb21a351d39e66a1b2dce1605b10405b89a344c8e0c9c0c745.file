/* Playlist.c generated by valac 0.40.11, the Vala compiler
 * generated from Playlist.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>


#define OBJECTS_TYPE_PLAYLIST (objects_playlist_get_type ())
#define OBJECTS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylist))
#define OBJECTS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))
#define OBJECTS_IS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_IS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))

typedef struct _ObjectsPlaylist ObjectsPlaylist;
typedef struct _ObjectsPlaylistClass ObjectsPlaylistClass;
typedef struct _ObjectsPlaylistPrivate ObjectsPlaylistPrivate;
enum  {
	OBJECTS_PLAYLIST_0_PROPERTY,
	OBJECTS_PLAYLIST_NUM_PROPERTIES
};
static GParamSpec* objects_playlist_properties[OBJECTS_PLAYLIST_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

struct _ObjectsPlaylist {
	GObject parent_instance;
	ObjectsPlaylistPrivate * priv;
	gint id;
	gchar* title;
	gchar* note;
	gchar* date_added;
	gchar* date_updated;
	gint num_tracks;
};

struct _ObjectsPlaylistClass {
	GObjectClass parent_class;
};


static gpointer objects_playlist_parent_class = NULL;

GType objects_playlist_get_type (void) G_GNUC_CONST;
ObjectsPlaylist* objects_playlist_new (gint id,
                                       const gchar* title,
                                       const gchar* note,
                                       const gchar* date_added,
                                       const gchar* date_updated,
                                       gint num_tracks);
ObjectsPlaylist* objects_playlist_construct (GType object_type,
                                             gint id,
                                             const gchar* title,
                                             const gchar* note,
                                             const gchar* date_added,
                                             const gchar* date_updated,
                                             gint num_tracks);
static void objects_playlist_finalize (GObject * obj);


ObjectsPlaylist*
objects_playlist_construct (GType object_type,
                            gint id,
                            const gchar* title,
                            const gchar* note,
                            const gchar* date_added,
                            const gchar* date_updated,
                            gint num_tracks)
{
	ObjectsPlaylist * self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (note != NULL, NULL);
	g_return_val_if_fail (date_added != NULL, NULL);
	g_return_val_if_fail (date_updated != NULL, NULL);
	self = (ObjectsPlaylist*) g_object_new (object_type, NULL);
	self->id = id;
	_tmp0_ = g_strdup (title);
	_g_free0 (self->title);
	self->title = _tmp0_;
	_tmp1_ = g_strdup (note);
	_g_free0 (self->note);
	self->note = _tmp1_;
	_tmp2_ = g_strdup (date_added);
	_g_free0 (self->date_added);
	self->date_added = _tmp2_;
	_tmp3_ = g_strdup (date_updated);
	_g_free0 (self->date_updated);
	self->date_updated = _tmp3_;
	self->num_tracks = num_tracks;
	return self;
}


ObjectsPlaylist*
objects_playlist_new (gint id,
                      const gchar* title,
                      const gchar* note,
                      const gchar* date_added,
                      const gchar* date_updated,
                      gint num_tracks)
{
	return objects_playlist_construct (OBJECTS_TYPE_PLAYLIST, id, title, note, date_added, date_updated, num_tracks);
}


static void
objects_playlist_class_init (ObjectsPlaylistClass * klass)
{
	objects_playlist_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = objects_playlist_finalize;
}


static void
objects_playlist_instance_init (ObjectsPlaylist * self)
{
}


static void
objects_playlist_finalize (GObject * obj)
{
	ObjectsPlaylist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_PLAYLIST, ObjectsPlaylist);
	_g_free0 (self->title);
	_g_free0 (self->note);
	_g_free0 (self->date_added);
	_g_free0 (self->date_updated);
	G_OBJECT_CLASS (objects_playlist_parent_class)->finalize (obj);
}


GType
objects_playlist_get_type (void)
{
	static volatile gsize objects_playlist_type_id__volatile = 0;
	if (g_once_init_enter (&objects_playlist_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ObjectsPlaylistClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_playlist_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsPlaylist), 0, (GInstanceInitFunc) objects_playlist_instance_init, NULL };
		GType objects_playlist_type_id;
		objects_playlist_type_id = g_type_register_static (G_TYPE_OBJECT, "ObjectsPlaylist", &g_define_type_info, 0);
		g_once_init_leave (&objects_playlist_type_id__volatile, objects_playlist_type_id);
	}
	return objects_playlist_type_id__volatile;
}



