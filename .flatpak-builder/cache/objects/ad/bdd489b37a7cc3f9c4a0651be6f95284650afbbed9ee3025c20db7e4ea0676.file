/* Home.c generated by valac 0.40.11, the Vala compiler
 * generated from Home.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <granite.h>
#include <gio/gio.h>


#define VIEWS_TYPE_HOME (views_home_get_type ())
#define VIEWS_HOME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_HOME, ViewsHome))
#define VIEWS_HOME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_HOME, ViewsHomeClass))
#define VIEWS_IS_HOME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_HOME))
#define VIEWS_IS_HOME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_HOME))
#define VIEWS_HOME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_HOME, ViewsHomeClass))

typedef struct _ViewsHome ViewsHome;
typedef struct _ViewsHomeClass ViewsHomeClass;
typedef struct _ViewsHomePrivate ViewsHomePrivate;

#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;
enum  {
	VIEWS_HOME_0_PROPERTY,
	VIEWS_HOME_NUM_PROPERTIES
};
static GParamSpec* views_home_properties[VIEWS_HOME_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_TRACK_ROW (widgets_track_row_get_type ())
#define WIDGETS_TRACK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRow))
#define WIDGETS_TRACK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRowClass))
#define WIDGETS_IS_TRACK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TRACK_ROW))
#define WIDGETS_IS_TRACK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TRACK_ROW))
#define WIDGETS_TRACK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRowClass))

typedef struct _WidgetsTrackRow WidgetsTrackRow;
typedef struct _WidgetsTrackRowClass WidgetsTrackRowClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define WIDGETS_TYPE_HOME_BUTTON (widgets_home_button_get_type ())
#define WIDGETS_HOME_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_HOME_BUTTON, WidgetsHomeButton))
#define WIDGETS_HOME_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_HOME_BUTTON, WidgetsHomeButtonClass))
#define WIDGETS_IS_HOME_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_HOME_BUTTON))
#define WIDGETS_IS_HOME_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_HOME_BUTTON))
#define WIDGETS_HOME_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_HOME_BUTTON, WidgetsHomeButtonClass))

typedef struct _WidgetsHomeButton WidgetsHomeButton;
typedef struct _WidgetsHomeButtonClass WidgetsHomeButtonClass;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _Block40Data Block40Data;
typedef struct _Block41Data Block41Data;
enum  {
	VIEWS_HOME_GO_ALBUMS_VIEW_SIGNAL,
	VIEWS_HOME_GO_TRACKS_VIEW_SIGNAL,
	VIEWS_HOME_GO_ARTISTS_VIEW_SIGNAL,
	VIEWS_HOME_GO_RADIOS_VIEW_SIGNAL,
	VIEWS_HOME_GO_PLAYLISTS_VIEW_SIGNAL,
	VIEWS_HOME_GO_FAVORITES_VIEW_SIGNAL,
	VIEWS_HOME_NUM_SIGNALS
};
static guint views_home_signals[VIEWS_HOME_NUM_SIGNALS] = {0};

struct _ViewsHome {
	GtkEventBox parent_instance;
	ViewsHomePrivate * priv;
};

struct _ViewsHomeClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsHomePrivate {
	GtkListBox* listbox;
	GeeArrayList* all_tracks;
};

struct _Block40Data {
	int _ref_count_;
	ViewsHome* self;
	ObjectsTrack* track;
};

struct _Block41Data {
	int _ref_count_;
	ViewsHome* self;
	GtkWidget* widget;
};


static gpointer views_home_parent_class = NULL;
extern ServicesDatabase* byte_database;
extern Utils* byte_utils;
extern GSettings* byte_settings;

GType views_home_get_type (void) G_GNUC_CONST;
GType objects_track_get_type (void) G_GNUC_CONST;
#define VIEWS_HOME_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_HOME, ViewsHomePrivate))
ViewsHome* views_home_new (void);
ViewsHome* views_home_construct (GType object_type);
void views_home_add_all_tracks (ViewsHome* self);
GType widgets_track_row_get_type (void) G_GNUC_CONST;
WidgetsTrackRow* widgets_track_row_new (ObjectsTrack* track);
WidgetsTrackRow* widgets_track_row_construct (GType object_type,
                                              ObjectsTrack* track);
static GObject * views_home_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties);
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_tracks_recently_added (ServicesDatabase* self);
GType widgets_home_button_get_type (void) G_GNUC_CONST;
WidgetsHomeButton* widgets_home_button_new (const gchar* name,
                                            const gchar* icon);
WidgetsHomeButton* widgets_home_button_construct (GType object_type,
                                                  const gchar* name,
                                                  const gchar* icon);
static void _views_home___lambda98_ (ViewsHome* self);
static void __views_home___lambda98__gtk_button_clicked (GtkButton* _sender,
                                                  gpointer self);
static void _views_home___lambda99_ (ViewsHome* self);
static void __views_home___lambda99__gtk_button_clicked (GtkButton* _sender,
                                                  gpointer self);
static void _views_home___lambda100_ (ViewsHome* self);
static void __views_home___lambda100__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self);
static void _views_home___lambda101_ (ViewsHome* self);
static void __views_home___lambda101__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self);
static void _views_home___lambda102_ (ViewsHome* self);
static void __views_home___lambda102__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self);
static void _views_home___lambda103_ (ViewsHome* self);
static void __views_home___lambda103__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self);
static void _views_home___lambda104_ (ViewsHome* self,
                               GtkListBoxRow* row);
GType utils_get_type (void) G_GNUC_CONST;
void utils_set_items (Utils* self,
                      GeeArrayList* all_items,
                      gboolean shuffle_mode,
                      ObjectsTrack* track);
ObjectsTrack* widgets_track_row_get_track (WidgetsTrackRow* self);
static void __views_home___lambda104__gtk_list_box_row_activated (GtkListBox* _sender,
                                                           GtkListBoxRow* row,
                                                           gpointer self);
static void _views_home___lambda105_ (ViewsHome* self,
                               ObjectsTrack* track);
static Block40Data* block40_data_ref (Block40Data* _data40_);
static void block40_data_unref (void * _userdata_);
static gboolean __lambda106_ (Block40Data* _data40_);
static gboolean ___lambda106__gsource_func (gpointer self);
static void __views_home___lambda105__services_database_adden_new_track (ServicesDatabase* _sender,
                                                                  ObjectsTrack* track,
                                                                  gpointer self);
static void _views_home___lambda107_ (ViewsHome* self);
static void __lambda108_ (ViewsHome* self,
                   GtkWidget* widget);
static Block41Data* block41_data_ref (Block41Data* _data41_);
static void block41_data_unref (void * _userdata_);
static gboolean __lambda109_ (Block41Data* _data41_);
static gboolean ___lambda109__gsource_func (gpointer self);
static void ___lambda108__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __views_home___lambda107__services_database_reset_library (ServicesDatabase* _sender,
                                                                gpointer self);
static void views_home_finalize (GObject * obj);


ViewsHome*
views_home_construct (GType object_type)
{
	ViewsHome * self = NULL;
	self = (ViewsHome*) g_object_new (object_type, NULL);
	return self;
}


ViewsHome*
views_home_new (void)
{
	return views_home_construct (VIEWS_TYPE_HOME);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


void
views_home_add_all_tracks (ViewsHome* self)
{
	g_return_if_fail (self != NULL);
	{
		GeeArrayList* _track_list = NULL;
		GeeArrayList* _tmp0_;
		GeeArrayList* _tmp1_;
		gint _track_size = 0;
		GeeArrayList* _tmp2_;
		gint _tmp3_;
		gint _tmp4_;
		gint _track_index = 0;
		_tmp0_ = self->priv->all_tracks;
		_tmp1_ = _g_object_ref0 (_tmp0_);
		_track_list = _tmp1_;
		_tmp2_ = _track_list;
		_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
		_tmp4_ = _tmp3_;
		_track_size = _tmp4_;
		_track_index = -1;
		while (TRUE) {
			gint _tmp5_;
			gint _tmp6_;
			gint _tmp7_;
			ObjectsTrack* track = NULL;
			GeeArrayList* _tmp8_;
			gint _tmp9_;
			gpointer _tmp10_;
			WidgetsTrackRow* row = NULL;
			ObjectsTrack* _tmp11_;
			WidgetsTrackRow* _tmp12_;
			GtkListBox* _tmp13_;
			WidgetsTrackRow* _tmp14_;
			GtkListBox* _tmp15_;
			_tmp5_ = _track_index;
			_track_index = _tmp5_ + 1;
			_tmp6_ = _track_index;
			_tmp7_ = _track_size;
			if (!(_tmp6_ < _tmp7_)) {
				break;
			}
			_tmp8_ = _track_list;
			_tmp9_ = _track_index;
			_tmp10_ = gee_abstract_list_get ((GeeAbstractList*) _tmp8_, _tmp9_);
			track = (ObjectsTrack*) _tmp10_;
			_tmp11_ = track;
			_tmp12_ = widgets_track_row_new (_tmp11_);
			g_object_ref_sink (_tmp12_);
			row = _tmp12_;
			_tmp13_ = self->priv->listbox;
			_tmp14_ = row;
			gtk_container_add ((GtkContainer*) _tmp13_, (GtkWidget*) _tmp14_);
			_tmp15_ = self->priv->listbox;
			gtk_widget_show_all ((GtkWidget*) _tmp15_);
			_g_object_unref0 (row);
			_g_object_unref0 (track);
		}
		_g_object_unref0 (_track_list);
	}
}


static void
_views_home___lambda98_ (ViewsHome* self)
{
	g_signal_emit (self, views_home_signals[VIEWS_HOME_GO_ALBUMS_VIEW_SIGNAL], 0);
}


static void
__views_home___lambda98__gtk_button_clicked (GtkButton* _sender,
                                             gpointer self)
{
	_views_home___lambda98_ ((ViewsHome*) self);
}


static void
_views_home___lambda99_ (ViewsHome* self)
{
	g_signal_emit (self, views_home_signals[VIEWS_HOME_GO_TRACKS_VIEW_SIGNAL], 0);
}


static void
__views_home___lambda99__gtk_button_clicked (GtkButton* _sender,
                                             gpointer self)
{
	_views_home___lambda99_ ((ViewsHome*) self);
}


static void
_views_home___lambda100_ (ViewsHome* self)
{
	g_signal_emit (self, views_home_signals[VIEWS_HOME_GO_ARTISTS_VIEW_SIGNAL], 0);
}


static void
__views_home___lambda100__gtk_button_clicked (GtkButton* _sender,
                                              gpointer self)
{
	_views_home___lambda100_ ((ViewsHome*) self);
}


static void
_views_home___lambda101_ (ViewsHome* self)
{
	g_signal_emit (self, views_home_signals[VIEWS_HOME_GO_RADIOS_VIEW_SIGNAL], 0);
}


static void
__views_home___lambda101__gtk_button_clicked (GtkButton* _sender,
                                              gpointer self)
{
	_views_home___lambda101_ ((ViewsHome*) self);
}


static void
_views_home___lambda102_ (ViewsHome* self)
{
	g_signal_emit (self, views_home_signals[VIEWS_HOME_GO_PLAYLISTS_VIEW_SIGNAL], 0);
}


static void
__views_home___lambda102__gtk_button_clicked (GtkButton* _sender,
                                              gpointer self)
{
	_views_home___lambda102_ ((ViewsHome*) self);
}


static void
_views_home___lambda103_ (ViewsHome* self)
{
	g_signal_emit (self, views_home_signals[VIEWS_HOME_GO_FAVORITES_VIEW_SIGNAL], 0);
}


static void
__views_home___lambda103__gtk_button_clicked (GtkButton* _sender,
                                              gpointer self)
{
	_views_home___lambda103_ ((ViewsHome*) self);
}


static void
_views_home___lambda104_ (ViewsHome* self,
                          GtkListBoxRow* row)
{
	WidgetsTrackRow* item = NULL;
	WidgetsTrackRow* _tmp0_;
	Utils* _tmp1_;
	GeeArrayList* _tmp2_;
	GSettings* _tmp3_;
	WidgetsTrackRow* _tmp4_;
	ObjectsTrack* _tmp5_;
	ObjectsTrack* _tmp6_;
	g_return_if_fail (row != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TRACK_ROW) ? ((WidgetsTrackRow*) row) : NULL);
	item = _tmp0_;
	_tmp1_ = byte_utils;
	_tmp2_ = self->priv->all_tracks;
	_tmp3_ = byte_settings;
	_tmp4_ = item;
	_tmp5_ = widgets_track_row_get_track (_tmp4_);
	_tmp6_ = _tmp5_;
	utils_set_items (_tmp1_, _tmp2_, g_settings_get_boolean (_tmp3_, "shuffle-mode"), _tmp6_);
	_g_object_unref0 (item);
}


static void
__views_home___lambda104__gtk_list_box_row_activated (GtkListBox* _sender,
                                                      GtkListBoxRow* row,
                                                      gpointer self)
{
	_views_home___lambda104_ ((ViewsHome*) self, row);
}


static Block40Data*
block40_data_ref (Block40Data* _data40_)
{
	g_atomic_int_inc (&_data40_->_ref_count_);
	return _data40_;
}


static void
block40_data_unref (void * _userdata_)
{
	Block40Data* _data40_;
	_data40_ = (Block40Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data40_->_ref_count_)) {
		ViewsHome* self;
		self = _data40_->self;
		_g_object_unref0 (_data40_->track);
		_g_object_unref0 (self);
		g_slice_free (Block40Data, _data40_);
	}
}


static gboolean
__lambda106_ (Block40Data* _data40_)
{
	ViewsHome* self;
	gboolean result = FALSE;
	self = _data40_->self;
	if (_data40_->track != NULL) {
		WidgetsTrackRow* row = NULL;
		WidgetsTrackRow* _tmp0_;
		GtkListBox* _tmp1_;
		WidgetsTrackRow* _tmp2_;
		GeeArrayList* _tmp3_;
		GtkListBox* _tmp4_;
		GeeArrayList* _tmp5_;
		gint _tmp6_;
		gint _tmp7_;
		_tmp0_ = widgets_track_row_new (_data40_->track);
		g_object_ref_sink (_tmp0_);
		row = _tmp0_;
		_tmp1_ = self->priv->listbox;
		_tmp2_ = row;
		gtk_list_box_insert (_tmp1_, (GtkWidget*) _tmp2_, 0);
		_tmp3_ = self->priv->all_tracks;
		gee_abstract_list_insert ((GeeAbstractList*) _tmp3_, 0, _data40_->track);
		_tmp4_ = self->priv->listbox;
		gtk_widget_show_all ((GtkWidget*) _tmp4_);
		_tmp5_ = self->priv->all_tracks;
		_tmp6_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp5_);
		_tmp7_ = _tmp6_;
		if (_tmp7_ > 100) {
			GeeArrayList* _tmp8_;
			gpointer _tmp9_;
			ObjectsTrack* _tmp10_;
			GtkListBoxRow* _row = NULL;
			GtkListBox* _tmp11_;
			GtkListBoxRow* _tmp12_;
			GtkListBoxRow* _tmp13_;
			GtkListBoxRow* _tmp14_;
			_tmp8_ = self->priv->all_tracks;
			_tmp9_ = gee_abstract_list_remove_at ((GeeAbstractList*) _tmp8_, 100);
			_tmp10_ = (ObjectsTrack*) _tmp9_;
			_g_object_unref0 (_tmp10_);
			_tmp11_ = self->priv->listbox;
			_tmp12_ = gtk_list_box_get_row_at_index (_tmp11_, 100);
			_tmp13_ = _g_object_ref0 (_tmp12_);
			_row = _tmp13_;
			_tmp14_ = _row;
			gtk_widget_destroy ((GtkWidget*) _tmp14_);
			_g_object_unref0 (_row);
		}
		_g_object_unref0 (row);
	}
	result = FALSE;
	return result;
}


static gboolean
___lambda106__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda106_ (self);
	return result;
}


static void
_views_home___lambda105_ (ViewsHome* self,
                          ObjectsTrack* track)
{
	Block40Data* _data40_;
	ObjectsTrack* _tmp0_;
	_data40_ = g_slice_new0 (Block40Data);
	_data40_->_ref_count_ = 1;
	_data40_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (track);
	_g_object_unref0 (_data40_->track);
	_data40_->track = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda106__gsource_func, block40_data_ref (_data40_), block40_data_unref);
	block40_data_unref (_data40_);
	_data40_ = NULL;
}


static void
__views_home___lambda105__services_database_adden_new_track (ServicesDatabase* _sender,
                                                             ObjectsTrack* track,
                                                             gpointer self)
{
	_views_home___lambda105_ ((ViewsHome*) self, track);
}


static Block41Data*
block41_data_ref (Block41Data* _data41_)
{
	g_atomic_int_inc (&_data41_->_ref_count_);
	return _data41_;
}


static void
block41_data_unref (void * _userdata_)
{
	Block41Data* _data41_;
	_data41_ = (Block41Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data41_->_ref_count_)) {
		ViewsHome* self;
		self = _data41_->self;
		_g_object_unref0 (_data41_->widget);
		_g_object_unref0 (self);
		g_slice_free (Block41Data, _data41_);
	}
}


static gboolean
__lambda109_ (Block41Data* _data41_)
{
	ViewsHome* self;
	gboolean result = FALSE;
	self = _data41_->self;
	gtk_widget_destroy (_data41_->widget);
	result = FALSE;
	return result;
}


static gboolean
___lambda109__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda109_ (self);
	return result;
}


static void
__lambda108_ (ViewsHome* self,
              GtkWidget* widget)
{
	Block41Data* _data41_;
	GtkWidget* _tmp0_;
	g_return_if_fail (widget != NULL);
	_data41_ = g_slice_new0 (Block41Data);
	_data41_->_ref_count_ = 1;
	_data41_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (widget);
	_g_object_unref0 (_data41_->widget);
	_data41_->widget = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda109__gsource_func, block41_data_ref (_data41_), block41_data_unref);
	block41_data_unref (_data41_);
	_data41_ = NULL;
}


static void
___lambda108__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda108_ ((ViewsHome*) self, widget);
}


static void
_views_home___lambda107_ (ViewsHome* self)
{
	GtkListBox* _tmp0_;
	_tmp0_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda108__gtk_callback, self);
}


static void
__views_home___lambda107__services_database_reset_library (ServicesDatabase* _sender,
                                                           gpointer self)
{
	_views_home___lambda107_ ((ViewsHome*) self);
}


static GObject *
views_home_constructor (GType type,
                        guint n_construct_properties,
                        GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsHome * self;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	ServicesDatabase* _tmp2_;
	GeeArrayList* _tmp3_;
	GtkLabel* library_label = NULL;
	gchar* _tmp4_;
	gchar* _tmp5_;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkLabel* _tmp8_;
	GtkStyleContext* _tmp9_;
	GtkLabel* _tmp10_;
	GtkStyleContext* _tmp11_;
	GtkLabel* _tmp12_;
	GtkStyleContext* _tmp13_;
	GtkLabel* _tmp14_;
	GtkLabel* _tmp15_;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkLabel* recently_added_label = NULL;
	gchar* _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	gchar* _tmp23_;
	GtkLabel* _tmp24_;
	GtkLabel* _tmp25_;
	GtkLabel* _tmp26_;
	GtkStyleContext* _tmp27_;
	GtkLabel* _tmp28_;
	GtkStyleContext* _tmp29_;
	GtkLabel* _tmp30_;
	GtkLabel* _tmp31_;
	GtkLabel* _tmp32_;
	WidgetsHomeButton* playlists_button = NULL;
	WidgetsHomeButton* _tmp33_;
	WidgetsHomeButton* albums_button = NULL;
	WidgetsHomeButton* _tmp34_;
	WidgetsHomeButton* songs_button = NULL;
	WidgetsHomeButton* _tmp35_;
	WidgetsHomeButton* artists_button = NULL;
	WidgetsHomeButton* _tmp36_;
	WidgetsHomeButton* radios_button = NULL;
	WidgetsHomeButton* _tmp37_;
	WidgetsHomeButton* favorites_button = NULL;
	WidgetsHomeButton* _tmp38_;
	GtkListBox* _tmp39_;
	GtkListBox* _tmp40_;
	GtkScrolledWindow* tracks_scrolled = NULL;
	GtkScrolledWindow* _tmp41_;
	GtkScrolledWindow* _tmp42_;
	GtkScrolledWindow* _tmp43_;
	GtkScrolledWindow* _tmp44_;
	GtkScrolledWindow* _tmp45_;
	GtkScrolledWindow* _tmp46_;
	GtkListBox* _tmp47_;
	GtkGrid* items_grid = NULL;
	GtkGrid* _tmp48_;
	GtkGrid* _tmp49_;
	GtkGrid* _tmp50_;
	GtkGrid* _tmp51_;
	GtkGrid* _tmp52_;
	GtkGrid* _tmp53_;
	GtkGrid* _tmp54_;
	GtkStyleContext* _tmp55_;
	GtkGrid* _tmp56_;
	WidgetsHomeButton* _tmp57_;
	GtkGrid* _tmp58_;
	WidgetsHomeButton* _tmp59_;
	GtkGrid* _tmp60_;
	WidgetsHomeButton* _tmp61_;
	GtkGrid* _tmp62_;
	WidgetsHomeButton* _tmp63_;
	GtkGrid* _tmp64_;
	WidgetsHomeButton* _tmp65_;
	GtkGrid* _tmp66_;
	WidgetsHomeButton* _tmp67_;
	GtkBox* library_box = NULL;
	GtkBox* _tmp68_;
	GtkBox* _tmp69_;
	GtkBox* _tmp70_;
	GtkBox* _tmp71_;
	GtkLabel* _tmp72_;
	GtkBox* _tmp73_;
	GtkGrid* _tmp74_;
	GtkBox* _tmp75_;
	GtkLabel* _tmp76_;
	GtkBox* _tmp77_;
	GtkScrolledWindow* _tmp78_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp79_;
	GtkBox* _tmp80_;
	GtkBox* _tmp81_;
	GtkBox* _tmp82_;
	WidgetsHomeButton* _tmp83_;
	WidgetsHomeButton* _tmp84_;
	WidgetsHomeButton* _tmp85_;
	WidgetsHomeButton* _tmp86_;
	WidgetsHomeButton* _tmp87_;
	WidgetsHomeButton* _tmp88_;
	GtkListBox* _tmp89_;
	ServicesDatabase* _tmp90_;
	ServicesDatabase* _tmp91_;
	parent_class = G_OBJECT_CLASS (views_home_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_HOME, ViewsHome);
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_VIEW);
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp1_, "w-round");
	_tmp2_ = byte_database;
	_tmp3_ = services_database_get_tracks_recently_added (_tmp2_);
	_g_object_unref0 (self->priv->all_tracks);
	self->priv->all_tracks = _tmp3_;
	_tmp4_ = g_strdup_printf ("<b>%s</b>", _ ("Library"));
	_tmp5_ = _tmp4_;
	_tmp6_ = (GtkLabel*) gtk_label_new (_tmp5_);
	g_object_ref_sink (_tmp6_);
	_tmp7_ = _tmp6_;
	_g_free0 (_tmp5_);
	library_label = _tmp7_;
	_tmp8_ = library_label;
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
	gtk_style_context_add_class (_tmp9_, "font-bold");
	_tmp10_ = library_label;
	_tmp11_ = gtk_widget_get_style_context ((GtkWidget*) _tmp10_);
	gtk_style_context_add_class (_tmp11_, "h3");
	_tmp12_ = library_label;
	_tmp13_ = gtk_widget_get_style_context ((GtkWidget*) _tmp12_);
	gtk_style_context_add_class (_tmp13_, "label-color-primary");
	_tmp14_ = library_label;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp14_, 9);
	_tmp15_ = library_label;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp15_, 6);
	_tmp16_ = library_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp16_, GTK_ALIGN_START);
	_tmp17_ = library_label;
	gtk_label_set_use_markup (_tmp17_, TRUE);
	_tmp18_ = g_strdup_printf ("<b>%s</b>", _ ("Recently added"));
	_tmp19_ = _tmp18_;
	_tmp20_ = g_strdup_printf (" <small>%s</small>", _ ("(last 100)"));
	_tmp21_ = _tmp20_;
	_tmp22_ = g_strconcat (_tmp19_, _tmp21_, NULL);
	_tmp23_ = _tmp22_;
	_tmp24_ = (GtkLabel*) gtk_label_new (_tmp23_);
	g_object_ref_sink (_tmp24_);
	_tmp25_ = _tmp24_;
	_g_free0 (_tmp23_);
	_g_free0 (_tmp21_);
	_g_free0 (_tmp19_);
	recently_added_label = _tmp25_;
	_tmp26_ = recently_added_label;
	_tmp27_ = gtk_widget_get_style_context ((GtkWidget*) _tmp26_);
	gtk_style_context_add_class (_tmp27_, "label-color-primary");
	_tmp28_ = recently_added_label;
	_tmp29_ = gtk_widget_get_style_context ((GtkWidget*) _tmp28_);
	gtk_style_context_add_class (_tmp29_, "h3");
	_tmp30_ = recently_added_label;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp30_, 9);
	_tmp31_ = recently_added_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp31_, GTK_ALIGN_START);
	_tmp32_ = recently_added_label;
	gtk_label_set_use_markup (_tmp32_, TRUE);
	_tmp33_ = widgets_home_button_new (_ ("Playlists"), "playlist-symbolic");
	g_object_ref_sink (_tmp33_);
	playlists_button = _tmp33_;
	_tmp34_ = widgets_home_button_new (_ ("Albums"), "byte-album-symbolic");
	g_object_ref_sink (_tmp34_);
	albums_button = _tmp34_;
	_tmp35_ = widgets_home_button_new (_ ("Songs"), "folder-music-symbolic");
	g_object_ref_sink (_tmp35_);
	songs_button = _tmp35_;
	_tmp36_ = widgets_home_button_new (_ ("Artists"), "byte-artist-symbolic");
	g_object_ref_sink (_tmp36_);
	artists_button = _tmp36_;
	_tmp37_ = widgets_home_button_new (_ ("Radios"), "byte-radio-symbolic");
	g_object_ref_sink (_tmp37_);
	radios_button = _tmp37_;
	_tmp38_ = widgets_home_button_new (_ ("Favorites"), "byte-favorite-symbolic");
	g_object_ref_sink (_tmp38_);
	favorites_button = _tmp38_;
	_tmp39_ = (GtkListBox*) gtk_list_box_new ();
	g_object_ref_sink (_tmp39_);
	_g_object_unref0 (self->priv->listbox);
	self->priv->listbox = _tmp39_;
	_tmp40_ = self->priv->listbox;
	g_object_set ((GtkWidget*) _tmp40_, "expand", TRUE, NULL);
	_tmp41_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
	g_object_ref_sink (_tmp41_);
	tracks_scrolled = _tmp41_;
	_tmp42_ = tracks_scrolled;
	g_object_set (_tmp42_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
	_tmp43_ = tracks_scrolled;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp43_, 6);
	_tmp44_ = tracks_scrolled;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp44_, 3);
	_tmp45_ = tracks_scrolled;
	g_object_set ((GtkWidget*) _tmp45_, "expand", TRUE, NULL);
	_tmp46_ = tracks_scrolled;
	_tmp47_ = self->priv->listbox;
	gtk_container_add ((GtkContainer*) _tmp46_, (GtkWidget*) _tmp47_);
	_tmp48_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp48_);
	items_grid = _tmp48_;
	_tmp49_ = items_grid;
	gtk_grid_set_row_spacing (_tmp49_, 6);
	_tmp50_ = items_grid;
	gtk_grid_set_column_spacing (_tmp50_, 6);
	_tmp51_ = items_grid;
	g_object_set ((GtkWidget*) _tmp51_, "margin", 6, NULL);
	_tmp52_ = items_grid;
	gtk_grid_set_column_homogeneous (_tmp52_, TRUE);
	_tmp53_ = items_grid;
	gtk_grid_set_row_homogeneous (_tmp53_, TRUE);
	_tmp54_ = items_grid;
	_tmp55_ = gtk_widget_get_style_context ((GtkWidget*) _tmp54_);
	gtk_style_context_add_class (_tmp55_, GRANITE_STYLE_CLASS_WELCOME);
	_tmp56_ = items_grid;
	_tmp57_ = songs_button;
	gtk_grid_attach (_tmp56_, (GtkWidget*) _tmp57_, 0, 0, 1, 1);
	_tmp58_ = items_grid;
	_tmp59_ = playlists_button;
	gtk_grid_attach (_tmp58_, (GtkWidget*) _tmp59_, 1, 0, 1, 1);
	_tmp60_ = items_grid;
	_tmp61_ = albums_button;
	gtk_grid_attach (_tmp60_, (GtkWidget*) _tmp61_, 0, 1, 1, 1);
	_tmp62_ = items_grid;
	_tmp63_ = artists_button;
	gtk_grid_attach (_tmp62_, (GtkWidget*) _tmp63_, 1, 1, 1, 1);
	_tmp64_ = items_grid;
	_tmp65_ = favorites_button;
	gtk_grid_attach (_tmp64_, (GtkWidget*) _tmp65_, 0, 2, 1, 1);
	_tmp66_ = items_grid;
	_tmp67_ = radios_button;
	gtk_grid_attach (_tmp66_, (GtkWidget*) _tmp67_, 1, 2, 1, 1);
	_tmp68_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp68_);
	library_box = _tmp68_;
	_tmp69_ = library_box;
	gtk_widget_set_vexpand ((GtkWidget*) _tmp69_, TRUE);
	_tmp70_ = library_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp70_, FALSE);
	_tmp71_ = library_box;
	_tmp72_ = library_label;
	gtk_box_pack_start (_tmp71_, (GtkWidget*) _tmp72_, FALSE, FALSE, (guint) 0);
	_tmp73_ = library_box;
	_tmp74_ = items_grid;
	gtk_box_pack_start (_tmp73_, (GtkWidget*) _tmp74_, FALSE, FALSE, (guint) 0);
	_tmp75_ = library_box;
	_tmp76_ = recently_added_label;
	gtk_box_pack_start (_tmp75_, (GtkWidget*) _tmp76_, FALSE, FALSE, (guint) 0);
	_tmp77_ = library_box;
	_tmp78_ = tracks_scrolled;
	gtk_box_pack_start (_tmp77_, (GtkWidget*) _tmp78_, TRUE, TRUE, (guint) 0);
	_tmp79_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp79_);
	main_box = _tmp79_;
	_tmp80_ = main_box;
	_tmp81_ = library_box;
	gtk_box_pack_start (_tmp80_, (GtkWidget*) _tmp81_, TRUE, TRUE, (guint) 0);
	_tmp82_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp82_);
	views_home_add_all_tracks (self);
	_tmp83_ = albums_button;
	g_signal_connect_object ((GtkButton*) _tmp83_, "clicked", (GCallback) __views_home___lambda98__gtk_button_clicked, self, 0);
	_tmp84_ = songs_button;
	g_signal_connect_object ((GtkButton*) _tmp84_, "clicked", (GCallback) __views_home___lambda99__gtk_button_clicked, self, 0);
	_tmp85_ = artists_button;
	g_signal_connect_object ((GtkButton*) _tmp85_, "clicked", (GCallback) __views_home___lambda100__gtk_button_clicked, self, 0);
	_tmp86_ = radios_button;
	g_signal_connect_object ((GtkButton*) _tmp86_, "clicked", (GCallback) __views_home___lambda101__gtk_button_clicked, self, 0);
	_tmp87_ = playlists_button;
	g_signal_connect_object ((GtkButton*) _tmp87_, "clicked", (GCallback) __views_home___lambda102__gtk_button_clicked, self, 0);
	_tmp88_ = favorites_button;
	g_signal_connect_object ((GtkButton*) _tmp88_, "clicked", (GCallback) __views_home___lambda103__gtk_button_clicked, self, 0);
	_tmp89_ = self->priv->listbox;
	g_signal_connect_object (_tmp89_, "row-activated", (GCallback) __views_home___lambda104__gtk_list_box_row_activated, self, 0);
	_tmp90_ = byte_database;
	g_signal_connect_object (_tmp90_, "adden-new-track", (GCallback) __views_home___lambda105__services_database_adden_new_track, self, 0);
	_tmp91_ = byte_database;
	g_signal_connect_object (_tmp91_, "reset-library", (GCallback) __views_home___lambda107__services_database_reset_library, self, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (library_box);
	_g_object_unref0 (items_grid);
	_g_object_unref0 (tracks_scrolled);
	_g_object_unref0 (favorites_button);
	_g_object_unref0 (radios_button);
	_g_object_unref0 (artists_button);
	_g_object_unref0 (songs_button);
	_g_object_unref0 (albums_button);
	_g_object_unref0 (playlists_button);
	_g_object_unref0 (recently_added_label);
	_g_object_unref0 (library_label);
	return obj;
}


static void
views_home_class_init (ViewsHomeClass * klass)
{
	views_home_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (ViewsHomePrivate));
	G_OBJECT_CLASS (klass)->constructor = views_home_constructor;
	G_OBJECT_CLASS (klass)->finalize = views_home_finalize;
	views_home_signals[VIEWS_HOME_GO_ALBUMS_VIEW_SIGNAL] = g_signal_new ("go-albums-view", VIEWS_TYPE_HOME, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	views_home_signals[VIEWS_HOME_GO_TRACKS_VIEW_SIGNAL] = g_signal_new ("go-tracks-view", VIEWS_TYPE_HOME, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	views_home_signals[VIEWS_HOME_GO_ARTISTS_VIEW_SIGNAL] = g_signal_new ("go-artists-view", VIEWS_TYPE_HOME, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	views_home_signals[VIEWS_HOME_GO_RADIOS_VIEW_SIGNAL] = g_signal_new ("go-radios-view", VIEWS_TYPE_HOME, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	views_home_signals[VIEWS_HOME_GO_PLAYLISTS_VIEW_SIGNAL] = g_signal_new ("go-playlists-view", VIEWS_TYPE_HOME, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	views_home_signals[VIEWS_HOME_GO_FAVORITES_VIEW_SIGNAL] = g_signal_new ("go-favorites-view", VIEWS_TYPE_HOME, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
views_home_instance_init (ViewsHome * self)
{
	self->priv = VIEWS_HOME_GET_PRIVATE (self);
}


static void
views_home_finalize (GObject * obj)
{
	ViewsHome * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_HOME, ViewsHome);
	_g_object_unref0 (self->priv->listbox);
	_g_object_unref0 (self->priv->all_tracks);
	G_OBJECT_CLASS (views_home_parent_class)->finalize (obj);
}


GType
views_home_get_type (void)
{
	static volatile gsize views_home_type_id__volatile = 0;
	if (g_once_init_enter (&views_home_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsHomeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_home_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsHome), 0, (GInstanceInitFunc) views_home_instance_init, NULL };
		GType views_home_type_id;
		views_home_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsHome", &g_define_type_info, 0);
		g_once_init_leave (&views_home_type_id__volatile, views_home_type_id);
	}
	return views_home_type_id__volatile;
}



