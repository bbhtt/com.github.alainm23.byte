/* Queue.c generated by valac 0.40.11, the Vala compiler
 * generated from Queue.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <pango/pango.h>
#include <gio/gio.h>
#include <granite.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <stdio.h>
#include <gst/gst.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>


#define WIDGETS_TYPE_QUEUE (widgets_queue_get_type ())
#define WIDGETS_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_QUEUE, WidgetsQueue))
#define WIDGETS_QUEUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_QUEUE, WidgetsQueueClass))
#define WIDGETS_IS_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_QUEUE))
#define WIDGETS_IS_QUEUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_QUEUE))
#define WIDGETS_QUEUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_QUEUE, WidgetsQueueClass))

typedef struct _WidgetsQueue WidgetsQueue;
typedef struct _WidgetsQueueClass WidgetsQueueClass;
typedef struct _WidgetsQueuePrivate WidgetsQueuePrivate;

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;

#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;
enum  {
	WIDGETS_QUEUE_0_PROPERTY,
	WIDGETS_QUEUE_NUM_PROPERTIES
};
static GParamSpec* widgets_queue_properties[WIDGETS_QUEUE_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_TRACK_QUEUE_ROW (widgets_track_queue_row_get_type ())
#define WIDGETS_TRACK_QUEUE_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRow))
#define WIDGETS_TRACK_QUEUE_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRowClass))
#define WIDGETS_IS_TRACK_QUEUE_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TRACK_QUEUE_ROW))
#define WIDGETS_IS_TRACK_QUEUE_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TRACK_QUEUE_ROW))
#define WIDGETS_TRACK_QUEUE_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TRACK_QUEUE_ROW, WidgetsTrackQueueRowClass))

typedef struct _WidgetsTrackQueueRow WidgetsTrackQueueRow;
typedef struct _WidgetsTrackQueueRowClass WidgetsTrackQueueRowClass;
typedef struct _Block26Data Block26Data;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _Block27Data Block27Data;
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_PLAYER (services_player_get_type ())
#define SERVICES_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_PLAYER, ServicesPlayer))
#define SERVICES_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_PLAYER, ServicesPlayerClass))
#define SERVICES_IS_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_PLAYER))
#define SERVICES_IS_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_PLAYER))
#define SERVICES_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_PLAYER, ServicesPlayerClass))

typedef struct _ServicesPlayer ServicesPlayer;
typedef struct _ServicesPlayerClass ServicesPlayerClass;
typedef struct _Block28Data Block28Data;
typedef struct _ObjectsTrackPrivate ObjectsTrackPrivate;

#define SERVICES_TYPE_SCAN (services_scan_get_type ())
#define SERVICES_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SCAN, ServicesScan))
#define SERVICES_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SCAN, ServicesScanClass))
#define SERVICES_IS_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SCAN))
#define SERVICES_IS_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SCAN))
#define SERVICES_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SCAN, ServicesScanClass))

typedef struct _ServicesScan ServicesScan;
typedef struct _ServicesScanClass ServicesScanClass;
typedef struct _ServicesScanPrivate ServicesScanPrivate;
typedef struct _Block29Data Block29Data;
typedef struct _UtilsPrivate UtilsPrivate;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _Block30Data Block30Data;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

struct _WidgetsQueue {
	GtkRevealer parent_instance;
	WidgetsQueuePrivate * priv;
};

struct _WidgetsQueueClass {
	GtkRevealerClass parent_class;
};

struct _WidgetsQueuePrivate {
	WidgetsCover* image_cover;
	GtkListBox* listbox;
	GeeArrayList* items;
	gint item_index;
	gint item_max;
};

struct _Block26Data {
	int _ref_count_;
	WidgetsQueue* self;
	WidgetsTrackQueueRow* row;
};

struct _Block27Data {
	int _ref_count_;
	WidgetsQueue* self;
	GtkLabel* next_track_name;
	GtkGrid* next_track_grid;
	GtkImage* notification_image;
	GtkLabel* notification_primary_label;
	GtkLabel* notification_secondary_label;
	GtkProgressBar* sync_progressbar;
	GtkStack* top_stack;
	GtkRevealer* top_revealer;
	GtkRevealer* title_revealer;
	GtkRevealer* tracks_revealer;
};

struct _Block28Data {
	int _ref_count_;
	Block27Data * _data27_;
	gint current_index;
};

struct _ObjectsTrack {
	GObject parent_instance;
	ObjectsTrackPrivate * priv;
	gint track_order;
	gint id;
	gint album_id;
	gint track;
	gint disc;
	gint play_count;
	gint is_favorite;
	gint bitrate;
	gint bpm;
	gint rating;
	gint samplerate;
	gint channels;
	gint year;
	gint playlist;
	guint64 duration;
	gchar* path;
	gchar* title;
	gchar* favorite_added;
	gchar* last_played;
	gchar* album_title;
	gchar* artist_name;
	gchar* composer;
	gchar* grouping;
	gchar* comment;
	gchar* lyrics;
	gchar* genre;
	gchar* album_artist;
	gchar* date_added;
};

struct _ObjectsTrackClass {
	GObjectClass parent_class;
};

struct _ServicesScan {
	GObject parent_instance;
	ServicesScanPrivate * priv;
	gint counter;
	gint counter_max;
	gboolean is_sync;
};

struct _ServicesScanClass {
	GObjectClass parent_class;
};

struct _Block29Data {
	int _ref_count_;
	Block27Data * _data27_;
	gint current_index;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};

struct _Block30Data {
	int _ref_count_;
	WidgetsQueue* self;
	gint current_index;
};


static gpointer widgets_queue_parent_class = NULL;
extern Utils* byte_utils;
extern ServicesPlayer* byte_player;
extern ServicesScan* byte_scan_service;
extern ServicesDatabase* byte_database;

GType widgets_queue_get_type (void) G_GNUC_CONST;
GType widgets_cover_get_type (void) G_GNUC_CONST;
GType objects_track_get_type (void) G_GNUC_CONST;
#define WIDGETS_QUEUE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_QUEUE, WidgetsQueuePrivate))
WidgetsQueue* widgets_queue_new (void);
WidgetsQueue* widgets_queue_construct (GType object_type);
static void widgets_queue_add_all_items (WidgetsQueue* self,
                                  GeeArrayList* items);
GType widgets_track_queue_row_get_type (void) G_GNUC_CONST;
static Block26Data* block26_data_ref (Block26Data* _data26_);
static void block26_data_unref (void * _userdata_);
WidgetsTrackQueueRow* widgets_track_queue_row_new (ObjectsTrack* track);
WidgetsTrackQueueRow* widgets_track_queue_row_construct (GType object_type,
                                                         ObjectsTrack* track);
static void _____lambda311_ (Block26Data* _data26_,
                      gint id);
GType utils_get_type (void) G_GNUC_CONST;
void utils_remove_track (Utils* self,
                         gint id);
static gboolean __lambda312_ (Block26Data* _data26_);
static gboolean ___lambda312__gsource_func (gpointer self);
static void ______lambda311__widgets_track_queue_row_remove_track (WidgetsTrackQueueRow* _sender,
                                                            gint id,
                                                            gpointer self);
static GObject * widgets_queue_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
static Block27Data* block27_data_ref (Block27Data* _data27_);
static void block27_data_unref (void * _userdata_);
WidgetsCover* widgets_cover_new_with_default_icon (gint pixel_size,
                                                   const gchar* type);
WidgetsCover* widgets_cover_construct_with_default_icon (GType object_type,
                                                         gint pixel_size,
                                                         const gchar* type);
static void _widgets_queue___lambda313_ (Block27Data* _data27_,
                                  GeeArrayList* _items,
                                  ObjectsTrack* _track);
static void __lambda314_ (WidgetsQueue* self,
                   GtkWidget* widget);
static void ___lambda314__gtk_callback (GtkWidget* widget,
                                 gpointer self);
GType services_player_get_type (void) G_GNUC_CONST;
void services_player_set_track (ServicesPlayer* self,
                                ObjectsTrack* track);
static Block28Data* block28_data_ref (Block28Data* _data28_);
static void block28_data_unref (void * _userdata_);
gint utils_get_track_index_by_id (Utils* self,
                                  gint id,
                                  GeeArrayList* queue_playlist);
static gboolean ___lambda315_ (Block28Data* _data28_,
                        GtkListBoxRow* row);
static gboolean ____lambda315__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
GType services_scan_get_type (void) G_GNUC_CONST;
static void __widgets_queue___lambda313__utils_play_items (Utils* _sender,
                                                    GeeArrayList* items,
                                                    ObjectsTrack* track,
                                                    gpointer self);
static void _widgets_queue___lambda316_ (Block27Data* _data27_,
                                  ObjectsTrack* track);
static Block29Data* block29_data_ref (Block29Data* _data29_);
static void block29_data_unref (void * _userdata_);
static gboolean __lambda317_ (Block29Data* _data29_,
                       GtkListBoxRow* row);
static gboolean ___lambda317__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                 gpointer self);
ObjectsTrack* utils_get_next_track (Utils* self,
                                    ObjectsTrack* current_track);
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
static void __widgets_queue___lambda316__services_player_current_track_changed (ServicesPlayer* _sender,
                                                                         ObjectsTrack* track,
                                                                         gpointer self);
static void _widgets_queue___lambda318_ (WidgetsQueue* self,
                                  GstState state);
ObjectsTrack* services_player_get_current_track (ServicesPlayer* self);
static void __widgets_queue___lambda318__services_player_state_changed (ServicesPlayer* _sender,
                                                                 GstState state,
                                                                 gpointer self);
static void _widgets_queue___lambda319_ (Block27Data* _data27_);
static void __widgets_queue___lambda319__utils_update_next_track (Utils* _sender,
                                                           gpointer self);
static void _widgets_queue___lambda320_ (WidgetsQueue* self,
                                  const gchar* mode);
static void __widgets_queue___lambda320__services_player_mode_changed (ServicesPlayer* _sender,
                                                                const gchar* mode,
                                                                gpointer self);
static void _widgets_queue___lambda321_ (WidgetsQueue* self,
                                  GeeArrayList* _items);
static void __lambda322_ (WidgetsQueue* self,
                   GtkWidget* widget);
static void ___lambda322__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __widgets_queue___lambda321__utils_add_next_track (Utils* _sender,
                                                        GeeArrayList* items,
                                                        gpointer self);
static void _widgets_queue___lambda323_ (WidgetsQueue* self,
                                  GeeArrayList* _items);
static void __lambda324_ (WidgetsQueue* self,
                   GtkWidget* widget);
static void ___lambda324__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __widgets_queue___lambda323__utils_add_last_track (Utils* _sender,
                                                        GeeArrayList* items,
                                                        gpointer self);
static void _widgets_queue___lambda325_ (WidgetsQueue* self,
                                  GtkPositionType pos);
static void __widgets_queue___lambda325__gtk_scrolled_window_edge_reached (GtkScrolledWindow* _sender,
                                                                    GtkPositionType pos,
                                                                    gpointer self);
static void _widgets_queue___lambda326_ (Block27Data* _data27_);
static void __widgets_queue___lambda326__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static void _widgets_queue___lambda327_ (Block27Data* _data27_);
static void __widgets_queue___lambda327__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static gboolean _widgets_queue___lambda328_ (Block27Data* _data27_,
                                      GdkEvent* event);
static gboolean __widgets_queue___lambda328__gtk_widget_event (GtkWidget* _sender,
                                                        GdkEvent* event,
                                                        gpointer self);
static gboolean _widgets_queue___lambda329_ (Block27Data* _data27_,
                                      GdkEvent* event);
static gboolean __widgets_queue___lambda329__gtk_widget_event (GtkWidget* _sender,
                                                        GdkEvent* event,
                                                        gpointer self);
static void _widgets_queue___lambda330_ (WidgetsQueue* self,
                                  GtkListBoxRow* row);
static Block30Data* block30_data_ref (Block30Data* _data30_);
static void block30_data_unref (void * _userdata_);
ObjectsTrack* widgets_track_queue_row_get_track (WidgetsTrackQueueRow* self);
static gboolean __lambda331_ (Block30Data* _data30_,
                       GtkListBoxRow* row);
static gboolean ___lambda331__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                 gpointer self);
static void __widgets_queue___lambda330__gtk_list_box_row_activated (GtkListBox* _sender,
                                                              GtkListBoxRow* row,
                                                              gpointer self);
GType services_database_get_type (void) G_GNUC_CONST;
static void _widgets_queue___lambda332_ (Block27Data* _data27_,
                                  ObjectsTrack* track,
                                  gint favorite);
static gboolean ___lambda333_ (Block27Data* _data27_);
static gboolean ____lambda333__gsource_func (gpointer self);
static void __widgets_queue___lambda332__services_database_updated_track_favorite (ServicesDatabase* _sender,
                                                                            ObjectsTrack* track,
                                                                            gint favorite,
                                                                            gpointer self);
static void _widgets_queue___lambda334_ (Block27Data* _data27_);
static void __widgets_queue___lambda334__services_scan_sync_started (ServicesScan* _sender,
                                                              gpointer self);
static void _widgets_queue___lambda335_ (Block27Data* _data27_);
static void __widgets_queue___lambda335__services_scan_sync_finished (ServicesScan* _sender,
                                                               gpointer self);
static void _widgets_queue___lambda336_ (Block27Data* _data27_,
                                  gdouble fraction);
static void __widgets_queue___lambda336__services_scan_sync_progress (ServicesScan* _sender,
                                                               gdouble fraction,
                                                               gpointer self);
static void widgets_queue_finalize (GObject * obj);


WidgetsQueue*
widgets_queue_construct (GType object_type)
{
	WidgetsQueue * self = NULL;
	self = (WidgetsQueue*) g_object_new (object_type, NULL);
	gtk_revealer_set_transition_type ((GtkRevealer*) self, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
	gtk_widget_set_valign ((GtkWidget*) self, GTK_ALIGN_END);
	gtk_widget_set_halign ((GtkWidget*) self, GTK_ALIGN_CENTER);
	gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
	return self;
}


WidgetsQueue*
widgets_queue_new (void)
{
	return widgets_queue_construct (WIDGETS_TYPE_QUEUE);
}


static Block26Data*
block26_data_ref (Block26Data* _data26_)
{
	g_atomic_int_inc (&_data26_->_ref_count_);
	return _data26_;
}


static void
block26_data_unref (void * _userdata_)
{
	Block26Data* _data26_;
	_data26_ = (Block26Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data26_->_ref_count_)) {
		WidgetsQueue* self;
		self = _data26_->self;
		_g_object_unref0 (_data26_->row);
		_g_object_unref0 (self);
		g_slice_free (Block26Data, _data26_);
	}
}


static gboolean
__lambda312_ (Block26Data* _data26_)
{
	WidgetsQueue* self;
	gboolean result = FALSE;
	WidgetsTrackQueueRow* _tmp0_;
	self = _data26_->self;
	_tmp0_ = _data26_->row;
	gtk_widget_destroy ((GtkWidget*) _tmp0_);
	result = G_SOURCE_REMOVE;
	return result;
}


static gboolean
___lambda312__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda312_ (self);
	return result;
}


static void
_____lambda311_ (Block26Data* _data26_,
                 gint id)
{
	WidgetsQueue* self;
	Utils* _tmp0_;
	self = _data26_->self;
	_tmp0_ = byte_utils;
	utils_remove_track (_tmp0_, id);
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 250, ___lambda312__gsource_func, block26_data_ref (_data26_), block26_data_unref);
}


static void
______lambda311__widgets_track_queue_row_remove_track (WidgetsTrackQueueRow* _sender,
                                                       gint id,
                                                       gpointer self)
{
	_____lambda311_ (self, id);
}


static void
widgets_queue_add_all_items (WidgetsQueue* self,
                             GeeArrayList* items)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (items != NULL);
	{
		gint i = 0;
		gint _tmp0_;
		_tmp0_ = self->priv->item_index;
		i = _tmp0_;
		{
			gboolean _tmp1_ = FALSE;
			_tmp1_ = TRUE;
			while (TRUE) {
				Block26Data* _data26_;
				gint _tmp3_;
				gint _tmp4_;
				gint _tmp5_;
				gpointer _tmp6_;
				ObjectsTrack* _tmp7_;
				WidgetsTrackQueueRow* _tmp8_;
				WidgetsTrackQueueRow* _tmp9_;
				WidgetsTrackQueueRow* _tmp10_;
				GtkListBox* _tmp11_;
				WidgetsTrackQueueRow* _tmp12_;
				GtkListBox* _tmp13_;
				_data26_ = g_slice_new0 (Block26Data);
				_data26_->_ref_count_ = 1;
				_data26_->self = g_object_ref (self);
				if (!_tmp1_) {
					gint _tmp2_;
					_tmp2_ = i;
					i = _tmp2_ + 1;
				}
				_tmp1_ = FALSE;
				_tmp3_ = i;
				_tmp4_ = self->priv->item_max;
				if (!(_tmp3_ < _tmp4_)) {
					block26_data_unref (_data26_);
					_data26_ = NULL;
					break;
				}
				_tmp5_ = i;
				_tmp6_ = gee_abstract_list_get ((GeeAbstractList*) items, _tmp5_);
				_tmp7_ = (ObjectsTrack*) _tmp6_;
				_tmp8_ = widgets_track_queue_row_new (_tmp7_);
				g_object_ref_sink (_tmp8_);
				_tmp9_ = _tmp8_;
				_g_object_unref0 (_tmp7_);
				_data26_->row = _tmp9_;
				_tmp10_ = _data26_->row;
				g_signal_connect_data (_tmp10_, "remove-track", (GCallback) ______lambda311__widgets_track_queue_row_remove_track, block26_data_ref (_data26_), (GClosureNotify) block26_data_unref, 0);
				_tmp11_ = self->priv->listbox;
				_tmp12_ = _data26_->row;
				gtk_container_add ((GtkContainer*) _tmp11_, (GtkWidget*) _tmp12_);
				_tmp13_ = self->priv->listbox;
				gtk_widget_show_all ((GtkWidget*) _tmp13_);
				block26_data_unref (_data26_);
				_data26_ = NULL;
			}
		}
	}
}


static Block27Data*
block27_data_ref (Block27Data* _data27_)
{
	g_atomic_int_inc (&_data27_->_ref_count_);
	return _data27_;
}


static void
block27_data_unref (void * _userdata_)
{
	Block27Data* _data27_;
	_data27_ = (Block27Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data27_->_ref_count_)) {
		WidgetsQueue* self;
		self = _data27_->self;
		_g_object_unref0 (_data27_->tracks_revealer);
		_g_object_unref0 (_data27_->title_revealer);
		_g_object_unref0 (_data27_->top_revealer);
		_g_object_unref0 (_data27_->top_stack);
		_g_object_unref0 (_data27_->sync_progressbar);
		_g_object_unref0 (_data27_->notification_secondary_label);
		_g_object_unref0 (_data27_->notification_primary_label);
		_g_object_unref0 (_data27_->notification_image);
		_g_object_unref0 (_data27_->next_track_grid);
		_g_object_unref0 (_data27_->next_track_name);
		_g_object_unref0 (self);
		g_slice_free (Block27Data, _data27_);
	}
}


static void
__lambda314_ (WidgetsQueue* self,
              GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
___lambda314__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda314_ ((WidgetsQueue*) self, widget);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static Block28Data*
block28_data_ref (Block28Data* _data28_)
{
	g_atomic_int_inc (&_data28_->_ref_count_);
	return _data28_;
}


static void
block28_data_unref (void * _userdata_)
{
	Block28Data* _data28_;
	_data28_ = (Block28Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data28_->_ref_count_)) {
		WidgetsQueue* self;
		self = _data28_->_data27_->self;
		block27_data_unref (_data28_->_data27_);
		_data28_->_data27_ = NULL;
		g_slice_free (Block28Data, _data28_);
	}
}


static gboolean
___lambda315_ (Block28Data* _data28_,
               GtkListBoxRow* row)
{
	Block27Data* _data27_;
	WidgetsQueue* self;
	gboolean result = FALSE;
	gint index = 0;
	gint _tmp0_;
	gint _tmp1_;
	_data27_ = _data28_->_data27_;
	self = _data27_->self;
	g_return_val_if_fail (row != NULL, FALSE);
	index = gtk_list_box_row_get_index (row);
	_tmp0_ = index;
	_tmp1_ = _data28_->current_index;
	result = _tmp0_ >= _tmp1_;
	return result;
}


static gboolean
____lambda315__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda315_ (self, row);
	return result;
}


static void
_widgets_queue___lambda313_ (Block27Data* _data27_,
                             GeeArrayList* _items,
                             ObjectsTrack* _track)
{
	WidgetsQueue* self;
	GtkListBox* _tmp0_;
	GeeArrayList* _tmp1_;
	gint _tmp2_;
	GeeArrayList* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	GeeArrayList* _tmp9_;
	ServicesScan* _tmp19_;
	gboolean _tmp20_;
	self = _data27_->self;
	g_return_if_fail (_items != NULL);
	_tmp0_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda314__gtk_callback, self);
	_tmp1_ = _g_object_ref0 (_items);
	_g_object_unref0 (self->priv->items);
	self->priv->items = _tmp1_;
	self->priv->item_index = 0;
	self->priv->item_max = 50;
	_tmp2_ = self->priv->item_max;
	_tmp3_ = self->priv->items;
	_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
	_tmp5_ = _tmp4_;
	if (_tmp2_ > _tmp5_) {
		GeeArrayList* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		_tmp6_ = self->priv->items;
		_tmp7_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp6_);
		_tmp8_ = _tmp7_;
		self->priv->item_max = _tmp8_;
	}
	_tmp9_ = self->priv->items;
	widgets_queue_add_all_items (self, _tmp9_);
	if (_track == NULL) {
		ServicesPlayer* _tmp10_;
		GeeArrayList* _tmp11_;
		gpointer _tmp12_;
		ObjectsTrack* _tmp13_;
		_tmp10_ = byte_player;
		_tmp11_ = self->priv->items;
		_tmp12_ = gee_abstract_list_get ((GeeAbstractList*) _tmp11_, 0);
		_tmp13_ = (ObjectsTrack*) _tmp12_;
		services_player_set_track (_tmp10_, _tmp13_);
		_g_object_unref0 (_tmp13_);
	} else {
		Block28Data* _data28_;
		ServicesPlayer* _tmp14_;
		Utils* _tmp15_;
		gint _tmp16_;
		GeeArrayList* _tmp17_;
		GtkListBox* _tmp18_;
		_data28_ = g_slice_new0 (Block28Data);
		_data28_->_ref_count_ = 1;
		_data28_->_data27_ = block27_data_ref (_data27_);
		_tmp14_ = byte_player;
		services_player_set_track (_tmp14_, _track);
		_tmp15_ = byte_utils;
		_tmp16_ = _track->id;
		_tmp17_ = self->priv->items;
		_data28_->current_index = utils_get_track_index_by_id (_tmp15_, _tmp16_, _tmp17_);
		_tmp18_ = self->priv->listbox;
		gtk_list_box_set_filter_func (_tmp18_, ____lambda315__gtk_list_box_filter_func, block28_data_ref (_data28_), block28_data_unref);
		block28_data_unref (_data28_);
		_data28_ = NULL;
	}
	_tmp19_ = byte_scan_service;
	_tmp20_ = _tmp19_->is_sync;
	if (_tmp20_) {
		GtkStack* _tmp21_;
		_tmp21_ = _data27_->top_stack;
		gtk_stack_set_visible_child_name (_tmp21_, "sync_grid");
	} else {
		GtkStack* _tmp22_;
		_tmp22_ = _data27_->top_stack;
		gtk_stack_set_visible_child_name (_tmp22_, "top_eventbox");
	}
}


static void
__widgets_queue___lambda313__utils_play_items (Utils* _sender,
                                               GeeArrayList* items,
                                               ObjectsTrack* track,
                                               gpointer self)
{
	_widgets_queue___lambda313_ (self, items, track);
}


static Block29Data*
block29_data_ref (Block29Data* _data29_)
{
	g_atomic_int_inc (&_data29_->_ref_count_);
	return _data29_;
}


static void
block29_data_unref (void * _userdata_)
{
	Block29Data* _data29_;
	_data29_ = (Block29Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data29_->_ref_count_)) {
		WidgetsQueue* self;
		self = _data29_->_data27_->self;
		block27_data_unref (_data29_->_data27_);
		_data29_->_data27_ = NULL;
		g_slice_free (Block29Data, _data29_);
	}
}


static gboolean
__lambda317_ (Block29Data* _data29_,
              GtkListBoxRow* row)
{
	Block27Data* _data27_;
	WidgetsQueue* self;
	gboolean result = FALSE;
	gint index = 0;
	gint _tmp0_;
	gint _tmp1_;
	_data27_ = _data29_->_data27_;
	self = _data27_->self;
	g_return_val_if_fail (row != NULL, FALSE);
	index = gtk_list_box_row_get_index (row);
	_tmp0_ = index;
	_tmp1_ = _data29_->current_index;
	result = _tmp0_ >= _tmp1_;
	return result;
}


static gboolean
___lambda317__gtk_list_box_filter_func (GtkListBoxRow* row,
                                        gpointer self)
{
	gboolean result;
	result = __lambda317_ (self, row);
	return result;
}


static void
_widgets_queue___lambda316_ (Block27Data* _data27_,
                             ObjectsTrack* track)
{
	WidgetsQueue* self;
	Block29Data* _data29_;
	Utils* _tmp0_;
	gint _tmp1_;
	GeeArrayList* _tmp2_;
	GtkListBox* _tmp3_;
	ObjectsTrack* next_track = NULL;
	Utils* _tmp4_;
	ObjectsTrack* _tmp5_;
	ObjectsTrack* _tmp6_;
	GError * _inner_error_ = NULL;
	self = _data27_->self;
	_data29_ = g_slice_new0 (Block29Data);
	_data29_->_ref_count_ = 1;
	_data29_->_data27_ = block27_data_ref (_data27_);
	_tmp0_ = byte_utils;
	_tmp1_ = track->id;
	_tmp2_ = self->priv->items;
	_data29_->current_index = utils_get_track_index_by_id (_tmp0_, _tmp1_, _tmp2_);
	_tmp3_ = self->priv->listbox;
	gtk_list_box_set_filter_func (_tmp3_, ___lambda317__gtk_list_box_filter_func, block29_data_ref (_data29_), block29_data_unref);
	_tmp4_ = byte_utils;
	_tmp5_ = utils_get_next_track (_tmp4_, track);
	next_track = _tmp5_;
	_tmp6_ = next_track;
	if (_tmp6_ != NULL) {
		GtkLabel* _tmp7_;
		ObjectsTrack* _tmp8_;
		const gchar* _tmp9_;
		ObjectsTrack* _tmp10_;
		const gchar* _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_;
		GtkGrid* _tmp14_;
		ObjectsTrack* _tmp15_;
		const gchar* _tmp16_;
		ObjectsTrack* _tmp17_;
		const gchar* _tmp18_;
		gchar* _tmp19_;
		gchar* _tmp20_;
		gtk_revealer_set_reveal_child ((GtkRevealer*) self, TRUE);
		_tmp7_ = _data27_->next_track_name;
		_tmp8_ = next_track;
		_tmp9_ = _tmp8_->title;
		_tmp10_ = next_track;
		_tmp11_ = _tmp10_->artist_name;
		_tmp12_ = g_strdup_printf ("%s <b>by</b> %s", _tmp9_, _tmp11_);
		_tmp13_ = _tmp12_;
		gtk_label_set_label (_tmp7_, _tmp13_);
		_g_free0 (_tmp13_);
		_tmp14_ = _data27_->next_track_grid;
		_tmp15_ = next_track;
		_tmp16_ = _tmp15_->artist_name;
		_tmp17_ = next_track;
		_tmp18_ = _tmp17_->title;
		_tmp19_ = g_strdup_printf ("%s - %s", _tmp16_, _tmp18_);
		_tmp20_ = _tmp19_;
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp14_, _tmp20_);
		_g_free0 (_tmp20_);
		{
			gchar* cover_path = NULL;
			Utils* _tmp21_;
			const gchar* _tmp22_;
			ObjectsTrack* _tmp23_;
			gint _tmp24_;
			gchar* _tmp25_;
			gchar* _tmp26_;
			gchar* _tmp27_;
			gchar* _tmp28_;
			GdkPixbuf* _tmp29_ = NULL;
			const gchar* _tmp30_;
			GdkPixbuf* _tmp31_;
			WidgetsCover* _tmp32_;
			_tmp21_ = byte_utils;
			_tmp22_ = _tmp21_->COVER_FOLDER;
			_tmp23_ = next_track;
			_tmp24_ = _tmp23_->id;
			_tmp25_ = g_strdup_printf ("track-%i.jpg", _tmp24_);
			_tmp26_ = _tmp25_;
			_tmp27_ = g_build_filename (_tmp22_, _tmp26_, NULL);
			_tmp28_ = _tmp27_;
			_g_free0 (_tmp26_);
			cover_path = _tmp28_;
			_tmp30_ = cover_path;
			_tmp31_ = gdk_pixbuf_new_from_file_at_size (_tmp30_, 27, 27, &_inner_error_);
			_tmp29_ = _tmp31_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				_g_free0 (cover_path);
				goto __catch37_g_error;
			}
			_tmp32_ = self->priv->image_cover;
			widgets_cover_set_pixbuf (_tmp32_, _tmp29_);
			_g_object_unref0 (_tmp29_);
			_g_free0 (cover_path);
		}
		goto __finally37;
		__catch37_g_error:
		{
			GError* e = NULL;
			GdkPixbuf* _tmp33_ = NULL;
			GdkPixbuf* _tmp34_;
			WidgetsCover* _tmp35_;
			FILE* _tmp36_;
			GError* _tmp37_;
			const gchar* _tmp38_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp34_ = gdk_pixbuf_new_from_file_at_size ("/usr/share/com.github.alainm23.byte/track-default-cover.svg", 27, 27, &_inner_error_);
			_tmp33_ = _tmp34_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				_g_error_free0 (e);
				goto __finally37;
			}
			_tmp35_ = self->priv->image_cover;
			widgets_cover_set_pixbuf (_tmp35_, _tmp33_);
			_tmp36_ = stderr;
			_tmp37_ = e;
			_tmp38_ = _tmp37_->message;
			fprintf (_tmp36_, "Error setting default avatar icon: %s ", _tmp38_);
			_g_object_unref0 (_tmp33_);
			_g_error_free0 (e);
		}
		__finally37:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_object_unref0 (next_track);
			block29_data_unref (_data29_);
			_data29_ = NULL;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	} else {
		gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
	}
	_g_object_unref0 (next_track);
	block29_data_unref (_data29_);
	_data29_ = NULL;
}


static void
__widgets_queue___lambda316__services_player_current_track_changed (ServicesPlayer* _sender,
                                                                    ObjectsTrack* track,
                                                                    gpointer self)
{
	_widgets_queue___lambda316_ (self, track);
}


static void
_widgets_queue___lambda318_ (WidgetsQueue* self,
                             GstState state)
{
	if (state == GST_STATE_PLAYING) {
		ServicesPlayer* _tmp0_;
		ObjectsTrack* _tmp1_;
		ObjectsTrack* _tmp2_;
		_tmp0_ = byte_player;
		_tmp1_ = services_player_get_current_track (_tmp0_);
		_tmp2_ = _tmp1_;
		if (_tmp2_ != NULL) {
			gtk_revealer_set_reveal_child ((GtkRevealer*) self, TRUE);
		}
	} else {
		if (state == GST_STATE_NULL) {
			gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
		}
	}
}


static void
__widgets_queue___lambda318__services_player_state_changed (ServicesPlayer* _sender,
                                                            GstState state,
                                                            gpointer self)
{
	_widgets_queue___lambda318_ ((WidgetsQueue*) self, state);
}


static void
_widgets_queue___lambda319_ (Block27Data* _data27_)
{
	WidgetsQueue* self;
	ObjectsTrack* next_track = NULL;
	Utils* _tmp0_;
	ServicesPlayer* _tmp1_;
	ObjectsTrack* _tmp2_;
	ObjectsTrack* _tmp3_;
	ObjectsTrack* _tmp4_;
	ObjectsTrack* _tmp5_;
	GError * _inner_error_ = NULL;
	self = _data27_->self;
	_tmp0_ = byte_utils;
	_tmp1_ = byte_player;
	_tmp2_ = services_player_get_current_track (_tmp1_);
	_tmp3_ = _tmp2_;
	_tmp4_ = utils_get_next_track (_tmp0_, _tmp3_);
	next_track = _tmp4_;
	_tmp5_ = next_track;
	if (_tmp5_ != NULL) {
		GtkLabel* _tmp6_;
		ObjectsTrack* _tmp7_;
		const gchar* _tmp8_;
		ObjectsTrack* _tmp9_;
		const gchar* _tmp10_;
		gchar* _tmp11_;
		gchar* _tmp12_;
		GtkGrid* _tmp13_;
		ObjectsTrack* _tmp14_;
		const gchar* _tmp15_;
		ObjectsTrack* _tmp16_;
		const gchar* _tmp17_;
		gchar* _tmp18_;
		gchar* _tmp19_;
		_tmp6_ = _data27_->next_track_name;
		_tmp7_ = next_track;
		_tmp8_ = _tmp7_->title;
		_tmp9_ = next_track;
		_tmp10_ = _tmp9_->artist_name;
		_tmp11_ = g_strdup_printf ("%s <b>by</b> %s", _tmp8_, _tmp10_);
		_tmp12_ = _tmp11_;
		gtk_label_set_label (_tmp6_, _ (_tmp12_));
		_g_free0 (_tmp12_);
		_tmp13_ = _data27_->next_track_grid;
		_tmp14_ = next_track;
		_tmp15_ = _tmp14_->artist_name;
		_tmp16_ = next_track;
		_tmp17_ = _tmp16_->title;
		_tmp18_ = g_strdup_printf ("%s - %s", _tmp15_, _tmp17_);
		_tmp19_ = _tmp18_;
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp13_, _tmp19_);
		_g_free0 (_tmp19_);
		{
			gchar* cover_path = NULL;
			Utils* _tmp20_;
			const gchar* _tmp21_;
			ObjectsTrack* _tmp22_;
			gint _tmp23_;
			gchar* _tmp24_;
			gchar* _tmp25_;
			gchar* _tmp26_;
			gchar* _tmp27_;
			GdkPixbuf* _tmp28_ = NULL;
			const gchar* _tmp29_;
			GdkPixbuf* _tmp30_;
			WidgetsCover* _tmp31_;
			_tmp20_ = byte_utils;
			_tmp21_ = _tmp20_->COVER_FOLDER;
			_tmp22_ = next_track;
			_tmp23_ = _tmp22_->id;
			_tmp24_ = g_strdup_printf ("track-%i.jpg", _tmp23_);
			_tmp25_ = _tmp24_;
			_tmp26_ = g_build_filename (_tmp21_, _tmp25_, NULL);
			_tmp27_ = _tmp26_;
			_g_free0 (_tmp25_);
			cover_path = _tmp27_;
			_tmp29_ = cover_path;
			_tmp30_ = gdk_pixbuf_new_from_file_at_size (_tmp29_, 27, 27, &_inner_error_);
			_tmp28_ = _tmp30_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				_g_free0 (cover_path);
				goto __catch38_g_error;
			}
			_tmp31_ = self->priv->image_cover;
			widgets_cover_set_pixbuf (_tmp31_, _tmp28_);
			_g_object_unref0 (_tmp28_);
			_g_free0 (cover_path);
		}
		goto __finally38;
		__catch38_g_error:
		{
			GError* e = NULL;
			GdkPixbuf* _tmp32_ = NULL;
			GdkPixbuf* _tmp33_;
			WidgetsCover* _tmp34_;
			FILE* _tmp35_;
			GError* _tmp36_;
			const gchar* _tmp37_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp33_ = gdk_pixbuf_new_from_file_at_size ("/usr/share/com.github.alainm23.byte/track-default-cover.svg", 27, 27, &_inner_error_);
			_tmp32_ = _tmp33_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				_g_error_free0 (e);
				goto __finally38;
			}
			_tmp34_ = self->priv->image_cover;
			widgets_cover_set_pixbuf (_tmp34_, _tmp32_);
			_tmp35_ = stderr;
			_tmp36_ = e;
			_tmp37_ = _tmp36_->message;
			fprintf (_tmp35_, "Error setting default avatar icon: %s ", _tmp37_);
			_g_object_unref0 (_tmp32_);
			_g_error_free0 (e);
		}
		__finally38:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_object_unref0 (next_track);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	} else {
		gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
	}
	_g_object_unref0 (next_track);
}


static void
__widgets_queue___lambda319__utils_update_next_track (Utils* _sender,
                                                      gpointer self)
{
	_widgets_queue___lambda319_ (self);
}


static void
_widgets_queue___lambda320_ (WidgetsQueue* self,
                             const gchar* mode)
{
	g_return_if_fail (mode != NULL);
	if (g_strcmp0 (mode, "radio") == 0) {
		gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
	} else {
		gtk_revealer_set_reveal_child ((GtkRevealer*) self, TRUE);
	}
}


static void
__widgets_queue___lambda320__services_player_mode_changed (ServicesPlayer* _sender,
                                                           const gchar* mode,
                                                           gpointer self)
{
	_widgets_queue___lambda320_ ((WidgetsQueue*) self, mode);
}


static void
__lambda322_ (WidgetsQueue* self,
              GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
___lambda322__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda322_ ((WidgetsQueue*) self, widget);
}


static void
_widgets_queue___lambda321_ (WidgetsQueue* self,
                             GeeArrayList* _items)
{
	GtkListBox* _tmp0_;
	GeeArrayList* _tmp1_;
	gint _tmp2_;
	GeeArrayList* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	GeeArrayList* _tmp9_;
	Utils* _tmp10_;
	g_return_if_fail (_items != NULL);
	_tmp0_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda322__gtk_callback, self);
	_tmp1_ = _g_object_ref0 (_items);
	_g_object_unref0 (self->priv->items);
	self->priv->items = _tmp1_;
	self->priv->item_index = 0;
	self->priv->item_max = 50;
	_tmp2_ = self->priv->item_max;
	_tmp3_ = self->priv->items;
	_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
	_tmp5_ = _tmp4_;
	if (_tmp2_ > _tmp5_) {
		GeeArrayList* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		_tmp6_ = self->priv->items;
		_tmp7_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp6_);
		_tmp8_ = _tmp7_;
		self->priv->item_max = _tmp8_;
	}
	_tmp9_ = self->priv->items;
	widgets_queue_add_all_items (self, _tmp9_);
	_tmp10_ = byte_utils;
	g_signal_emit_by_name (_tmp10_, "update-next-track");
}


static void
__widgets_queue___lambda321__utils_add_next_track (Utils* _sender,
                                                   GeeArrayList* items,
                                                   gpointer self)
{
	_widgets_queue___lambda321_ ((WidgetsQueue*) self, items);
}


static void
__lambda324_ (WidgetsQueue* self,
              GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
___lambda324__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda324_ ((WidgetsQueue*) self, widget);
}


static void
_widgets_queue___lambda323_ (WidgetsQueue* self,
                             GeeArrayList* _items)
{
	GtkListBox* _tmp0_;
	GeeArrayList* _tmp1_;
	gint _tmp2_;
	GeeArrayList* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	GeeArrayList* _tmp9_;
	Utils* _tmp10_;
	g_return_if_fail (_items != NULL);
	_tmp0_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda324__gtk_callback, self);
	_tmp1_ = _g_object_ref0 (_items);
	_g_object_unref0 (self->priv->items);
	self->priv->items = _tmp1_;
	self->priv->item_index = 0;
	self->priv->item_max = 50;
	_tmp2_ = self->priv->item_max;
	_tmp3_ = self->priv->items;
	_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
	_tmp5_ = _tmp4_;
	if (_tmp2_ > _tmp5_) {
		GeeArrayList* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		_tmp6_ = self->priv->items;
		_tmp7_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp6_);
		_tmp8_ = _tmp7_;
		self->priv->item_max = _tmp8_;
	}
	_tmp9_ = self->priv->items;
	widgets_queue_add_all_items (self, _tmp9_);
	_tmp10_ = byte_utils;
	g_signal_emit_by_name (_tmp10_, "update-next-track");
}


static void
__widgets_queue___lambda323__utils_add_last_track (Utils* _sender,
                                                   GeeArrayList* items,
                                                   gpointer self)
{
	_widgets_queue___lambda323_ ((WidgetsQueue*) self, items);
}


static void
_widgets_queue___lambda325_ (WidgetsQueue* self,
                             GtkPositionType pos)
{
	if (pos == GTK_POS_BOTTOM) {
		gint _tmp0_;
		gint _tmp1_;
		gint _tmp2_;
		GeeArrayList* _tmp3_;
		gint _tmp4_;
		gint _tmp5_;
		GeeArrayList* _tmp9_;
		_tmp0_ = self->priv->item_max;
		self->priv->item_index = _tmp0_;
		_tmp1_ = self->priv->item_max;
		self->priv->item_max = _tmp1_ + 50;
		_tmp2_ = self->priv->item_max;
		_tmp3_ = self->priv->items;
		_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
		_tmp5_ = _tmp4_;
		if (_tmp2_ > _tmp5_) {
			GeeArrayList* _tmp6_;
			gint _tmp7_;
			gint _tmp8_;
			_tmp6_ = self->priv->items;
			_tmp7_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp6_);
			_tmp8_ = _tmp7_;
			self->priv->item_max = _tmp8_;
		}
		_tmp9_ = self->priv->items;
		widgets_queue_add_all_items (self, _tmp9_);
	}
}


static void
__widgets_queue___lambda325__gtk_scrolled_window_edge_reached (GtkScrolledWindow* _sender,
                                                               GtkPositionType pos,
                                                               gpointer self)
{
	_widgets_queue___lambda325_ ((WidgetsQueue*) self, pos);
}


static void
_widgets_queue___lambda326_ (Block27Data* _data27_)
{
	WidgetsQueue* self;
	GtkRevealer* _tmp0_;
	GtkRevealer* _tmp1_;
	GtkRevealer* _tmp2_;
	self = _data27_->self;
	_tmp0_ = _data27_->title_revealer;
	gtk_revealer_set_reveal_child (_tmp0_, FALSE);
	_tmp1_ = _data27_->top_revealer;
	gtk_revealer_set_reveal_child (_tmp1_, TRUE);
	_tmp2_ = _data27_->tracks_revealer;
	gtk_revealer_set_reveal_child (_tmp2_, FALSE);
}


static void
__widgets_queue___lambda326__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
	_widgets_queue___lambda326_ (self);
}


static void
_widgets_queue___lambda327_ (Block27Data* _data27_)
{
	WidgetsQueue* self;
	GtkRevealer* _tmp0_;
	GtkRevealer* _tmp1_;
	GtkRevealer* _tmp2_;
	self = _data27_->self;
	_tmp0_ = _data27_->title_revealer;
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
	_tmp1_ = _data27_->tracks_revealer;
	gtk_revealer_set_reveal_child (_tmp1_, TRUE);
	_tmp2_ = _data27_->top_revealer;
	gtk_revealer_set_reveal_child (_tmp2_, FALSE);
}


static void
__widgets_queue___lambda327__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
	_widgets_queue___lambda327_ (self);
}


static gboolean
_widgets_queue___lambda328_ (Block27Data* _data27_,
                             GdkEvent* event)
{
	WidgetsQueue* self;
	gboolean result = FALSE;
	GdkEventType _tmp0_;
	self = _data27_->self;
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp0_ = event->type;
	if (_tmp0_ == GDK_BUTTON_PRESS) {
		GtkRevealer* _tmp1_;
		GtkRevealer* _tmp2_;
		GtkRevealer* _tmp3_;
		_tmp1_ = _data27_->title_revealer;
		gtk_revealer_set_reveal_child (_tmp1_, TRUE);
		_tmp2_ = _data27_->tracks_revealer;
		gtk_revealer_set_reveal_child (_tmp2_, TRUE);
		_tmp3_ = _data27_->top_revealer;
		gtk_revealer_set_reveal_child (_tmp3_, FALSE);
	}
	result = FALSE;
	return result;
}


static gboolean
__widgets_queue___lambda328__gtk_widget_event (GtkWidget* _sender,
                                               GdkEvent* event,
                                               gpointer self)
{
	gboolean result;
	result = _widgets_queue___lambda328_ (self, event);
	return result;
}


static gboolean
_widgets_queue___lambda329_ (Block27Data* _data27_,
                             GdkEvent* event)
{
	WidgetsQueue* self;
	gboolean result = FALSE;
	GdkEventType _tmp0_;
	self = _data27_->self;
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp0_ = event->type;
	if (_tmp0_ == GDK_BUTTON_PRESS) {
		GtkRevealer* _tmp1_;
		GtkRevealer* _tmp2_;
		GtkRevealer* _tmp3_;
		_tmp1_ = _data27_->title_revealer;
		gtk_revealer_set_reveal_child (_tmp1_, FALSE);
		_tmp2_ = _data27_->top_revealer;
		gtk_revealer_set_reveal_child (_tmp2_, TRUE);
		_tmp3_ = _data27_->tracks_revealer;
		gtk_revealer_set_reveal_child (_tmp3_, FALSE);
	}
	result = FALSE;
	return result;
}


static gboolean
__widgets_queue___lambda329__gtk_widget_event (GtkWidget* _sender,
                                               GdkEvent* event,
                                               gpointer self)
{
	gboolean result;
	result = _widgets_queue___lambda329_ (self, event);
	return result;
}


static Block30Data*
block30_data_ref (Block30Data* _data30_)
{
	g_atomic_int_inc (&_data30_->_ref_count_);
	return _data30_;
}


static void
block30_data_unref (void * _userdata_)
{
	Block30Data* _data30_;
	_data30_ = (Block30Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data30_->_ref_count_)) {
		WidgetsQueue* self;
		self = _data30_->self;
		_g_object_unref0 (self);
		g_slice_free (Block30Data, _data30_);
	}
}


static gboolean
__lambda331_ (Block30Data* _data30_,
              GtkListBoxRow* row)
{
	WidgetsQueue* self;
	gboolean result = FALSE;
	gint index = 0;
	gint _tmp0_;
	gint _tmp1_;
	self = _data30_->self;
	g_return_val_if_fail (row != NULL, FALSE);
	index = gtk_list_box_row_get_index (row);
	_tmp0_ = index;
	_tmp1_ = _data30_->current_index;
	result = _tmp0_ >= _tmp1_;
	return result;
}


static gboolean
___lambda331__gtk_list_box_filter_func (GtkListBoxRow* row,
                                        gpointer self)
{
	gboolean result;
	result = __lambda331_ (self, row);
	return result;
}


static void
_widgets_queue___lambda330_ (WidgetsQueue* self,
                             GtkListBoxRow* row)
{
	Block30Data* _data30_;
	WidgetsTrackQueueRow* item = NULL;
	WidgetsTrackQueueRow* _tmp0_;
	ServicesPlayer* _tmp1_;
	WidgetsTrackQueueRow* _tmp2_;
	ObjectsTrack* _tmp3_;
	ObjectsTrack* _tmp4_;
	Utils* _tmp5_;
	WidgetsTrackQueueRow* _tmp6_;
	ObjectsTrack* _tmp7_;
	ObjectsTrack* _tmp8_;
	gint _tmp9_;
	GeeArrayList* _tmp10_;
	GtkListBox* _tmp11_;
	g_return_if_fail (row != NULL);
	_data30_ = g_slice_new0 (Block30Data);
	_data30_->_ref_count_ = 1;
	_data30_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TRACK_QUEUE_ROW) ? ((WidgetsTrackQueueRow*) row) : NULL);
	item = _tmp0_;
	_tmp1_ = byte_player;
	_tmp2_ = item;
	_tmp3_ = widgets_track_queue_row_get_track (_tmp2_);
	_tmp4_ = _tmp3_;
	services_player_set_track (_tmp1_, _tmp4_);
	_tmp5_ = byte_utils;
	_tmp6_ = item;
	_tmp7_ = widgets_track_queue_row_get_track (_tmp6_);
	_tmp8_ = _tmp7_;
	_tmp9_ = _tmp8_->id;
	_tmp10_ = self->priv->items;
	_data30_->current_index = utils_get_track_index_by_id (_tmp5_, _tmp9_, _tmp10_);
	_tmp11_ = self->priv->listbox;
	gtk_list_box_set_filter_func (_tmp11_, ___lambda331__gtk_list_box_filter_func, block30_data_ref (_data30_), block30_data_unref);
	_g_object_unref0 (item);
	block30_data_unref (_data30_);
	_data30_ = NULL;
}


static void
__widgets_queue___lambda330__gtk_list_box_row_activated (GtkListBox* _sender,
                                                         GtkListBoxRow* row,
                                                         gpointer self)
{
	_widgets_queue___lambda330_ ((WidgetsQueue*) self, row);
}


static gboolean
___lambda333_ (Block27Data* _data27_)
{
	WidgetsQueue* self;
	gboolean result = FALSE;
	GtkStack* _tmp0_;
	GtkImage* _tmp1_;
	GtkStyleContext* _tmp2_;
	self = _data27_->self;
	_tmp0_ = _data27_->top_stack;
	gtk_stack_set_visible_child_name (_tmp0_, "top_eventbox");
	_tmp1_ = _data27_->notification_image;
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
	gtk_style_context_remove_class (_tmp2_, "active");
	result = FALSE;
	return result;
}


static gboolean
____lambda333__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda333_ (self);
	return result;
}


static void
_widgets_queue___lambda332_ (Block27Data* _data27_,
                             ObjectsTrack* track,
                             gint favorite)
{
	WidgetsQueue* self;
	self = _data27_->self;
	g_return_if_fail (track != NULL);
	if (favorite == 1) {
		GtkStack* _tmp0_;
		GtkLabel* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		GtkLabel* _tmp6_;
		const gchar* _tmp7_;
		GtkImage* _tmp8_;
		GtkStyleContext* _tmp9_;
		_tmp0_ = _data27_->top_stack;
		gtk_stack_set_visible_child_name (_tmp0_, "notification_grid");
		_tmp1_ = _data27_->notification_primary_label;
		_tmp2_ = g_strconcat ("<small>", _ ("Add Favorite"), NULL);
		_tmp3_ = _tmp2_;
		_tmp4_ = g_strconcat (_tmp3_, "</small>", NULL);
		_tmp5_ = _tmp4_;
		gtk_label_set_label (_tmp1_, _tmp5_);
		_g_free0 (_tmp5_);
		_g_free0 (_tmp3_);
		_tmp6_ = _data27_->notification_secondary_label;
		_tmp7_ = track->title;
		gtk_label_set_label (_tmp6_, _tmp7_);
		_tmp8_ = _data27_->notification_image;
		_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
		gtk_style_context_add_class (_tmp9_, "active");
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 1000, ____lambda333__gsource_func, block27_data_ref (_data27_), block27_data_unref);
	}
}


static void
__widgets_queue___lambda332__services_database_updated_track_favorite (ServicesDatabase* _sender,
                                                                       ObjectsTrack* track,
                                                                       gint favorite,
                                                                       gpointer self)
{
	_widgets_queue___lambda332_ (self, track, favorite);
}


static void
_widgets_queue___lambda334_ (Block27Data* _data27_)
{
	WidgetsQueue* self;
	GtkStack* _tmp0_;
	self = _data27_->self;
	_tmp0_ = _data27_->top_stack;
	gtk_stack_set_visible_child_name (_tmp0_, "sync_grid");
	gtk_revealer_set_reveal_child ((GtkRevealer*) self, TRUE);
}


static void
__widgets_queue___lambda334__services_scan_sync_started (ServicesScan* _sender,
                                                         gpointer self)
{
	_widgets_queue___lambda334_ (self);
}


static void
_widgets_queue___lambda335_ (Block27Data* _data27_)
{
	WidgetsQueue* self;
	ServicesPlayer* _tmp0_;
	ObjectsTrack* _tmp1_;
	ObjectsTrack* _tmp2_;
	self = _data27_->self;
	_tmp0_ = byte_player;
	_tmp1_ = services_player_get_current_track (_tmp0_);
	_tmp2_ = _tmp1_;
	if (_tmp2_ != NULL) {
		GtkStack* _tmp3_;
		_tmp3_ = _data27_->top_stack;
		gtk_stack_set_visible_child_name (_tmp3_, "top_eventbox");
	} else {
		gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
	}
}


static void
__widgets_queue___lambda335__services_scan_sync_finished (ServicesScan* _sender,
                                                          gpointer self)
{
	_widgets_queue___lambda335_ (self);
}


static void
_widgets_queue___lambda336_ (Block27Data* _data27_,
                             gdouble fraction)
{
	WidgetsQueue* self;
	GtkProgressBar* _tmp0_;
	self = _data27_->self;
	_tmp0_ = _data27_->sync_progressbar;
	gtk_progress_bar_set_fraction (_tmp0_, fraction);
}


static void
__widgets_queue___lambda336__services_scan_sync_progress (ServicesScan* _sender,
                                                          gdouble fraction,
                                                          gpointer self)
{
	_widgets_queue___lambda336_ (self, fraction);
}


static GObject *
widgets_queue_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsQueue * self;
	Block27Data* _data27_;
	GeeArrayList* _tmp0_;
	WidgetsCover* _tmp1_;
	GtkLabel* next_track_label = NULL;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GtkLabel* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkLabel* _tmp8_;
	GtkLabel* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkLabel* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	GtkLabel* _tmp15_;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkLabel* _tmp18_;
	GtkButton* view_button = NULL;
	GtkButton* _tmp19_;
	GtkButton* _tmp20_;
	GtkButton* _tmp21_;
	GtkButton* _tmp22_;
	GtkStyleContext* _tmp23_;
	GtkButton* _tmp24_;
	GtkStyleContext* _tmp25_;
	GtkButton* _tmp26_;
	GtkButton* _tmp27_;
	GtkGrid* _tmp28_;
	GtkGrid* _tmp29_;
	GtkGrid* _tmp30_;
	WidgetsCover* _tmp31_;
	GtkGrid* _tmp32_;
	GtkLabel* _tmp33_;
	GtkGrid* _tmp34_;
	GtkLabel* _tmp35_;
	GtkGrid* _tmp36_;
	GtkButton* _tmp37_;
	GtkEventBox* top_eventbox = NULL;
	GtkEventBox* _tmp38_;
	GtkEventBox* _tmp39_;
	GtkGrid* _tmp40_;
	GtkImage* _tmp41_;
	GtkImage* _tmp42_;
	GThemedIcon* _tmp43_;
	GThemedIcon* _tmp44_;
	GtkImage* _tmp45_;
	GtkImage* _tmp46_;
	GtkImage* _tmp47_;
	GtkImage* _tmp48_;
	GtkImage* _tmp49_;
	GtkStyleContext* _tmp50_;
	GtkLabel* _tmp51_;
	GtkLabel* _tmp52_;
	GtkLabel* _tmp53_;
	GtkLabel* _tmp54_;
	GtkLabel* _tmp55_;
	GtkLabel* _tmp56_;
	GtkStyleContext* _tmp57_;
	GtkLabel* _tmp58_;
	GtkStyleContext* _tmp59_;
	GtkLabel* _tmp60_;
	GtkLabel* _tmp61_;
	GtkLabel* _tmp62_;
	GtkLabel* _tmp63_;
	GtkLabel* _tmp64_;
	GtkLabel* _tmp65_;
	GtkLabel* _tmp66_;
	GtkGrid* notification_grid = NULL;
	GtkGrid* _tmp67_;
	GtkGrid* _tmp68_;
	GtkGrid* _tmp69_;
	GtkGrid* _tmp70_;
	GtkImage* _tmp71_;
	GtkGrid* _tmp72_;
	GtkLabel* _tmp73_;
	GtkGrid* _tmp74_;
	GtkLabel* _tmp75_;
	GtkImage* sync_image = NULL;
	GtkImage* _tmp76_;
	GtkImage* _tmp77_;
	GThemedIcon* _tmp78_;
	GThemedIcon* _tmp79_;
	GtkImage* _tmp80_;
	GtkImage* _tmp81_;
	GtkImage* _tmp82_;
	GtkImage* _tmp83_;
	GtkImage* _tmp84_;
	GtkStyleContext* _tmp85_;
	GtkLabel* sync_label = NULL;
	gchar* _tmp86_;
	gchar* _tmp87_;
	GtkLabel* _tmp88_;
	GtkLabel* _tmp89_;
	GtkLabel* _tmp90_;
	GtkLabel* _tmp91_;
	GtkLabel* _tmp92_;
	GtkLabel* _tmp93_;
	GtkStyleContext* _tmp94_;
	GtkLabel* _tmp95_;
	GtkStyleContext* _tmp96_;
	GtkProgressBar* _tmp97_;
	GtkProgressBar* _tmp98_;
	GtkProgressBar* _tmp99_;
	GtkProgressBar* _tmp100_;
	GtkStyleContext* _tmp101_;
	GtkGrid* sync_grid = NULL;
	GtkGrid* _tmp102_;
	GtkGrid* _tmp103_;
	GtkGrid* _tmp104_;
	GtkGrid* _tmp105_;
	GtkGrid* _tmp106_;
	GtkGrid* _tmp107_;
	GtkGrid* _tmp108_;
	GtkImage* _tmp109_;
	GtkGrid* _tmp110_;
	GtkLabel* _tmp111_;
	GtkGrid* _tmp112_;
	GtkProgressBar* _tmp113_;
	GtkStack* _tmp114_;
	GtkStack* _tmp115_;
	GtkStack* _tmp116_;
	GtkStack* _tmp117_;
	GtkEventBox* _tmp118_;
	GtkStack* _tmp119_;
	GtkGrid* _tmp120_;
	GtkStack* _tmp121_;
	GtkGrid* _tmp122_;
	GtkRevealer* _tmp123_;
	GtkRevealer* _tmp124_;
	GtkRevealer* _tmp125_;
	GtkRevealer* _tmp126_;
	GtkStack* _tmp127_;
	GtkRevealer* _tmp128_;
	GtkLabel* title_label = NULL;
	GtkLabel* _tmp129_;
	GtkLabel* _tmp130_;
	GtkButton* hide_button = NULL;
	GtkButton* _tmp131_;
	GtkButton* _tmp132_;
	GtkButton* _tmp133_;
	GtkButton* _tmp134_;
	GtkButton* _tmp135_;
	GtkStyleContext* _tmp136_;
	GraniteWidgetsModeButton* mode_button = NULL;
	GraniteWidgetsModeButton* _tmp137_;
	GraniteWidgetsModeButton* _tmp138_;
	GtkStyleContext* _tmp139_;
	GraniteWidgetsModeButton* _tmp140_;
	GraniteWidgetsModeButton* _tmp141_;
	GraniteWidgetsModeButton* _tmp142_;
	GtkBox* title_box = NULL;
	GtkBox* _tmp143_;
	GtkBox* _tmp144_;
	GtkStyleContext* _tmp145_;
	GtkBox* _tmp146_;
	GraniteWidgetsModeButton* _tmp147_;
	GtkBox* _tmp148_;
	GtkButton* _tmp149_;
	GtkEventBox* title_eventbox = NULL;
	GtkEventBox* _tmp150_;
	GtkEventBox* _tmp151_;
	GtkBox* _tmp152_;
	GtkRevealer* _tmp153_;
	GtkRevealer* _tmp154_;
	GtkRevealer* _tmp155_;
	GtkRevealer* _tmp156_;
	GtkEventBox* _tmp157_;
	GtkRevealer* _tmp158_;
	GtkListBox* _tmp159_;
	GtkListBox* _tmp160_;
	GtkScrolledWindow* queue_scrolled = NULL;
	GtkScrolledWindow* _tmp161_;
	GtkScrolledWindow* _tmp162_;
	GtkScrolledWindow* _tmp163_;
	GtkScrolledWindow* _tmp164_;
	GtkScrolledWindow* _tmp165_;
	GtkScrolledWindow* _tmp166_;
	GtkScrolledWindow* _tmp167_;
	GtkListBox* _tmp168_;
	GtkRevealer* _tmp169_;
	GtkRevealer* _tmp170_;
	GtkRevealer* _tmp171_;
	GtkRevealer* _tmp172_;
	GtkScrolledWindow* _tmp173_;
	GtkRevealer* _tmp174_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp175_;
	GtkBox* _tmp176_;
	GtkBox* _tmp177_;
	GtkBox* _tmp178_;
	GtkStyleContext* _tmp179_;
	GtkBox* _tmp180_;
	GtkRevealer* _tmp181_;
	GtkBox* _tmp182_;
	GtkRevealer* _tmp183_;
	GtkBox* _tmp184_;
	GtkRevealer* _tmp185_;
	GtkBox* _tmp186_;
	Utils* _tmp187_;
	ServicesPlayer* _tmp188_;
	ServicesPlayer* _tmp189_;
	Utils* _tmp190_;
	ServicesPlayer* _tmp191_;
	Utils* _tmp192_;
	Utils* _tmp193_;
	GtkScrolledWindow* _tmp194_;
	GtkButton* _tmp195_;
	GtkButton* _tmp196_;
	GtkEventBox* _tmp197_;
	GtkEventBox* _tmp198_;
	GtkListBox* _tmp199_;
	ServicesDatabase* _tmp200_;
	ServicesScan* _tmp201_;
	ServicesScan* _tmp202_;
	ServicesScan* _tmp203_;
	parent_class = G_OBJECT_CLASS (widgets_queue_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_QUEUE, WidgetsQueue);
	_data27_ = g_slice_new0 (Block27Data);
	_data27_->_ref_count_ = 1;
	_data27_->self = g_object_ref (self);
	_tmp0_ = gee_array_list_new (OBJECTS_TYPE_TRACK, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL);
	_g_object_unref0 (self->priv->items);
	self->priv->items = _tmp0_;
	_tmp1_ = widgets_cover_new_with_default_icon (24, "track");
	g_object_ref_sink (_tmp1_);
	_g_object_unref0 (self->priv->image_cover);
	self->priv->image_cover = _tmp1_;
	_tmp2_ = g_strdup_printf ("<small>%s</small>", _ ("Next track"));
	_tmp3_ = _tmp2_;
	_tmp4_ = (GtkLabel*) gtk_label_new (_tmp3_);
	g_object_ref_sink (_tmp4_);
	_tmp5_ = _tmp4_;
	_g_free0 (_tmp3_);
	next_track_label = _tmp5_;
	_tmp6_ = next_track_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp6_, GTK_ALIGN_END);
	_tmp7_ = next_track_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp7_, GTK_ALIGN_START);
	_tmp8_ = next_track_label;
	gtk_label_set_use_markup (_tmp8_, TRUE);
	_tmp9_ = next_track_label;
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
	gtk_style_context_add_class (_tmp10_, "label-color-primary");
	_tmp11_ = next_track_label;
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
	gtk_style_context_add_class (_tmp12_, "font-bold");
	_tmp13_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp13_);
	_data27_->next_track_name = _tmp13_;
	_tmp14_ = _data27_->next_track_name;
	gtk_widget_set_valign ((GtkWidget*) _tmp14_, GTK_ALIGN_START);
	_tmp15_ = _data27_->next_track_name;
	gtk_widget_set_halign ((GtkWidget*) _tmp15_, GTK_ALIGN_START);
	_tmp16_ = _data27_->next_track_name;
	gtk_label_set_use_markup (_tmp16_, TRUE);
	_tmp17_ = _data27_->next_track_name;
	gtk_label_set_max_width_chars (_tmp17_, 31);
	_tmp18_ = _data27_->next_track_name;
	gtk_label_set_ellipsize (_tmp18_, PANGO_ELLIPSIZE_END);
	_tmp19_ = (GtkButton*) gtk_button_new_with_label (_ ("View all"));
	g_object_ref_sink (_tmp19_);
	view_button = _tmp19_;
	_tmp20_ = view_button;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp20_, TRUE);
	_tmp21_ = view_button;
	gtk_widget_set_halign ((GtkWidget*) _tmp21_, GTK_ALIGN_END);
	_tmp22_ = view_button;
	_tmp23_ = gtk_widget_get_style_context ((GtkWidget*) _tmp22_);
	gtk_style_context_add_class (_tmp23_, GTK_STYLE_CLASS_FLAT);
	_tmp24_ = view_button;
	_tmp25_ = gtk_widget_get_style_context ((GtkWidget*) _tmp24_);
	gtk_style_context_add_class (_tmp25_, "button-color");
	_tmp26_ = view_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp26_, FALSE);
	_tmp27_ = view_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp27_, GTK_ALIGN_CENTER);
	_tmp28_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp28_);
	_data27_->next_track_grid = _tmp28_;
	_tmp29_ = _data27_->next_track_grid;
	gtk_grid_set_column_spacing (_tmp29_, 3);
	_tmp30_ = _data27_->next_track_grid;
	_tmp31_ = self->priv->image_cover;
	gtk_grid_attach (_tmp30_, (GtkWidget*) _tmp31_, 0, 0, 1, 2);
	_tmp32_ = _data27_->next_track_grid;
	_tmp33_ = next_track_label;
	gtk_grid_attach (_tmp32_, (GtkWidget*) _tmp33_, 1, 0, 1, 1);
	_tmp34_ = _data27_->next_track_grid;
	_tmp35_ = _data27_->next_track_name;
	gtk_grid_attach (_tmp34_, (GtkWidget*) _tmp35_, 1, 1, 1, 1);
	_tmp36_ = _data27_->next_track_grid;
	_tmp37_ = view_button;
	gtk_grid_attach (_tmp36_, (GtkWidget*) _tmp37_, 2, 0, 2, 2);
	_tmp38_ = (GtkEventBox*) gtk_event_box_new ();
	g_object_ref_sink (_tmp38_);
	top_eventbox = _tmp38_;
	_tmp39_ = top_eventbox;
	_tmp40_ = _data27_->next_track_grid;
	gtk_container_add ((GtkContainer*) _tmp39_, (GtkWidget*) _tmp40_);
	_tmp41_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp41_);
	_data27_->notification_image = _tmp41_;
	_tmp42_ = _data27_->notification_image;
	_tmp43_ = (GThemedIcon*) g_themed_icon_new ("byte-favorite-symbolic");
	_tmp44_ = _tmp43_;
	g_object_set (_tmp42_, "gicon", (GIcon*) _tmp44_, NULL);
	_g_object_unref0 (_tmp44_);
	_tmp45_ = _data27_->notification_image;
	gtk_image_set_pixel_size (_tmp45_, 16);
	_tmp46_ = _data27_->notification_image;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp46_, 1);
	_tmp47_ = _data27_->notification_image;
	gtk_widget_set_valign ((GtkWidget*) _tmp47_, GTK_ALIGN_CENTER);
	_tmp48_ = _data27_->notification_image;
	gtk_widget_set_halign ((GtkWidget*) _tmp48_, GTK_ALIGN_CENTER);
	_tmp49_ = _data27_->notification_image;
	_tmp50_ = gtk_widget_get_style_context ((GtkWidget*) _tmp49_);
	gtk_style_context_add_class (_tmp50_, "label-color-primary");
	_tmp51_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp51_);
	_data27_->notification_primary_label = _tmp51_;
	_tmp52_ = _data27_->notification_primary_label;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp52_, 6);
	_tmp53_ = _data27_->notification_primary_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp53_, GTK_ALIGN_END);
	_tmp54_ = _data27_->notification_primary_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp54_, GTK_ALIGN_START);
	_tmp55_ = _data27_->notification_primary_label;
	gtk_label_set_use_markup (_tmp55_, TRUE);
	_tmp56_ = _data27_->notification_primary_label;
	_tmp57_ = gtk_widget_get_style_context ((GtkWidget*) _tmp56_);
	gtk_style_context_add_class (_tmp57_, "label-color-primary");
	_tmp58_ = _data27_->notification_primary_label;
	_tmp59_ = gtk_widget_get_style_context ((GtkWidget*) _tmp58_);
	gtk_style_context_add_class (_tmp59_, "font-bold");
	_tmp60_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp60_);
	_data27_->notification_secondary_label = _tmp60_;
	_tmp61_ = _data27_->notification_secondary_label;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp61_, 6);
	_tmp62_ = _data27_->notification_secondary_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp62_, GTK_ALIGN_START);
	_tmp63_ = _data27_->notification_secondary_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp63_, GTK_ALIGN_START);
	_tmp64_ = _data27_->notification_secondary_label;
	gtk_label_set_use_markup (_tmp64_, TRUE);
	_tmp65_ = _data27_->notification_secondary_label;
	gtk_label_set_max_width_chars (_tmp65_, 31);
	_tmp66_ = _data27_->notification_secondary_label;
	gtk_label_set_ellipsize (_tmp66_, PANGO_ELLIPSIZE_END);
	_tmp67_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp67_);
	notification_grid = _tmp67_;
	_tmp68_ = notification_grid;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp68_, 6);
	_tmp69_ = notification_grid;
	gtk_grid_set_column_spacing (_tmp69_, 3);
	_tmp70_ = notification_grid;
	_tmp71_ = _data27_->notification_image;
	gtk_grid_attach (_tmp70_, (GtkWidget*) _tmp71_, 0, 0, 1, 2);
	_tmp72_ = notification_grid;
	_tmp73_ = _data27_->notification_primary_label;
	gtk_grid_attach (_tmp72_, (GtkWidget*) _tmp73_, 1, 0, 1, 1);
	_tmp74_ = notification_grid;
	_tmp75_ = _data27_->notification_secondary_label;
	gtk_grid_attach (_tmp74_, (GtkWidget*) _tmp75_, 1, 1, 1, 1);
	_tmp76_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp76_);
	sync_image = _tmp76_;
	_tmp77_ = sync_image;
	_tmp78_ = (GThemedIcon*) g_themed_icon_new ("emblem-synchronizing-symbolic");
	_tmp79_ = _tmp78_;
	g_object_set (_tmp77_, "gicon", (GIcon*) _tmp79_, NULL);
	_g_object_unref0 (_tmp79_);
	_tmp80_ = sync_image;
	gtk_image_set_pixel_size (_tmp80_, 24);
	_tmp81_ = sync_image;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp81_, 1);
	_tmp82_ = sync_image;
	gtk_widget_set_valign ((GtkWidget*) _tmp82_, GTK_ALIGN_CENTER);
	_tmp83_ = sync_image;
	gtk_widget_set_halign ((GtkWidget*) _tmp83_, GTK_ALIGN_CENTER);
	_tmp84_ = sync_image;
	_tmp85_ = gtk_widget_get_style_context ((GtkWidget*) _tmp84_);
	gtk_style_context_add_class (_tmp85_, "sync-image");
	_tmp86_ = g_strdup_printf ("<small>%s</small>", _ ("Syncing Library…"));
	_tmp87_ = _tmp86_;
	_tmp88_ = (GtkLabel*) gtk_label_new (_tmp87_);
	g_object_ref_sink (_tmp88_);
	_tmp89_ = _tmp88_;
	_g_free0 (_tmp87_);
	sync_label = _tmp89_;
	_tmp90_ = sync_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp90_, GTK_ALIGN_END);
	_tmp91_ = sync_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp91_, GTK_ALIGN_START);
	_tmp92_ = sync_label;
	gtk_label_set_use_markup (_tmp92_, TRUE);
	_tmp93_ = sync_label;
	_tmp94_ = gtk_widget_get_style_context ((GtkWidget*) _tmp93_);
	gtk_style_context_add_class (_tmp94_, "search-title");
	_tmp95_ = sync_label;
	_tmp96_ = gtk_widget_get_style_context ((GtkWidget*) _tmp95_);
	gtk_style_context_add_class (_tmp96_, "font-bold");
	_tmp97_ = (GtkProgressBar*) gtk_progress_bar_new ();
	g_object_ref_sink (_tmp97_);
	_data27_->sync_progressbar = _tmp97_;
	_tmp98_ = _data27_->sync_progressbar;
	gtk_widget_set_valign ((GtkWidget*) _tmp98_, GTK_ALIGN_START);
	_tmp99_ = _data27_->sync_progressbar;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp99_, TRUE);
	_tmp100_ = _data27_->sync_progressbar;
	_tmp101_ = gtk_widget_get_style_context ((GtkWidget*) _tmp100_);
	gtk_style_context_add_class (_tmp101_, "label-white");
	_tmp102_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp102_);
	sync_grid = _tmp102_;
	_tmp103_ = sync_grid;
	gtk_widget_set_valign ((GtkWidget*) _tmp103_, GTK_ALIGN_CENTER);
	_tmp104_ = sync_grid;
	gtk_grid_set_row_spacing (_tmp104_, 3);
	_tmp105_ = sync_grid;
	gtk_grid_set_column_spacing (_tmp105_, 6);
	_tmp106_ = sync_grid;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp106_, 6);
	_tmp107_ = sync_grid;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp107_, 6);
	_tmp108_ = sync_grid;
	_tmp109_ = sync_image;
	gtk_grid_attach (_tmp108_, (GtkWidget*) _tmp109_, 0, 0, 1, 2);
	_tmp110_ = sync_grid;
	_tmp111_ = sync_label;
	gtk_grid_attach (_tmp110_, (GtkWidget*) _tmp111_, 1, 0, 1, 1);
	_tmp112_ = sync_grid;
	_tmp113_ = _data27_->sync_progressbar;
	gtk_grid_attach (_tmp112_, (GtkWidget*) _tmp113_, 1, 1, 1, 1);
	_tmp114_ = (GtkStack*) gtk_stack_new ();
	g_object_ref_sink (_tmp114_);
	_data27_->top_stack = _tmp114_;
	_tmp115_ = _data27_->top_stack;
	g_object_set ((GtkWidget*) _tmp115_, "expand", TRUE, NULL);
	_tmp116_ = _data27_->top_stack;
	gtk_stack_set_transition_type (_tmp116_, GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN);
	_tmp117_ = _data27_->top_stack;
	_tmp118_ = top_eventbox;
	gtk_stack_add_named (_tmp117_, (GtkWidget*) _tmp118_, "top_eventbox");
	_tmp119_ = _data27_->top_stack;
	_tmp120_ = sync_grid;
	gtk_stack_add_named (_tmp119_, (GtkWidget*) _tmp120_, "sync_grid");
	_tmp121_ = _data27_->top_stack;
	_tmp122_ = notification_grid;
	gtk_stack_add_named (_tmp121_, (GtkWidget*) _tmp122_, "notification_grid");
	_tmp123_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp123_);
	_data27_->top_revealer = _tmp123_;
	_tmp124_ = _data27_->top_revealer;
	gtk_revealer_set_transition_type (_tmp124_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
	_tmp125_ = _data27_->top_revealer;
	g_object_set ((GtkWidget*) _tmp125_, "expand", TRUE, NULL);
	_tmp126_ = _data27_->top_revealer;
	_tmp127_ = _data27_->top_stack;
	gtk_container_add ((GtkContainer*) _tmp126_, (GtkWidget*) _tmp127_);
	_tmp128_ = _data27_->top_revealer;
	gtk_revealer_set_reveal_child (_tmp128_, TRUE);
	_tmp129_ = (GtkLabel*) gtk_label_new ("Up Next");
	g_object_ref_sink (_tmp129_);
	title_label = _tmp129_;
	_tmp130_ = title_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp130_, GTK_ALIGN_START);
	_tmp131_ = (GtkButton*) gtk_button_new_with_label (_ ("Hide"));
	g_object_ref_sink (_tmp131_);
	hide_button = _tmp131_;
	_tmp132_ = hide_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp132_, FALSE);
	_tmp133_ = hide_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp133_, GTK_ALIGN_CENTER);
	_tmp134_ = hide_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp134_, GTK_ALIGN_CENTER);
	_tmp135_ = hide_button;
	_tmp136_ = gtk_widget_get_style_context ((GtkWidget*) _tmp135_);
	gtk_style_context_add_class (_tmp136_, GTK_STYLE_CLASS_FLAT);
	_tmp137_ = granite_widgets_mode_button_new ();
	g_object_ref_sink (_tmp137_);
	mode_button = _tmp137_;
	_tmp138_ = mode_button;
	_tmp139_ = gtk_widget_get_style_context ((GtkWidget*) _tmp138_);
	gtk_style_context_add_class (_tmp139_, "mode-button");
	_tmp140_ = mode_button;
	g_object_set ((GtkWidget*) _tmp140_, "margin", 3, NULL);
	_tmp141_ = mode_button;
	granite_widgets_mode_button_append_text (_tmp141_, _ ("Up Next"));
	_tmp142_ = mode_button;
	granite_widgets_mode_button_set_selected (_tmp142_, 0);
	_tmp143_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp143_);
	title_box = _tmp143_;
	_tmp144_ = title_box;
	_tmp145_ = gtk_widget_get_style_context ((GtkWidget*) _tmp144_);
	gtk_style_context_add_class (_tmp145_, "queue-title");
	_tmp146_ = title_box;
	_tmp147_ = mode_button;
	gtk_box_set_center_widget (_tmp146_, (GtkWidget*) _tmp147_);
	_tmp148_ = title_box;
	_tmp149_ = hide_button;
	gtk_box_pack_end (_tmp148_, (GtkWidget*) _tmp149_, FALSE, FALSE, (guint) 0);
	_tmp150_ = (GtkEventBox*) gtk_event_box_new ();
	g_object_ref_sink (_tmp150_);
	title_eventbox = _tmp150_;
	_tmp151_ = title_eventbox;
	_tmp152_ = title_box;
	gtk_container_add ((GtkContainer*) _tmp151_, (GtkWidget*) _tmp152_);
	_tmp153_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp153_);
	_data27_->title_revealer = _tmp153_;
	_tmp154_ = _data27_->title_revealer;
	gtk_revealer_set_transition_type (_tmp154_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
	_tmp155_ = _data27_->title_revealer;
	g_object_set ((GtkWidget*) _tmp155_, "expand", TRUE, NULL);
	_tmp156_ = _data27_->title_revealer;
	_tmp157_ = title_eventbox;
	gtk_container_add ((GtkContainer*) _tmp156_, (GtkWidget*) _tmp157_);
	_tmp158_ = _data27_->title_revealer;
	gtk_revealer_set_reveal_child (_tmp158_, FALSE);
	_tmp159_ = (GtkListBox*) gtk_list_box_new ();
	g_object_ref_sink (_tmp159_);
	_g_object_unref0 (self->priv->listbox);
	self->priv->listbox = _tmp159_;
	_tmp160_ = self->priv->listbox;
	g_object_set ((GtkWidget*) _tmp160_, "expand", TRUE, NULL);
	_tmp161_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
	g_object_ref_sink (_tmp161_);
	queue_scrolled = _tmp161_;
	_tmp162_ = queue_scrolled;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp162_, 6);
	_tmp163_ = queue_scrolled;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp163_, 3);
	_tmp164_ = queue_scrolled;
	g_object_set ((GtkWidget*) _tmp164_, "height-request", 275, NULL);
	_tmp165_ = queue_scrolled;
	g_object_set (_tmp165_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
	_tmp166_ = queue_scrolled;
	g_object_set ((GtkWidget*) _tmp166_, "expand", TRUE, NULL);
	_tmp167_ = queue_scrolled;
	_tmp168_ = self->priv->listbox;
	gtk_container_add ((GtkContainer*) _tmp167_, (GtkWidget*) _tmp168_);
	_tmp169_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp169_);
	_data27_->tracks_revealer = _tmp169_;
	_tmp170_ = _data27_->tracks_revealer;
	gtk_revealer_set_transition_type (_tmp170_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
	_tmp171_ = _data27_->tracks_revealer;
	g_object_set ((GtkWidget*) _tmp171_, "expand", TRUE, NULL);
	_tmp172_ = _data27_->tracks_revealer;
	_tmp173_ = queue_scrolled;
	gtk_container_add ((GtkContainer*) _tmp172_, (GtkWidget*) _tmp173_);
	_tmp174_ = _data27_->tracks_revealer;
	gtk_revealer_set_reveal_child (_tmp174_, FALSE);
	_tmp175_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp175_);
	main_box = _tmp175_;
	_tmp176_ = main_box;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp176_, 6);
	_tmp177_ = main_box;
	g_object_set ((GtkWidget*) _tmp177_, "width-request", 325, NULL);
	_tmp178_ = main_box;
	_tmp179_ = gtk_widget_get_style_context ((GtkWidget*) _tmp178_);
	gtk_style_context_add_class (_tmp179_, "queue");
	_tmp180_ = main_box;
	_tmp181_ = _data27_->title_revealer;
	gtk_box_pack_start (_tmp180_, (GtkWidget*) _tmp181_, TRUE, FALSE, (guint) 0);
	_tmp182_ = main_box;
	_tmp183_ = _data27_->top_revealer;
	gtk_box_pack_start (_tmp182_, (GtkWidget*) _tmp183_, FALSE, FALSE, (guint) 0);
	_tmp184_ = main_box;
	_tmp185_ = _data27_->tracks_revealer;
	gtk_box_pack_start (_tmp184_, (GtkWidget*) _tmp185_, TRUE, TRUE, (guint) 0);
	_tmp186_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp186_);
	_tmp187_ = byte_utils;
	g_signal_connect_data (_tmp187_, "play-items", (GCallback) __widgets_queue___lambda313__utils_play_items, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp188_ = byte_player;
	g_signal_connect_data (_tmp188_, "current-track-changed", (GCallback) __widgets_queue___lambda316__services_player_current_track_changed, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp189_ = byte_player;
	g_signal_connect_object (_tmp189_, "state-changed", (GCallback) __widgets_queue___lambda318__services_player_state_changed, self, 0);
	_tmp190_ = byte_utils;
	g_signal_connect_data (_tmp190_, "update-next-track", (GCallback) __widgets_queue___lambda319__utils_update_next_track, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp191_ = byte_player;
	g_signal_connect_object (_tmp191_, "mode-changed", (GCallback) __widgets_queue___lambda320__services_player_mode_changed, self, 0);
	_tmp192_ = byte_utils;
	g_signal_connect_object (_tmp192_, "add-next-track", (GCallback) __widgets_queue___lambda321__utils_add_next_track, self, 0);
	_tmp193_ = byte_utils;
	g_signal_connect_object (_tmp193_, "add-last-track", (GCallback) __widgets_queue___lambda323__utils_add_last_track, self, 0);
	_tmp194_ = queue_scrolled;
	g_signal_connect_object (_tmp194_, "edge-reached", (GCallback) __widgets_queue___lambda325__gtk_scrolled_window_edge_reached, self, 0);
	_tmp195_ = hide_button;
	g_signal_connect_data (_tmp195_, "clicked", (GCallback) __widgets_queue___lambda326__gtk_button_clicked, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp196_ = view_button;
	g_signal_connect_data (_tmp196_, "clicked", (GCallback) __widgets_queue___lambda327__gtk_button_clicked, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp197_ = top_eventbox;
	g_signal_connect_data ((GtkWidget*) _tmp197_, "event", (GCallback) __widgets_queue___lambda328__gtk_widget_event, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp198_ = title_eventbox;
	g_signal_connect_data ((GtkWidget*) _tmp198_, "event", (GCallback) __widgets_queue___lambda329__gtk_widget_event, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp199_ = self->priv->listbox;
	g_signal_connect_object (_tmp199_, "row-activated", (GCallback) __widgets_queue___lambda330__gtk_list_box_row_activated, self, 0);
	_tmp200_ = byte_database;
	g_signal_connect_data (_tmp200_, "updated-track-favorite", (GCallback) __widgets_queue___lambda332__services_database_updated_track_favorite, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp201_ = byte_scan_service;
	g_signal_connect_data (_tmp201_, "sync-started", (GCallback) __widgets_queue___lambda334__services_scan_sync_started, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp202_ = byte_scan_service;
	g_signal_connect_data (_tmp202_, "sync-finished", (GCallback) __widgets_queue___lambda335__services_scan_sync_finished, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_tmp203_ = byte_scan_service;
	g_signal_connect_data (_tmp203_, "sync-progress", (GCallback) __widgets_queue___lambda336__services_scan_sync_progress, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (queue_scrolled);
	_g_object_unref0 (title_eventbox);
	_g_object_unref0 (title_box);
	_g_object_unref0 (mode_button);
	_g_object_unref0 (hide_button);
	_g_object_unref0 (title_label);
	_g_object_unref0 (sync_grid);
	_g_object_unref0 (sync_label);
	_g_object_unref0 (sync_image);
	_g_object_unref0 (notification_grid);
	_g_object_unref0 (top_eventbox);
	_g_object_unref0 (view_button);
	_g_object_unref0 (next_track_label);
	block27_data_unref (_data27_);
	_data27_ = NULL;
	return obj;
}


static void
widgets_queue_class_init (WidgetsQueueClass * klass)
{
	widgets_queue_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsQueuePrivate));
	G_OBJECT_CLASS (klass)->constructor = widgets_queue_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_queue_finalize;
}


static void
widgets_queue_instance_init (WidgetsQueue * self)
{
	self->priv = WIDGETS_QUEUE_GET_PRIVATE (self);
}


static void
widgets_queue_finalize (GObject * obj)
{
	WidgetsQueue * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_QUEUE, WidgetsQueue);
	_g_object_unref0 (self->priv->image_cover);
	_g_object_unref0 (self->priv->listbox);
	_g_object_unref0 (self->priv->items);
	G_OBJECT_CLASS (widgets_queue_parent_class)->finalize (obj);
}


GType
widgets_queue_get_type (void)
{
	static volatile gsize widgets_queue_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_queue_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsQueueClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_queue_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsQueue), 0, (GInstanceInitFunc) widgets_queue_instance_init, NULL };
		GType widgets_queue_type_id;
		widgets_queue_type_id = g_type_register_static (gtk_revealer_get_type (), "WidgetsQueue", &g_define_type_info, 0);
		g_once_init_leave (&widgets_queue_type_id__volatile, widgets_queue_type_id);
	}
	return widgets_queue_type_id__volatile;
}



