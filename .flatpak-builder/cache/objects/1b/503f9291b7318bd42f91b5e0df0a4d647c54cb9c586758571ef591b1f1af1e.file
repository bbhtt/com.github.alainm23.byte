/* MediaControl.c generated by valac 0.40.11, the Vala compiler
 * generated from MediaControl.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <granite.h>
#include <gee.h>
#include <glib/gi18n-lib.h>
#include <stdlib.h>
#include <string.h>
#include <pango/pango.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <float.h>
#include <math.h>
#include <gst/gst.h>
#include <gio/gio.h>
#include <stdio.h>


#define WIDGETS_TYPE_MEDIA_CONTROL (widgets_media_control_get_type ())
#define WIDGETS_MEDIA_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MEDIA_CONTROL, WidgetsMediaControl))
#define WIDGETS_MEDIA_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MEDIA_CONTROL, WidgetsMediaControlClass))
#define WIDGETS_IS_MEDIA_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MEDIA_CONTROL))
#define WIDGETS_IS_MEDIA_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MEDIA_CONTROL))
#define WIDGETS_MEDIA_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MEDIA_CONTROL, WidgetsMediaControlClass))

typedef struct _WidgetsMediaControl WidgetsMediaControl;
typedef struct _WidgetsMediaControlClass WidgetsMediaControlClass;
typedef struct _WidgetsMediaControlPrivate WidgetsMediaControlPrivate;
enum  {
	WIDGETS_MEDIA_CONTROL_0_PROPERTY,
	WIDGETS_MEDIA_CONTROL_NUM_PROPERTIES
};
static GParamSpec* widgets_media_control_properties[WIDGETS_MEDIA_CONTROL_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;
typedef struct _Block19Data Block19Data;

#define SERVICES_TYPE_SCAN (services_scan_get_type ())
#define SERVICES_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SCAN, ServicesScan))
#define SERVICES_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SCAN, ServicesScanClass))
#define SERVICES_IS_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SCAN))
#define SERVICES_IS_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SCAN))
#define SERVICES_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SCAN, ServicesScanClass))

typedef struct _ServicesScan ServicesScan;
typedef struct _ServicesScanClass ServicesScanClass;
typedef struct _ServicesScanPrivate ServicesScanPrivate;

#define OBJECTS_TYPE_PLAYLIST (objects_playlist_get_type ())
#define OBJECTS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylist))
#define OBJECTS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))
#define OBJECTS_IS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_IS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))

typedef struct _ObjectsPlaylist ObjectsPlaylist;
typedef struct _ObjectsPlaylistClass ObjectsPlaylistClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _ObjectsTrackPrivate ObjectsTrackPrivate;
typedef struct _Block20Data Block20Data;
typedef struct _ObjectsPlaylistPrivate ObjectsPlaylistPrivate;
typedef struct _Block21Data Block21Data;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define WIDGETS_TYPE_MENU_ITEM (widgets_menu_item_get_type ())
#define WIDGETS_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MENU_ITEM, WidgetsMenuItem))
#define WIDGETS_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MENU_ITEM, WidgetsMenuItemClass))
#define WIDGETS_IS_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MENU_ITEM))
#define WIDGETS_IS_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MENU_ITEM))
#define WIDGETS_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MENU_ITEM, WidgetsMenuItemClass))

typedef struct _WidgetsMenuItem WidgetsMenuItem;
typedef struct _WidgetsMenuItemClass WidgetsMenuItemClass;

#define DIALOGS_TYPE_TRACK_EDITOR (dialogs_track_editor_get_type ())
#define DIALOGS_TRACK_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_TRACK_EDITOR, DialogsTrackEditor))
#define DIALOGS_TRACK_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_TRACK_EDITOR, DialogsTrackEditorClass))
#define DIALOGS_IS_TRACK_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_TRACK_EDITOR))
#define DIALOGS_IS_TRACK_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_TRACK_EDITOR))
#define DIALOGS_TRACK_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_TRACK_EDITOR, DialogsTrackEditorClass))

typedef struct _DialogsTrackEditor DialogsTrackEditor;
typedef struct _DialogsTrackEditorClass DialogsTrackEditorClass;

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;
typedef struct _Block22Data Block22Data;

#define SERVICES_TYPE_PLAYER (services_player_get_type ())
#define SERVICES_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_PLAYER, ServicesPlayer))
#define SERVICES_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_PLAYER, ServicesPlayerClass))
#define SERVICES_IS_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_PLAYER))
#define SERVICES_IS_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_PLAYER))
#define SERVICES_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_PLAYER, ServicesPlayerClass))

typedef struct _ServicesPlayer ServicesPlayer;
typedef struct _ServicesPlayerClass ServicesPlayerClass;

#define OBJECTS_TYPE_RADIO (objects_radio_get_type ())
#define OBJECTS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_RADIO, ObjectsRadio))
#define OBJECTS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_RADIO, ObjectsRadioClass))
#define OBJECTS_IS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_RADIO))
#define OBJECTS_IS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_RADIO))
#define OBJECTS_RADIO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_RADIO, ObjectsRadioClass))

typedef struct _ObjectsRadio ObjectsRadio;
typedef struct _ObjectsRadioClass ObjectsRadioClass;

#define SERVICES_TYPE_LASTFM (services_lastfm_get_type ())
#define SERVICES_LASTFM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_LASTFM, ServicesLastfm))
#define SERVICES_LASTFM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_LASTFM, ServicesLastfmClass))
#define SERVICES_IS_LASTFM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_LASTFM))
#define SERVICES_IS_LASTFM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_LASTFM))
#define SERVICES_LASTFM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_LASTFM, ServicesLastfmClass))

typedef struct _ServicesLastfm ServicesLastfm;
typedef struct _ServicesLastfmClass ServicesLastfmClass;
typedef struct _Block23Data Block23Data;

struct _WidgetsMediaControl {
	GtkRevealer parent_instance;
	WidgetsMediaControlPrivate * priv;
};

struct _WidgetsMediaControlClass {
	GtkRevealerClass parent_class;
};

struct _WidgetsMediaControlPrivate {
	GraniteSeekBar* timeline;
	GtkLabel* title_label;
	GtkLabel* subtitle_label;
	GtkImage* icon_favorite;
	GtkImage* icon_no_favorite;
	GtkMenu* playlists;
	GtkMenu* menu;
};

struct _Block19Data {
	int _ref_count_;
	WidgetsMediaControl* self;
	ObjectsTrack* track;
};

struct _ServicesScan {
	GObject parent_instance;
	ServicesScanPrivate * priv;
	gint counter;
	gint counter_max;
	gboolean is_sync;
};

struct _ServicesScanClass {
	GObjectClass parent_class;
};

struct _ObjectsTrack {
	GObject parent_instance;
	ObjectsTrackPrivate * priv;
	gint track_order;
	gint id;
	gint album_id;
	gint track;
	gint disc;
	gint play_count;
	gint is_favorite;
	gint bitrate;
	gint bpm;
	gint rating;
	gint samplerate;
	gint channels;
	gint year;
	gint playlist;
	guint64 duration;
	gchar* path;
	gchar* title;
	gchar* favorite_added;
	gchar* last_played;
	gchar* album_title;
	gchar* artist_name;
	gchar* composer;
	gchar* grouping;
	gchar* comment;
	gchar* lyrics;
	gchar* genre;
	gchar* album_artist;
	gchar* date_added;
};

struct _ObjectsTrackClass {
	GObjectClass parent_class;
};

struct _Block20Data {
	int _ref_count_;
	Block19Data * _data19_;
	ObjectsPlaylist* playlist;
};

struct _ObjectsPlaylist {
	GObject parent_instance;
	ObjectsPlaylistPrivate * priv;
	gint id;
	gchar* title;
	gchar* note;
	gchar* date_added;
	gchar* date_updated;
	gint num_tracks;
};

struct _ObjectsPlaylistClass {
	GObjectClass parent_class;
};

struct _Block21Data {
	int _ref_count_;
	WidgetsMediaControl* self;
	ObjectsTrack* track;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};

struct _Block22Data {
	int _ref_count_;
	WidgetsMediaControl* self;
	GtkRevealer* timeline_revealer;
	GtkRevealer* favorite_revealer;
	WidgetsCover* image_cover;
};

struct _Block23Data {
	int _ref_count_;
	Block22Data * _data22_;
	gint track_id;
};


static gpointer widgets_media_control_parent_class = NULL;
extern ServicesScan* byte_scan_service;
extern ServicesDatabase* byte_database;
extern Utils* byte_utils;
extern ServicesPlayer* byte_player;
extern ServicesLastfm* byte_lastfm_service;

GType widgets_media_control_get_type (void) G_GNUC_CONST;
#define WIDGETS_MEDIA_CONTROL_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_MEDIA_CONTROL, WidgetsMediaControlPrivate))
WidgetsMediaControl* widgets_media_control_new (void);
WidgetsMediaControl* widgets_media_control_construct (GType object_type);
GType objects_track_get_type (void) G_GNUC_CONST;
static void widgets_media_control_activate_menu (WidgetsMediaControl* self,
                                          ObjectsTrack* track);
static Block19Data* block19_data_ref (Block19Data* _data19_);
static void block19_data_unref (void * _userdata_);
static void widgets_media_control_build_context_menu (WidgetsMediaControl* self,
                                               ObjectsTrack* track);
GType services_scan_get_type (void) G_GNUC_CONST;
GType objects_playlist_get_type (void) G_GNUC_CONST;
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_playlists (ServicesDatabase* self);
static void ___lambda52_ (Block19Data* _data19_);
ObjectsPlaylist* services_database_create_new_playlist (ServicesDatabase* self);
void services_database_insert_track_into_playlist (ServicesDatabase* self,
                                                   ObjectsPlaylist* playlist,
                                                   gint track_id);
static void ____lambda52__gtk_menu_item_activate (GtkMenuItem* _sender,
                                           gpointer self);
static Block20Data* block20_data_ref (Block20Data* _data20_);
static void block20_data_unref (void * _userdata_);
static void _____lambda53_ (Block20Data* _data20_);
static void ______lambda53__gtk_menu_item_activate (GtkMenuItem* _sender,
                                             gpointer self);
static Block21Data* block21_data_ref (Block21Data* _data21_);
static void block21_data_unref (void * _userdata_);
GType utils_get_type (void) G_GNUC_CONST;
GType widgets_menu_item_get_type (void) G_GNUC_CONST;
WidgetsMenuItem* widgets_menu_item_new (const gchar* _text,
                                        const gchar* _icon,
                                        const gchar* _tooltip);
WidgetsMenuItem* widgets_menu_item_construct (GType object_type,
                                              const gchar* _text,
                                              const gchar* _icon,
                                              const gchar* _tooltip);
static void __lambda40_ (WidgetsMediaControl* self);
static void ___lambda40__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda41_ (WidgetsMediaControl* self);
static void ___lambda41__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda42_ (Block21Data* _data21_);
void utils_set_next_track (Utils* self,
                           ObjectsTrack* track);
static void ___lambda42__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda43_ (Block21Data* _data21_);
void utils_set_last_track (Utils* self,
                           ObjectsTrack* track);
static void ___lambda43__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda44_ (Block21Data* _data21_);
void services_database_set_track_favorite (ServicesDatabase* self,
                                           ObjectsTrack* track,
                                           gint favorite);
static void ___lambda44__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda45_ (Block21Data* _data21_);
static void ___lambda45__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda46_ (WidgetsMediaControl* self);
static void ___lambda46__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda47_ (Block21Data* _data21_);
GType dialogs_track_editor_get_type (void) G_GNUC_CONST;
DialogsTrackEditor* dialogs_track_editor_new (ObjectsTrack* track);
DialogsTrackEditor* dialogs_track_editor_construct (GType object_type,
                                                    ObjectsTrack* track);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void ___lambda47__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda49_ (Block21Data* _data21_);
void services_database_remove_from_library (ServicesDatabase* self,
                                            ObjectsTrack* track);
static void ___lambda49__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda50_ (WidgetsMediaControl* self);
static void ___lambda50__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static void __lambda51_ (Block21Data* _data21_);
gboolean services_database_remove_from_playlist (ServicesDatabase* self,
                                                 ObjectsTrack* track);
static void ___lambda51__gtk_menu_item_activate (GtkMenuItem* _sender,
                                          gpointer self);
static GObject * widgets_media_control_constructor (GType type,
                                             guint n_construct_properties,
                                             GObjectConstructParam * construct_properties);
GType widgets_cover_get_type (void) G_GNUC_CONST;
static Block22Data* block22_data_ref (Block22Data* _data22_);
static void block22_data_unref (void * _userdata_);
WidgetsCover* widgets_cover_new (void);
WidgetsCover* widgets_cover_construct (GType object_type);
GType services_player_get_type (void) G_GNUC_CONST;
static void _widgets_media_control___lambda54_ (WidgetsMediaControl* self,
                                         gdouble progress);
gint64 services_player_get_duration (ServicesPlayer* self);
static void __widgets_media_control___lambda54__services_player_current_progress_changed (ServicesPlayer* _sender,
                                                                                   gdouble percent,
                                                                                   gpointer self);
static void _widgets_media_control___lambda55_ (WidgetsMediaControl* self,
                                         gint64 duration);
static void __widgets_media_control___lambda55__services_player_current_duration_changed (ServicesPlayer* _sender,
                                                                                   gint64 duration,
                                                                                   gpointer self);
static void _widgets_media_control___lambda56_ (Block22Data* _data22_,
                                         ObjectsTrack* track);
void widgets_cover_set_from_file (WidgetsCover* self,
                                  const gchar* filepath,
                                  gint pixel_size,
                                  const gchar* type);
static void __widgets_media_control___lambda56__services_player_current_track_changed (ServicesPlayer* _sender,
                                                                                ObjectsTrack* track,
                                                                                gpointer self);
GType objects_radio_get_type (void) G_GNUC_CONST;
static void _widgets_media_control___lambda57_ (WidgetsMediaControl* self,
                                         ObjectsRadio* radio);
const gchar* objects_radio_get_name (ObjectsRadio* self);
static void __widgets_media_control___lambda57__services_player_current_radio_changed (ServicesPlayer* _sender,
                                                                                ObjectsRadio* radio,
                                                                                gpointer self);
static void _widgets_media_control___lambda58_ (WidgetsMediaControl* self,
                                         const gchar* title);
const gchar* services_player_get_mode (ServicesPlayer* self);
static void __widgets_media_control___lambda58__services_player_current_radio_title_changed (ServicesPlayer* _sender,
                                                                                      const gchar* title,
                                                                                      gpointer self);
static void _widgets_media_control___lambda59_ (WidgetsMediaControl* self,
                                         GstState state);
ObjectsTrack* services_player_get_current_track (ServicesPlayer* self);
static void __widgets_media_control___lambda59__services_player_state_changed (ServicesPlayer* _sender,
                                                                        GstState state,
                                                                        gpointer self);
static void _widgets_media_control___lambda60_ (Block22Data* _data22_,
                                         const gchar* mode);
static void __widgets_media_control___lambda60__services_player_mode_changed (ServicesPlayer* _sender,
                                                                       const gchar* mode,
                                                                       gpointer self);
GType services_lastfm_get_type (void) G_GNUC_CONST;
static void _widgets_media_control___lambda67_ (Block22Data* _data22_,
                                         const gchar* track_url);
void widgets_cover_set_from_url_async (WidgetsCover* self,
                                       const gchar* uri,
                                       gint pixel_size,
                                       gboolean preserve_aspect_ratio,
                                       const gchar* type,
                                       GCancellable* cancellable);
static void __widgets_media_control___lambda67__services_lastfm_radio_cover_track_found (ServicesLastfm* _sender,
                                                                                  const gchar* url,
                                                                                  gpointer self);
static void _widgets_media_control___lambda68_ (Block22Data* _data22_,
                                         gint track_id);
static Block23Data* block23_data_ref (Block23Data* _data23_);
static void block23_data_unref (void * _userdata_);
static gboolean __lambda69_ (Block23Data* _data23_);
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
static gboolean ___lambda69__gsource_func (gpointer self);
static void __widgets_media_control___lambda68__services_database_updated_track_cover (ServicesDatabase* _sender,
                                                                                gint track_id,
                                                                                gpointer self);
static gboolean _widgets_media_control___lambda70_ (WidgetsMediaControl* self,
                                             GtkScrollType scroll,
                                             gdouble new_value);
void services_player_seek_to_progress (ServicesPlayer* self,
                                       gdouble percent);
static gboolean __widgets_media_control___lambda70__gtk_range_change_value (GtkRange* _sender,
                                                                     GtkScrollType scroll,
                                                                     gdouble new_value,
                                                                     gpointer self);
static void _widgets_media_control___lambda71_ (Block22Data* _data22_);
static void __widgets_media_control___lambda71__services_scan_sync_started (ServicesScan* _sender,
                                                                     gpointer self);
static void _widgets_media_control___lambda72_ (Block22Data* _data22_);
static void __widgets_media_control___lambda72__services_scan_sync_finished (ServicesScan* _sender,
                                                                      gpointer self);
static void _widgets_media_control___lambda73_ (WidgetsMediaControl* self);
static void __widgets_media_control___lambda73__gtk_button_clicked (GtkButton* _sender,
                                                             gpointer self);
static void widgets_media_control_finalize (GObject * obj);


WidgetsMediaControl*
widgets_media_control_construct (GType object_type)
{
	WidgetsMediaControl * self = NULL;
	self = (WidgetsMediaControl*) g_object_new (object_type, NULL);
	return self;
}


WidgetsMediaControl*
widgets_media_control_new (void)
{
	return widgets_media_control_construct (WIDGETS_TYPE_MEDIA_CONTROL);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static Block19Data*
block19_data_ref (Block19Data* _data19_)
{
	g_atomic_int_inc (&_data19_->_ref_count_);
	return _data19_;
}


static void
block19_data_unref (void * _userdata_)
{
	Block19Data* _data19_;
	_data19_ = (Block19Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data19_->_ref_count_)) {
		WidgetsMediaControl* self;
		self = _data19_->self;
		_g_object_unref0 (_data19_->track);
		_g_object_unref0 (self);
		g_slice_free (Block19Data, _data19_);
	}
}


static void
___lambda52_ (Block19Data* _data19_)
{
	WidgetsMediaControl* self;
	ObjectsPlaylist* new_playlist = NULL;
	ServicesDatabase* _tmp0_;
	ObjectsPlaylist* _tmp1_;
	ServicesDatabase* _tmp2_;
	gint _tmp3_;
	self = _data19_->self;
	_tmp0_ = byte_database;
	_tmp1_ = services_database_create_new_playlist (_tmp0_);
	new_playlist = _tmp1_;
	_tmp2_ = byte_database;
	_tmp3_ = _data19_->track->id;
	services_database_insert_track_into_playlist (_tmp2_, new_playlist, _tmp3_);
	_g_object_unref0 (new_playlist);
}


static void
____lambda52__gtk_menu_item_activate (GtkMenuItem* _sender,
                                      gpointer self)
{
	___lambda52_ (self);
}


static Block20Data*
block20_data_ref (Block20Data* _data20_)
{
	g_atomic_int_inc (&_data20_->_ref_count_);
	return _data20_;
}


static void
block20_data_unref (void * _userdata_)
{
	Block20Data* _data20_;
	_data20_ = (Block20Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data20_->_ref_count_)) {
		WidgetsMediaControl* self;
		self = _data20_->_data19_->self;
		_g_object_unref0 (_data20_->playlist);
		block19_data_unref (_data20_->_data19_);
		_data20_->_data19_ = NULL;
		g_slice_free (Block20Data, _data20_);
	}
}


static void
_____lambda53_ (Block20Data* _data20_)
{
	Block19Data* _data19_;
	WidgetsMediaControl* self;
	ServicesDatabase* _tmp0_;
	ObjectsPlaylist* _tmp1_;
	gint _tmp2_;
	_data19_ = _data20_->_data19_;
	self = _data19_->self;
	_tmp0_ = byte_database;
	_tmp1_ = _data20_->playlist;
	_tmp2_ = _data19_->track->id;
	services_database_insert_track_into_playlist (_tmp0_, _tmp1_, _tmp2_);
}


static void
______lambda53__gtk_menu_item_activate (GtkMenuItem* _sender,
                                        gpointer self)
{
	_____lambda53_ (self);
}


static void
widgets_media_control_activate_menu (WidgetsMediaControl* self,
                                     ObjectsTrack* track)
{
	Block19Data* _data19_;
	ObjectsTrack* _tmp0_;
	GtkMenu* _tmp1_;
	GList* _tmp2_;
	ServicesScan* _tmp4_;
	gboolean _tmp5_;
	GtkMenu* _tmp38_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (track != NULL);
	_data19_ = g_slice_new0 (Block19Data);
	_data19_->_ref_count_ = 1;
	_data19_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (track);
	_g_object_unref0 (_data19_->track);
	_data19_->track = _tmp0_;
	widgets_media_control_build_context_menu (self, _data19_->track);
	_tmp1_ = self->priv->playlists;
	_tmp2_ = gtk_container_get_children ((GtkContainer*) _tmp1_);
	{
		GList* child_collection = NULL;
		GList* child_it = NULL;
		child_collection = _tmp2_;
		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
			GtkWidget* child = NULL;
			child = (GtkWidget*) child_it->data;
			{
				GtkWidget* _tmp3_;
				_tmp3_ = child;
				gtk_widget_destroy (_tmp3_);
			}
		}
		(child_collection == NULL) ? NULL : (child_collection = (g_list_free (child_collection), NULL));
	}
	_tmp4_ = byte_scan_service;
	_tmp5_ = _tmp4_->is_sync;
	if (_tmp5_ == FALSE) {
		GeeArrayList* all_items = NULL;
		ServicesDatabase* _tmp6_;
		GeeArrayList* _tmp7_;
		GtkMenuItem* item = NULL;
		GtkMenuItem* _tmp8_;
		GtkMenuItem* _tmp9_;
		GtkStyleContext* _tmp10_;
		GtkMenuItem* _tmp11_;
		GtkStyleContext* _tmp12_;
		GtkMenuItem* _tmp13_;
		GtkMenu* _tmp14_;
		GtkMenuItem* _tmp15_;
		GtkMenu* _tmp37_;
		_tmp6_ = byte_database;
		_tmp7_ = services_database_get_all_playlists (_tmp6_);
		all_items = _tmp7_;
		_tmp8_ = (GtkMenuItem*) gtk_menu_item_new_with_label (_ ("Create New Playlist"));
		g_object_ref_sink (_tmp8_);
		item = _tmp8_;
		_tmp9_ = item;
		_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
		gtk_style_context_add_class (_tmp10_, "track-options");
		_tmp11_ = item;
		_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
		gtk_style_context_add_class (_tmp12_, "css-item");
		_tmp13_ = item;
		g_signal_connect_data (_tmp13_, "activate", (GCallback) ____lambda52__gtk_menu_item_activate, block19_data_ref (_data19_), (GClosureNotify) block19_data_unref, 0);
		_tmp14_ = self->priv->playlists;
		_tmp15_ = item;
		gtk_container_add ((GtkContainer*) _tmp14_, (GtkWidget*) _tmp15_);
		{
			GeeArrayList* _playlist_list = NULL;
			GeeArrayList* _tmp16_;
			GeeArrayList* _tmp17_;
			gint _playlist_size = 0;
			GeeArrayList* _tmp18_;
			gint _tmp19_;
			gint _tmp20_;
			gint _playlist_index = 0;
			_tmp16_ = all_items;
			_tmp17_ = _g_object_ref0 (_tmp16_);
			_playlist_list = _tmp17_;
			_tmp18_ = _playlist_list;
			_tmp19_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp18_);
			_tmp20_ = _tmp19_;
			_playlist_size = _tmp20_;
			_playlist_index = -1;
			while (TRUE) {
				Block20Data* _data20_;
				gint _tmp21_;
				gint _tmp22_;
				gint _tmp23_;
				GeeArrayList* _tmp24_;
				gint _tmp25_;
				gpointer _tmp26_;
				ObjectsPlaylist* _tmp27_;
				const gchar* _tmp28_;
				GtkMenuItem* _tmp29_;
				GtkMenuItem* _tmp30_;
				GtkStyleContext* _tmp31_;
				GtkMenuItem* _tmp32_;
				GtkStyleContext* _tmp33_;
				GtkMenuItem* _tmp34_;
				GtkMenu* _tmp35_;
				GtkMenuItem* _tmp36_;
				_data20_ = g_slice_new0 (Block20Data);
				_data20_->_ref_count_ = 1;
				_data20_->_data19_ = block19_data_ref (_data19_);
				_tmp21_ = _playlist_index;
				_playlist_index = _tmp21_ + 1;
				_tmp22_ = _playlist_index;
				_tmp23_ = _playlist_size;
				if (!(_tmp22_ < _tmp23_)) {
					block20_data_unref (_data20_);
					_data20_ = NULL;
					break;
				}
				_tmp24_ = _playlist_list;
				_tmp25_ = _playlist_index;
				_tmp26_ = gee_abstract_list_get ((GeeAbstractList*) _tmp24_, _tmp25_);
				_data20_->playlist = (ObjectsPlaylist*) _tmp26_;
				_tmp27_ = _data20_->playlist;
				_tmp28_ = _tmp27_->title;
				_tmp29_ = (GtkMenuItem*) gtk_menu_item_new_with_label (_tmp28_);
				g_object_ref_sink (_tmp29_);
				_g_object_unref0 (item);
				item = _tmp29_;
				_tmp30_ = item;
				_tmp31_ = gtk_widget_get_style_context ((GtkWidget*) _tmp30_);
				gtk_style_context_add_class (_tmp31_, "track-options");
				_tmp32_ = item;
				_tmp33_ = gtk_widget_get_style_context ((GtkWidget*) _tmp32_);
				gtk_style_context_add_class (_tmp33_, "css-item");
				_tmp34_ = item;
				g_signal_connect_data (_tmp34_, "activate", (GCallback) ______lambda53__gtk_menu_item_activate, block20_data_ref (_data20_), (GClosureNotify) block20_data_unref, 0);
				_tmp35_ = self->priv->playlists;
				_tmp36_ = item;
				gtk_container_add ((GtkContainer*) _tmp35_, (GtkWidget*) _tmp36_);
				block20_data_unref (_data20_);
				_data20_ = NULL;
			}
			_g_object_unref0 (_playlist_list);
		}
		_tmp37_ = self->priv->playlists;
		gtk_widget_show_all ((GtkWidget*) _tmp37_);
		_g_object_unref0 (item);
		_g_object_unref0 (all_items);
	}
	_tmp38_ = self->priv->menu;
	gtk_menu_popup_at_pointer (_tmp38_, NULL);
	block19_data_unref (_data19_);
	_data19_ = NULL;
}


static Block21Data*
block21_data_ref (Block21Data* _data21_)
{
	g_atomic_int_inc (&_data21_->_ref_count_);
	return _data21_;
}


static void
block21_data_unref (void * _userdata_)
{
	Block21Data* _data21_;
	_data21_ = (Block21Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data21_->_ref_count_)) {
		WidgetsMediaControl* self;
		self = _data21_->self;
		_g_object_unref0 (_data21_->track);
		_g_object_unref0 (self);
		g_slice_free (Block21Data, _data21_);
	}
}


static void
__lambda40_ (WidgetsMediaControl* self)
{
	gtk_widget_activate ((GtkWidget*) self);
}


static void
___lambda40__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda40_ ((WidgetsMediaControl*) self);
}


static void
__lambda41_ (WidgetsMediaControl* self)
{
	gtk_widget_activate ((GtkWidget*) self);
}


static void
___lambda41__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda41_ ((WidgetsMediaControl*) self);
}


static void
__lambda42_ (Block21Data* _data21_)
{
	WidgetsMediaControl* self;
	Utils* _tmp0_;
	self = _data21_->self;
	_tmp0_ = byte_utils;
	utils_set_next_track (_tmp0_, _data21_->track);
}


static void
___lambda42__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda42_ (self);
}


static void
__lambda43_ (Block21Data* _data21_)
{
	WidgetsMediaControl* self;
	Utils* _tmp0_;
	self = _data21_->self;
	_tmp0_ = byte_utils;
	utils_set_last_track (_tmp0_, _data21_->track);
}


static void
___lambda43__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda43_ (self);
}


static void
__lambda44_ (Block21Data* _data21_)
{
	WidgetsMediaControl* self;
	ServicesScan* _tmp0_;
	gboolean _tmp1_;
	self = _data21_->self;
	_tmp0_ = byte_scan_service;
	_tmp1_ = _tmp0_->is_sync;
	if (_tmp1_ == FALSE) {
		ServicesDatabase* _tmp2_;
		_tmp2_ = byte_database;
		services_database_set_track_favorite (_tmp2_, _data21_->track, 1);
	}
}


static void
___lambda44__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda44_ (self);
}


static void
__lambda45_ (Block21Data* _data21_)
{
	WidgetsMediaControl* self;
	ServicesScan* _tmp0_;
	gboolean _tmp1_;
	self = _data21_->self;
	_tmp0_ = byte_scan_service;
	_tmp1_ = _tmp0_->is_sync;
	if (_tmp1_ == FALSE) {
		ServicesDatabase* _tmp2_;
		_tmp2_ = byte_database;
		services_database_set_track_favorite (_tmp2_, _data21_->track, 0);
	}
}


static void
___lambda45__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda45_ (self);
}


static void
__lambda46_ (WidgetsMediaControl* self)
{
}


static void
___lambda46__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda46_ ((WidgetsMediaControl*) self);
}


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
	gtk_main_quit ();
}


static void
__lambda47_ (Block21Data* _data21_)
{
	WidgetsMediaControl* self;
	DialogsTrackEditor* editor_dialog = NULL;
	DialogsTrackEditor* _tmp0_;
	self = _data21_->self;
	_tmp0_ = dialogs_track_editor_new (_data21_->track);
	g_object_ref_sink (_tmp0_);
	editor_dialog = _tmp0_;
	g_signal_connect ((GtkWidget*) editor_dialog, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
	gtk_widget_show_all ((GtkWidget*) editor_dialog);
	_g_object_unref0 (editor_dialog);
}


static void
___lambda47__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda47_ (self);
}


static void
__lambda49_ (Block21Data* _data21_)
{
	WidgetsMediaControl* self;
	GraniteMessageDialog* message_dialog = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GraniteMessageDialog* _tmp3_;
	GraniteMessageDialog* _tmp4_;
	GtkButton* set_button = NULL;
	GtkButton* _tmp5_;
	GtkButton* _tmp6_;
	GtkStyleContext* _tmp7_;
	GraniteMessageDialog* _tmp8_;
	GtkButton* _tmp9_;
	GraniteMessageDialog* _tmp10_;
	GraniteMessageDialog* _tmp11_;
	GraniteMessageDialog* _tmp13_;
	self = _data21_->self;
	_tmp0_ = _data21_->track->title;
	_tmp1_ = g_strdup_printf (_ ("Are you sure you want to delete <b>%s</b> from your library?"), _tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Delete from library?"), _tmp2_, "dialog-warning", GTK_BUTTONS_CANCEL);
	g_object_ref_sink (_tmp3_);
	_tmp4_ = _tmp3_;
	_g_free0 (_tmp2_);
	message_dialog = _tmp4_;
	_tmp5_ = (GtkButton*) gtk_button_new_with_label (_ ("Delete"));
	g_object_ref_sink (_tmp5_);
	set_button = _tmp5_;
	_tmp6_ = set_button;
	_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
	gtk_style_context_add_class (_tmp7_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
	_tmp8_ = message_dialog;
	_tmp9_ = set_button;
	gtk_dialog_add_action_widget ((GtkDialog*) _tmp8_, (GtkWidget*) _tmp9_, (gint) GTK_RESPONSE_ACCEPT);
	_tmp10_ = message_dialog;
	gtk_widget_show_all ((GtkWidget*) _tmp10_);
	_tmp11_ = message_dialog;
	if (gtk_dialog_run ((GtkDialog*) _tmp11_) == ((gint) GTK_RESPONSE_ACCEPT)) {
		ServicesDatabase* _tmp12_;
		_tmp12_ = byte_database;
		services_database_remove_from_library (_tmp12_, _data21_->track);
	}
	_tmp13_ = message_dialog;
	gtk_widget_destroy ((GtkWidget*) _tmp13_);
	_g_object_unref0 (set_button);
	_g_object_unref0 (message_dialog);
}


static void
___lambda49__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda49_ (self);
}


static void
__lambda50_ (WidgetsMediaControl* self)
{
}


static void
___lambda50__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda50_ ((WidgetsMediaControl*) self);
}


static void
__lambda51_ (Block21Data* _data21_)
{
	WidgetsMediaControl* self;
	ServicesDatabase* _tmp0_;
	self = _data21_->self;
	_tmp0_ = byte_database;
	if (services_database_remove_from_playlist (_tmp0_, _data21_->track)) {
		gtk_widget_destroy ((GtkWidget*) self);
	}
}


static void
___lambda51__gtk_menu_item_activate (GtkMenuItem* _sender,
                                     gpointer self)
{
	__lambda51_ (self);
}


static void
widgets_media_control_build_context_menu (WidgetsMediaControl* self,
                                          ObjectsTrack* track)
{
	Block21Data* _data21_;
	ObjectsTrack* _tmp0_;
	GtkMenu* _tmp1_;
	GtkMenu* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkLabel* primary_label = NULL;
	const gchar* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkStyleContext* _tmp7_;
	GtkLabel* _tmp8_;
	GtkLabel* _tmp9_;
	GtkLabel* _tmp10_;
	GtkLabel* secondary_label = NULL;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	GtkLabel* _tmp15_;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkLabel* _tmp18_;
	GtkLabel* _tmp19_;
	gchar* cover_path = NULL;
	Utils* _tmp20_;
	const gchar* _tmp21_;
	gint _tmp22_;
	gchar* _tmp23_;
	gchar* _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_;
	GtkImage* image_cover = NULL;
	GtkImage* _tmp27_;
	GtkImage* _tmp28_;
	GtkImage* _tmp29_;
	GtkGrid* track_grid = NULL;
	GtkGrid* _tmp37_;
	GtkGrid* _tmp38_;
	GtkGrid* _tmp39_;
	GtkGrid* _tmp40_;
	GtkGrid* _tmp41_;
	GtkGrid* _tmp42_;
	GtkGrid* _tmp43_;
	GtkImage* _tmp44_;
	GtkGrid* _tmp45_;
	GtkLabel* _tmp46_;
	GtkGrid* _tmp47_;
	GtkLabel* _tmp48_;
	GtkMenuItem* track_menu = NULL;
	GtkMenuItem* _tmp49_;
	GtkMenuItem* _tmp50_;
	GtkStyleContext* _tmp51_;
	GtkMenuItem* _tmp52_;
	GtkStyleContext* _tmp53_;
	GtkMenuItem* _tmp54_;
	GtkMenuItem* _tmp55_;
	GtkGrid* _tmp56_;
	WidgetsMenuItem* play_menu = NULL;
	WidgetsMenuItem* _tmp57_;
	WidgetsMenuItem* play_next_menu = NULL;
	WidgetsMenuItem* _tmp58_;
	WidgetsMenuItem* play_last_menu = NULL;
	WidgetsMenuItem* _tmp59_;
	WidgetsMenuItem* add_playlist_menu = NULL;
	WidgetsMenuItem* _tmp60_;
	GtkMenu* _tmp61_;
	GtkMenu* _tmp62_;
	GtkStyleContext* _tmp63_;
	WidgetsMenuItem* _tmp64_;
	GtkMenu* _tmp65_;
	WidgetsMenuItem* edit_menu = NULL;
	WidgetsMenuItem* _tmp66_;
	WidgetsMenuItem* favorite_menu = NULL;
	WidgetsMenuItem* _tmp67_;
	WidgetsMenuItem* no_favorite_menu = NULL;
	WidgetsMenuItem* _tmp68_;
	WidgetsMenuItem* remove_db_menu = NULL;
	WidgetsMenuItem* _tmp69_;
	WidgetsMenuItem* remove_file_menu = NULL;
	WidgetsMenuItem* _tmp70_;
	WidgetsMenuItem* remove_playlist_menu = NULL;
	WidgetsMenuItem* _tmp71_;
	GtkMenu* _tmp72_;
	GtkMenuItem* _tmp73_;
	GtkMenu* _tmp74_;
	GtkSeparatorMenuItem* _tmp75_;
	GtkSeparatorMenuItem* _tmp76_;
	GtkMenu* _tmp77_;
	WidgetsMenuItem* _tmp78_;
	GtkMenu* _tmp79_;
	WidgetsMenuItem* _tmp80_;
	GtkMenu* _tmp81_;
	WidgetsMenuItem* _tmp82_;
	GtkMenu* _tmp83_;
	GtkSeparatorMenuItem* _tmp84_;
	GtkSeparatorMenuItem* _tmp85_;
	GtkMenu* _tmp86_;
	WidgetsMenuItem* _tmp87_;
	GtkMenu* _tmp88_;
	WidgetsMenuItem* _tmp89_;
	GtkMenu* _tmp90_;
	WidgetsMenuItem* _tmp91_;
	GtkMenu* _tmp92_;
	GtkSeparatorMenuItem* _tmp93_;
	GtkSeparatorMenuItem* _tmp94_;
	gint _tmp95_;
	GtkMenu* _tmp98_;
	WidgetsMenuItem* _tmp99_;
	GtkMenu* _tmp100_;
	GtkMenuItem* _tmp101_;
	WidgetsMenuItem* _tmp102_;
	WidgetsMenuItem* _tmp103_;
	WidgetsMenuItem* _tmp104_;
	WidgetsMenuItem* _tmp105_;
	WidgetsMenuItem* _tmp106_;
	WidgetsMenuItem* _tmp107_;
	WidgetsMenuItem* _tmp108_;
	WidgetsMenuItem* _tmp109_;
	WidgetsMenuItem* _tmp110_;
	WidgetsMenuItem* _tmp111_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (track != NULL);
	_data21_ = g_slice_new0 (Block21Data);
	_data21_->_ref_count_ = 1;
	_data21_->self = g_object_ref (self);
	_tmp0_ = _g_object_ref0 (track);
	_g_object_unref0 (_data21_->track);
	_data21_->track = _tmp0_;
	_tmp1_ = (GtkMenu*) gtk_menu_new ();
	g_object_ref_sink (_tmp1_);
	_g_object_unref0 (self->priv->menu);
	self->priv->menu = _tmp1_;
	_tmp2_ = self->priv->menu;
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
	gtk_style_context_add_class (_tmp3_, "view");
	_tmp4_ = _data21_->track->title;
	_tmp5_ = (GtkLabel*) gtk_label_new (_tmp4_);
	g_object_ref_sink (_tmp5_);
	primary_label = _tmp5_;
	_tmp6_ = primary_label;
	_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
	gtk_style_context_add_class (_tmp7_, "font-bold");
	_tmp8_ = primary_label;
	gtk_label_set_ellipsize (_tmp8_, PANGO_ELLIPSIZE_END);
	_tmp9_ = primary_label;
	gtk_label_set_max_width_chars (_tmp9_, 25);
	_tmp10_ = primary_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp10_, GTK_ALIGN_START);
	_tmp11_ = _data21_->track->artist_name;
	_tmp12_ = _data21_->track->album_title;
	_tmp13_ = g_strdup_printf ("%s - %s", _tmp11_, _tmp12_);
	_tmp14_ = _tmp13_;
	_tmp15_ = (GtkLabel*) gtk_label_new (_tmp14_);
	g_object_ref_sink (_tmp15_);
	_tmp16_ = _tmp15_;
	_g_free0 (_tmp14_);
	secondary_label = _tmp16_;
	_tmp17_ = secondary_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp17_, GTK_ALIGN_START);
	_tmp18_ = secondary_label;
	gtk_label_set_max_width_chars (_tmp18_, 25);
	_tmp19_ = secondary_label;
	gtk_label_set_ellipsize (_tmp19_, PANGO_ELLIPSIZE_END);
	_tmp20_ = byte_utils;
	_tmp21_ = _tmp20_->COVER_FOLDER;
	_tmp22_ = _data21_->track->id;
	_tmp23_ = g_strdup_printf ("track-%i.jpg", _tmp22_);
	_tmp24_ = _tmp23_;
	_tmp25_ = g_build_filename (_tmp21_, _tmp24_, NULL);
	_tmp26_ = _tmp25_;
	_g_free0 (_tmp24_);
	cover_path = _tmp26_;
	_tmp27_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp27_);
	image_cover = _tmp27_;
	_tmp28_ = image_cover;
	gtk_widget_set_halign ((GtkWidget*) _tmp28_, GTK_ALIGN_START);
	_tmp29_ = image_cover;
	gtk_widget_set_valign ((GtkWidget*) _tmp29_, GTK_ALIGN_START);
	{
		GdkPixbuf* _tmp30_ = NULL;
		const gchar* _tmp31_;
		GdkPixbuf* _tmp32_;
		GtkImage* _tmp33_;
		_tmp31_ = cover_path;
		_tmp32_ = gdk_pixbuf_new_from_file_at_size (_tmp31_, 38, 38, &_inner_error_);
		_tmp30_ = _tmp32_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch32_g_error;
		}
		_tmp33_ = image_cover;
		g_object_set (_tmp33_, "pixbuf", _tmp30_, NULL);
		_g_object_unref0 (_tmp30_);
	}
	goto __finally32;
	__catch32_g_error:
	{
		GError* e = NULL;
		GdkPixbuf* _tmp34_ = NULL;
		GdkPixbuf* _tmp35_;
		GtkImage* _tmp36_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp35_ = gdk_pixbuf_new_from_file_at_size ("/usr/share/com.github.alainm23.byte/track-default-cover.svg", 38, 38, &_inner_error_);
		_tmp34_ = _tmp35_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_error_free0 (e);
			goto __finally32;
		}
		_tmp36_ = image_cover;
		g_object_set (_tmp36_, "pixbuf", _tmp34_, NULL);
		_g_object_unref0 (_tmp34_);
		_g_error_free0 (e);
	}
	__finally32:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (image_cover);
		_g_free0 (cover_path);
		_g_object_unref0 (secondary_label);
		_g_object_unref0 (primary_label);
		block21_data_unref (_data21_);
		_data21_ = NULL;
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp37_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp37_);
	track_grid = _tmp37_;
	_tmp38_ = track_grid;
	g_object_set ((GtkWidget*) _tmp38_, "width-request", 185, NULL);
	_tmp39_ = track_grid;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp39_, FALSE);
	_tmp40_ = track_grid;
	gtk_widget_set_halign ((GtkWidget*) _tmp40_, GTK_ALIGN_START);
	_tmp41_ = track_grid;
	gtk_widget_set_valign ((GtkWidget*) _tmp41_, GTK_ALIGN_CENTER);
	_tmp42_ = track_grid;
	gtk_grid_set_column_spacing (_tmp42_, 6);
	_tmp43_ = track_grid;
	_tmp44_ = image_cover;
	gtk_grid_attach (_tmp43_, (GtkWidget*) _tmp44_, 0, 0, 1, 2);
	_tmp45_ = track_grid;
	_tmp46_ = primary_label;
	gtk_grid_attach (_tmp45_, (GtkWidget*) _tmp46_, 1, 0, 1, 1);
	_tmp47_ = track_grid;
	_tmp48_ = secondary_label;
	gtk_grid_attach (_tmp47_, (GtkWidget*) _tmp48_, 1, 1, 1, 1);
	_tmp49_ = (GtkMenuItem*) gtk_menu_item_new ();
	g_object_ref_sink (_tmp49_);
	track_menu = _tmp49_;
	_tmp50_ = track_menu;
	_tmp51_ = gtk_widget_get_style_context ((GtkWidget*) _tmp50_);
	gtk_style_context_add_class (_tmp51_, "track-options");
	_tmp52_ = track_menu;
	_tmp53_ = gtk_widget_get_style_context ((GtkWidget*) _tmp52_);
	gtk_style_context_add_class (_tmp53_, "css-item");
	_tmp54_ = track_menu;
	gtk_menu_item_set_right_justified (_tmp54_, TRUE);
	_tmp55_ = track_menu;
	_tmp56_ = track_grid;
	gtk_container_add ((GtkContainer*) _tmp55_, (GtkWidget*) _tmp56_);
	_tmp57_ = widgets_menu_item_new (_ ("Play"), "media-playback-start-symbolic", _ ("Play"));
	g_object_ref_sink (_tmp57_);
	play_menu = _tmp57_;
	_tmp58_ = widgets_menu_item_new (_ ("Play Next"), "byte-play-next-symbolic", _ ("Play Next"));
	g_object_ref_sink (_tmp58_);
	play_next_menu = _tmp58_;
	_tmp59_ = widgets_menu_item_new (_ ("Play Later"), "byte-play-later-symbolic", _ ("Play Later"));
	g_object_ref_sink (_tmp59_);
	play_last_menu = _tmp59_;
	_tmp60_ = widgets_menu_item_new (_ ("Add to Playlist"), "zoom-in-symbolic", _ ("Add to Playlist"));
	g_object_ref_sink (_tmp60_);
	add_playlist_menu = _tmp60_;
	_tmp61_ = (GtkMenu*) gtk_menu_new ();
	g_object_ref_sink (_tmp61_);
	_g_object_unref0 (self->priv->playlists);
	self->priv->playlists = _tmp61_;
	_tmp62_ = self->priv->playlists;
	_tmp63_ = gtk_widget_get_style_context ((GtkWidget*) _tmp62_);
	gtk_style_context_add_class (_tmp63_, "view");
	_tmp64_ = add_playlist_menu;
	_tmp65_ = self->priv->playlists;
	gtk_menu_item_set_submenu ((GtkMenuItem*) _tmp64_, _tmp65_);
	_tmp66_ = widgets_menu_item_new (_ ("Edit Song Info…"), "edit-symbolic", _ ("Edit Song Info…"));
	g_object_ref_sink (_tmp66_);
	edit_menu = _tmp66_;
	_tmp67_ = widgets_menu_item_new (_ ("Love"), "byte-favorite-symbolic", _ ("Love"));
	g_object_ref_sink (_tmp67_);
	favorite_menu = _tmp67_;
	_tmp68_ = widgets_menu_item_new (_ ("Dislike"), "byte-no-favorite-symbolic", _ ("Dislike"));
	g_object_ref_sink (_tmp68_);
	no_favorite_menu = _tmp68_;
	_tmp69_ = widgets_menu_item_new (_ ("Delete from library"), "user-trash-symbolic", _ ("Delete from library"));
	g_object_ref_sink (_tmp69_);
	remove_db_menu = _tmp69_;
	_tmp70_ = widgets_menu_item_new (_ ("Delete from file"), "user-trash-symbolic", _ ("Delete from file"));
	g_object_ref_sink (_tmp70_);
	remove_file_menu = _tmp70_;
	_tmp71_ = widgets_menu_item_new (_ ("Remove from playlist"), "zoom-out-symbolic", _ ("Remove from playlist"));
	g_object_ref_sink (_tmp71_);
	remove_playlist_menu = _tmp71_;
	_tmp72_ = self->priv->menu;
	_tmp73_ = track_menu;
	gtk_container_add ((GtkContainer*) _tmp72_, (GtkWidget*) _tmp73_);
	_tmp74_ = self->priv->menu;
	_tmp75_ = (GtkSeparatorMenuItem*) gtk_separator_menu_item_new ();
	g_object_ref_sink (_tmp75_);
	_tmp76_ = _tmp75_;
	gtk_container_add ((GtkContainer*) _tmp74_, (GtkWidget*) _tmp76_);
	_g_object_unref0 (_tmp76_);
	_tmp77_ = self->priv->menu;
	_tmp78_ = play_menu;
	gtk_container_add ((GtkContainer*) _tmp77_, (GtkWidget*) _tmp78_);
	_tmp79_ = self->priv->menu;
	_tmp80_ = play_next_menu;
	gtk_container_add ((GtkContainer*) _tmp79_, (GtkWidget*) _tmp80_);
	_tmp81_ = self->priv->menu;
	_tmp82_ = play_last_menu;
	gtk_container_add ((GtkContainer*) _tmp81_, (GtkWidget*) _tmp82_);
	_tmp83_ = self->priv->menu;
	_tmp84_ = (GtkSeparatorMenuItem*) gtk_separator_menu_item_new ();
	g_object_ref_sink (_tmp84_);
	_tmp85_ = _tmp84_;
	gtk_container_add ((GtkContainer*) _tmp83_, (GtkWidget*) _tmp85_);
	_g_object_unref0 (_tmp85_);
	_tmp86_ = self->priv->menu;
	_tmp87_ = add_playlist_menu;
	gtk_container_add ((GtkContainer*) _tmp86_, (GtkWidget*) _tmp87_);
	_tmp88_ = self->priv->menu;
	_tmp89_ = favorite_menu;
	gtk_container_add ((GtkContainer*) _tmp88_, (GtkWidget*) _tmp89_);
	_tmp90_ = self->priv->menu;
	_tmp91_ = no_favorite_menu;
	gtk_container_add ((GtkContainer*) _tmp90_, (GtkWidget*) _tmp91_);
	_tmp92_ = self->priv->menu;
	_tmp93_ = (GtkSeparatorMenuItem*) gtk_separator_menu_item_new ();
	g_object_ref_sink (_tmp93_);
	_tmp94_ = _tmp93_;
	gtk_container_add ((GtkContainer*) _tmp92_, (GtkWidget*) _tmp94_);
	_g_object_unref0 (_tmp94_);
	_tmp95_ = _data21_->track->playlist;
	if (_tmp95_ != 0) {
		GtkMenu* _tmp96_;
		WidgetsMenuItem* _tmp97_;
		_tmp96_ = self->priv->menu;
		_tmp97_ = remove_playlist_menu;
		gtk_container_add ((GtkContainer*) _tmp96_, (GtkWidget*) _tmp97_);
	}
	_tmp98_ = self->priv->menu;
	_tmp99_ = remove_db_menu;
	gtk_container_add ((GtkContainer*) _tmp98_, (GtkWidget*) _tmp99_);
	_tmp100_ = self->priv->menu;
	gtk_widget_show_all ((GtkWidget*) _tmp100_);
	_tmp101_ = track_menu;
	g_signal_connect_object (_tmp101_, "activate", (GCallback) ___lambda40__gtk_menu_item_activate, self, 0);
	_tmp102_ = play_menu;
	g_signal_connect_object ((GtkMenuItem*) _tmp102_, "activate", (GCallback) ___lambda41__gtk_menu_item_activate, self, 0);
	_tmp103_ = play_next_menu;
	g_signal_connect_data ((GtkMenuItem*) _tmp103_, "activate", (GCallback) ___lambda42__gtk_menu_item_activate, block21_data_ref (_data21_), (GClosureNotify) block21_data_unref, 0);
	_tmp104_ = play_last_menu;
	g_signal_connect_data ((GtkMenuItem*) _tmp104_, "activate", (GCallback) ___lambda43__gtk_menu_item_activate, block21_data_ref (_data21_), (GClosureNotify) block21_data_unref, 0);
	_tmp105_ = favorite_menu;
	g_signal_connect_data ((GtkMenuItem*) _tmp105_, "activate", (GCallback) ___lambda44__gtk_menu_item_activate, block21_data_ref (_data21_), (GClosureNotify) block21_data_unref, 0);
	_tmp106_ = no_favorite_menu;
	g_signal_connect_data ((GtkMenuItem*) _tmp106_, "activate", (GCallback) ___lambda45__gtk_menu_item_activate, block21_data_ref (_data21_), (GClosureNotify) block21_data_unref, 0);
	_tmp107_ = add_playlist_menu;
	g_signal_connect_object ((GtkMenuItem*) _tmp107_, "activate", (GCallback) ___lambda46__gtk_menu_item_activate, self, 0);
	_tmp108_ = edit_menu;
	g_signal_connect_data ((GtkMenuItem*) _tmp108_, "activate", (GCallback) ___lambda47__gtk_menu_item_activate, block21_data_ref (_data21_), (GClosureNotify) block21_data_unref, 0);
	_tmp109_ = remove_db_menu;
	g_signal_connect_data ((GtkMenuItem*) _tmp109_, "activate", (GCallback) ___lambda49__gtk_menu_item_activate, block21_data_ref (_data21_), (GClosureNotify) block21_data_unref, 0);
	_tmp110_ = remove_file_menu;
	g_signal_connect_object ((GtkMenuItem*) _tmp110_, "activate", (GCallback) ___lambda50__gtk_menu_item_activate, self, 0);
	_tmp111_ = remove_playlist_menu;
	g_signal_connect_data ((GtkMenuItem*) _tmp111_, "activate", (GCallback) ___lambda51__gtk_menu_item_activate, block21_data_ref (_data21_), (GClosureNotify) block21_data_unref, 0);
	_g_object_unref0 (remove_playlist_menu);
	_g_object_unref0 (remove_file_menu);
	_g_object_unref0 (remove_db_menu);
	_g_object_unref0 (no_favorite_menu);
	_g_object_unref0 (favorite_menu);
	_g_object_unref0 (edit_menu);
	_g_object_unref0 (add_playlist_menu);
	_g_object_unref0 (play_last_menu);
	_g_object_unref0 (play_next_menu);
	_g_object_unref0 (play_menu);
	_g_object_unref0 (track_menu);
	_g_object_unref0 (track_grid);
	_g_object_unref0 (image_cover);
	_g_free0 (cover_path);
	_g_object_unref0 (secondary_label);
	_g_object_unref0 (primary_label);
	block21_data_unref (_data21_);
	_data21_ = NULL;
}


static Block22Data*
block22_data_ref (Block22Data* _data22_)
{
	g_atomic_int_inc (&_data22_->_ref_count_);
	return _data22_;
}


static void
block22_data_unref (void * _userdata_)
{
	Block22Data* _data22_;
	_data22_ = (Block22Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data22_->_ref_count_)) {
		WidgetsMediaControl* self;
		self = _data22_->self;
		_g_object_unref0 (_data22_->image_cover);
		_g_object_unref0 (_data22_->favorite_revealer);
		_g_object_unref0 (_data22_->timeline_revealer);
		_g_object_unref0 (self);
		g_slice_free (Block22Data, _data22_);
	}
}


static void
_widgets_media_control___lambda54_ (WidgetsMediaControl* self,
                                    gdouble progress)
{
	GraniteSeekBar* _tmp0_;
	GraniteSeekBar* _tmp1_;
	gdouble _tmp2_;
	gdouble _tmp3_;
	_tmp0_ = self->priv->timeline;
	granite_seek_bar_set_playback_progress (_tmp0_, progress);
	_tmp1_ = self->priv->timeline;
	_tmp2_ = granite_seek_bar_get_playback_duration (_tmp1_);
	_tmp3_ = _tmp2_;
	if (_tmp3_ == ((gdouble) 0)) {
		GraniteSeekBar* _tmp4_;
		ServicesPlayer* _tmp5_;
		gint64 _tmp6_;
		gint64 _tmp7_;
		_tmp4_ = self->priv->timeline;
		_tmp5_ = byte_player;
		_tmp6_ = services_player_get_duration (_tmp5_);
		_tmp7_ = _tmp6_;
		granite_seek_bar_set_playback_duration (_tmp4_, (gdouble) (_tmp7_ / GST_SECOND));
	}
}


static void
__widgets_media_control___lambda54__services_player_current_progress_changed (ServicesPlayer* _sender,
                                                                              gdouble percent,
                                                                              gpointer self)
{
	_widgets_media_control___lambda54_ ((WidgetsMediaControl*) self, percent);
}


static void
_widgets_media_control___lambda55_ (WidgetsMediaControl* self,
                                    gint64 duration)
{
	GraniteSeekBar* _tmp0_;
	_tmp0_ = self->priv->timeline;
	granite_seek_bar_set_playback_duration (_tmp0_, (gdouble) (duration / GST_SECOND));
}


static void
__widgets_media_control___lambda55__services_player_current_duration_changed (ServicesPlayer* _sender,
                                                                              gint64 duration,
                                                                              gpointer self)
{
	_widgets_media_control___lambda55_ ((WidgetsMediaControl*) self, duration);
}


static void
_widgets_media_control___lambda56_ (Block22Data* _data22_,
                                    ObjectsTrack* track)
{
	WidgetsMediaControl* self;
	GtkLabel* _tmp0_;
	const gchar* _tmp1_;
	GtkLabel* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* cover_path = NULL;
	Utils* _tmp7_;
	const gchar* _tmp8_;
	gint _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	WidgetsCover* _tmp14_;
	const gchar* _tmp15_;
	self = _data22_->self;
	_tmp0_ = self->priv->title_label;
	_tmp1_ = track->title;
	gtk_label_set_label (_tmp0_, _tmp1_);
	_tmp2_ = self->priv->subtitle_label;
	_tmp3_ = track->artist_name;
	_tmp4_ = track->album_title;
	_tmp5_ = g_strdup_printf ("%s — %s", _tmp3_, _tmp4_);
	_tmp6_ = _tmp5_;
	gtk_label_set_label (_tmp2_, _tmp6_);
	_g_free0 (_tmp6_);
	_tmp7_ = byte_utils;
	_tmp8_ = _tmp7_->COVER_FOLDER;
	_tmp9_ = track->id;
	_tmp10_ = g_strdup_printf ("track-%i.jpg", _tmp9_);
	_tmp11_ = _tmp10_;
	_tmp12_ = g_build_filename (_tmp8_, _tmp11_, NULL);
	_tmp13_ = _tmp12_;
	_g_free0 (_tmp11_);
	cover_path = _tmp13_;
	_tmp14_ = _data22_->image_cover;
	_tmp15_ = cover_path;
	widgets_cover_set_from_file (_tmp14_, _tmp15_, 32, "track");
	_g_free0 (cover_path);
}


static void
__widgets_media_control___lambda56__services_player_current_track_changed (ServicesPlayer* _sender,
                                                                           ObjectsTrack* track,
                                                                           gpointer self)
{
	_widgets_media_control___lambda56_ (self, track);
}


static void
_widgets_media_control___lambda57_ (WidgetsMediaControl* self,
                                    ObjectsRadio* radio)
{
	GtkLabel* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	_tmp0_ = self->priv->title_label;
	_tmp1_ = objects_radio_get_name (radio);
	_tmp2_ = _tmp1_;
	gtk_label_set_label (_tmp0_, _tmp2_);
	gtk_revealer_set_reveal_child ((GtkRevealer*) self, TRUE);
}


static void
__widgets_media_control___lambda57__services_player_current_radio_changed (ServicesPlayer* _sender,
                                                                           ObjectsRadio* radio,
                                                                           gpointer self)
{
	_widgets_media_control___lambda57_ ((WidgetsMediaControl*) self, radio);
}


static void
_widgets_media_control___lambda58_ (WidgetsMediaControl* self,
                                    const gchar* title)
{
	ServicesPlayer* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	_tmp0_ = byte_player;
	_tmp1_ = services_player_get_mode (_tmp0_);
	_tmp2_ = _tmp1_;
	if (g_strcmp0 (_tmp2_, "radio") == 0) {
		GtkLabel* _tmp3_;
		_tmp3_ = self->priv->subtitle_label;
		gtk_label_set_label (_tmp3_, title);
	}
}


static void
__widgets_media_control___lambda58__services_player_current_radio_title_changed (ServicesPlayer* _sender,
                                                                                 const gchar* title,
                                                                                 gpointer self)
{
	_widgets_media_control___lambda58_ ((WidgetsMediaControl*) self, title);
}


static void
_widgets_media_control___lambda59_ (WidgetsMediaControl* self,
                                    GstState state)
{
	if (state == GST_STATE_PLAYING) {
		ServicesPlayer* _tmp0_;
		ObjectsTrack* _tmp1_;
		ObjectsTrack* _tmp2_;
		_tmp0_ = byte_player;
		_tmp1_ = services_player_get_current_track (_tmp0_);
		_tmp2_ = _tmp1_;
		if (_tmp2_ != NULL) {
			gtk_revealer_set_reveal_child ((GtkRevealer*) self, TRUE);
		}
	} else {
		if (state == GST_STATE_NULL) {
			gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
		}
	}
}


static void
__widgets_media_control___lambda59__services_player_state_changed (ServicesPlayer* _sender,
                                                                   GstState state,
                                                                   gpointer self)
{
	_widgets_media_control___lambda59_ ((WidgetsMediaControl*) self, state);
}


static void
_widgets_media_control___lambda60_ (Block22Data* _data22_,
                                    const gchar* mode)
{
	WidgetsMediaControl* self;
	self = _data22_->self;
	g_return_if_fail (mode != NULL);
	if (g_strcmp0 (mode, "radio") == 0) {
		GtkRevealer* _tmp0_;
		GtkRevealer* _tmp1_;
		_tmp0_ = _data22_->timeline_revealer;
		gtk_revealer_set_reveal_child (_tmp0_, FALSE);
		_tmp1_ = _data22_->favorite_revealer;
		gtk_revealer_set_reveal_child (_tmp1_, FALSE);
	} else {
		GtkRevealer* _tmp2_;
		ServicesScan* _tmp3_;
		gboolean _tmp4_;
		_tmp2_ = _data22_->timeline_revealer;
		gtk_revealer_set_reveal_child (_tmp2_, TRUE);
		_tmp3_ = byte_scan_service;
		_tmp4_ = _tmp3_->is_sync;
		if (_tmp4_ == FALSE) {
			GtkRevealer* _tmp5_;
			_tmp5_ = _data22_->favorite_revealer;
			gtk_revealer_set_reveal_child (_tmp5_, TRUE);
		}
	}
}


static void
__widgets_media_control___lambda60__services_player_mode_changed (ServicesPlayer* _sender,
                                                                  const gchar* mode,
                                                                  gpointer self)
{
	_widgets_media_control___lambda60_ (self, mode);
}


static void
_widgets_media_control___lambda67_ (Block22Data* _data22_,
                                    const gchar* track_url)
{
	WidgetsMediaControl* self;
	gchar* _tmp0_;
	gchar* _tmp1_;
	WidgetsCover* _tmp2_;
	self = _data22_->self;
	g_return_if_fail (track_url != NULL);
	_tmp0_ = g_strdup_printf ("URL: %s\n", track_url);
	_tmp1_ = _tmp0_;
	g_print ("%s", _tmp1_);
	_g_free0 (_tmp1_);
	_tmp2_ = _data22_->image_cover;
	widgets_cover_set_from_url_async (_tmp2_, track_url, 32, TRUE, "track", NULL);
}


static void
__widgets_media_control___lambda67__services_lastfm_radio_cover_track_found (ServicesLastfm* _sender,
                                                                             const gchar* url,
                                                                             gpointer self)
{
	_widgets_media_control___lambda67_ (self, url);
}


static Block23Data*
block23_data_ref (Block23Data* _data23_)
{
	g_atomic_int_inc (&_data23_->_ref_count_);
	return _data23_;
}


static void
block23_data_unref (void * _userdata_)
{
	Block23Data* _data23_;
	_data23_ = (Block23Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data23_->_ref_count_)) {
		WidgetsMediaControl* self;
		self = _data23_->_data22_->self;
		block22_data_unref (_data23_->_data22_);
		_data23_->_data22_ = NULL;
		g_slice_free (Block23Data, _data23_);
	}
}


static gboolean
__lambda69_ (Block23Data* _data23_)
{
	Block22Data* _data22_;
	WidgetsMediaControl* self;
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	ServicesPlayer* _tmp1_;
	ObjectsTrack* _tmp2_;
	ObjectsTrack* _tmp3_;
	GError * _inner_error_ = NULL;
	_data22_ = _data23_->_data22_;
	self = _data22_->self;
	_tmp1_ = byte_player;
	_tmp2_ = services_player_get_current_track (_tmp1_);
	_tmp3_ = _tmp2_;
	if (_tmp3_ != NULL) {
		ServicesPlayer* _tmp4_;
		ObjectsTrack* _tmp5_;
		ObjectsTrack* _tmp6_;
		gint _tmp7_;
		_tmp4_ = byte_player;
		_tmp5_ = services_player_get_current_track (_tmp4_);
		_tmp6_ = _tmp5_;
		_tmp7_ = _tmp6_->id;
		_tmp0_ = _data23_->track_id == _tmp7_;
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		{
			GdkPixbuf* _tmp8_ = NULL;
			Utils* _tmp9_;
			const gchar* _tmp10_;
			gchar* _tmp11_;
			gchar* _tmp12_;
			gchar* _tmp13_;
			gchar* _tmp14_;
			GdkPixbuf* _tmp15_;
			GdkPixbuf* _tmp16_;
			WidgetsCover* _tmp17_;
			_tmp9_ = byte_utils;
			_tmp10_ = _tmp9_->COVER_FOLDER;
			_tmp11_ = g_strdup_printf ("track-%i.jpg", _data23_->track_id);
			_tmp12_ = _tmp11_;
			_tmp13_ = g_build_filename (_tmp10_, _tmp12_, NULL);
			_tmp14_ = _tmp13_;
			_tmp15_ = gdk_pixbuf_new_from_file_at_size (_tmp14_, 32, 32, &_inner_error_);
			_tmp16_ = _tmp15_;
			_g_free0 (_tmp14_);
			_g_free0 (_tmp12_);
			_tmp8_ = _tmp16_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch33_g_error;
			}
			_tmp17_ = _data22_->image_cover;
			widgets_cover_set_pixbuf (_tmp17_, _tmp8_);
			_g_object_unref0 (_tmp8_);
		}
		goto __finally33;
		__catch33_g_error:
		{
			GError* e = NULL;
			FILE* _tmp18_;
			GError* _tmp19_;
			const gchar* _tmp20_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp18_ = stderr;
			_tmp19_ = e;
			_tmp20_ = _tmp19_->message;
			fprintf (_tmp18_, "Error setting default avatar icon: %s ", _tmp20_);
			_g_error_free0 (e);
		}
		__finally33:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			gboolean _tmp21_ = FALSE;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return _tmp21_;
		}
	}
	result = FALSE;
	return result;
}


static gboolean
___lambda69__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda69_ (self);
	return result;
}


static void
_widgets_media_control___lambda68_ (Block22Data* _data22_,
                                    gint track_id)
{
	WidgetsMediaControl* self;
	Block23Data* _data23_;
	self = _data22_->self;
	_data23_ = g_slice_new0 (Block23Data);
	_data23_->_ref_count_ = 1;
	_data23_->_data22_ = block22_data_ref (_data22_);
	_data23_->track_id = track_id;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ___lambda69__gsource_func, block23_data_ref (_data23_), block23_data_unref);
	block23_data_unref (_data23_);
	_data23_ = NULL;
}


static void
__widgets_media_control___lambda68__services_database_updated_track_cover (ServicesDatabase* _sender,
                                                                           gint track_id,
                                                                           gpointer self)
{
	_widgets_media_control___lambda68_ (self, track_id);
}


static gboolean
_widgets_media_control___lambda70_ (WidgetsMediaControl* self,
                                    GtkScrollType scroll,
                                    gdouble new_value)
{
	gboolean result = FALSE;
	ServicesPlayer* _tmp0_;
	_tmp0_ = byte_player;
	services_player_seek_to_progress (_tmp0_, new_value);
	result = TRUE;
	return result;
}


static gboolean
__widgets_media_control___lambda70__gtk_range_change_value (GtkRange* _sender,
                                                            GtkScrollType scroll,
                                                            gdouble new_value,
                                                            gpointer self)
{
	gboolean result;
	result = _widgets_media_control___lambda70_ ((WidgetsMediaControl*) self, scroll, new_value);
	return result;
}


static void
_widgets_media_control___lambda71_ (Block22Data* _data22_)
{
	WidgetsMediaControl* self;
	GtkRevealer* _tmp0_;
	self = _data22_->self;
	_tmp0_ = _data22_->favorite_revealer;
	gtk_revealer_set_reveal_child (_tmp0_, FALSE);
}


static void
__widgets_media_control___lambda71__services_scan_sync_started (ServicesScan* _sender,
                                                                gpointer self)
{
	_widgets_media_control___lambda71_ (self);
}


static void
_widgets_media_control___lambda72_ (Block22Data* _data22_)
{
	WidgetsMediaControl* self;
	GtkRevealer* _tmp0_;
	self = _data22_->self;
	_tmp0_ = _data22_->favorite_revealer;
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
}


static void
__widgets_media_control___lambda72__services_scan_sync_finished (ServicesScan* _sender,
                                                                 gpointer self)
{
	_widgets_media_control___lambda72_ (self);
}


static void
_widgets_media_control___lambda73_ (WidgetsMediaControl* self)
{
	ServicesPlayer* _tmp0_;
	ObjectsTrack* _tmp1_;
	ObjectsTrack* _tmp2_;
	g_print ("Click\n");
	_tmp0_ = byte_player;
	_tmp1_ = services_player_get_current_track (_tmp0_);
	_tmp2_ = _tmp1_;
	if (_tmp2_ != NULL) {
		ServicesPlayer* _tmp3_;
		ObjectsTrack* _tmp4_;
		ObjectsTrack* _tmp5_;
		_tmp3_ = byte_player;
		_tmp4_ = services_player_get_current_track (_tmp3_);
		_tmp5_ = _tmp4_;
		widgets_media_control_activate_menu (self, _tmp5_);
	}
}


static void
__widgets_media_control___lambda73__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self)
{
	_widgets_media_control___lambda73_ ((WidgetsMediaControl*) self);
}


static GObject *
widgets_media_control_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsMediaControl * self;
	Block22Data* _data22_;
	GtkImage* _tmp0_;
	GtkImage* _tmp1_;
	GraniteSeekBar* _tmp2_;
	GraniteSeekBar* _tmp3_;
	GraniteSeekBar* _tmp4_;
	GraniteSeekBar* _tmp5_;
	GraniteSeekBar* _tmp6_;
	GtkStyleContext* _tmp7_;
	GraniteSeekBar* _tmp8_;
	GtkStyleContext* _tmp9_;
	GtkRevealer* _tmp10_;
	GtkRevealer* _tmp11_;
	GtkRevealer* _tmp12_;
	GraniteSeekBar* _tmp13_;
	GtkRevealer* _tmp14_;
	GtkLabel* _tmp15_;
	GtkLabel* _tmp16_;
	GtkStyleContext* _tmp17_;
	GtkLabel* _tmp18_;
	GtkLabel* _tmp19_;
	GtkLabel* _tmp20_;
	GtkLabel* _tmp21_;
	GtkLabel* _tmp22_;
	GtkLabel* _tmp23_;
	GtkLabel* _tmp24_;
	GtkButton* options_button = NULL;
	GtkButton* _tmp25_;
	GtkButton* _tmp26_;
	GtkButton* _tmp27_;
	GtkButton* _tmp28_;
	GtkButton* _tmp29_;
	GtkButton* _tmp30_;
	GtkStyleContext* _tmp31_;
	GtkButton* _tmp32_;
	GtkStyleContext* _tmp33_;
	GtkButton* _tmp34_;
	GtkStyleContext* _tmp35_;
	GtkButton* _tmp36_;
	GtkStyleContext* _tmp37_;
	GtkRevealer* _tmp38_;
	GtkRevealer* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkButton* _tmp41_;
	GtkRevealer* _tmp42_;
	GtkBox* metainfo_box = NULL;
	GtkBox* _tmp43_;
	GtkBox* _tmp44_;
	GtkBox* _tmp45_;
	GtkBox* _tmp46_;
	GtkBox* _tmp47_;
	GtkLabel* _tmp48_;
	GtkBox* _tmp49_;
	GtkLabel* _tmp50_;
	WidgetsCover* _tmp51_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp52_;
	GtkBox* _tmp53_;
	GtkBox* _tmp54_;
	GtkBox* _tmp55_;
	GtkBox* _tmp56_;
	WidgetsCover* _tmp57_;
	GtkBox* _tmp58_;
	GtkBox* _tmp59_;
	GtkBox* _tmp60_;
	GtkRevealer* _tmp61_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp62_;
	GtkBox* _tmp63_;
	GtkRevealer* _tmp64_;
	GtkBox* _tmp65_;
	GtkBox* _tmp66_;
	GtkBox* _tmp67_;
	ServicesPlayer* _tmp68_;
	ServicesPlayer* _tmp69_;
	ServicesPlayer* _tmp70_;
	ServicesPlayer* _tmp71_;
	ServicesPlayer* _tmp72_;
	ServicesPlayer* _tmp73_;
	ServicesPlayer* _tmp74_;
	ServicesLastfm* _tmp75_;
	ServicesDatabase* _tmp76_;
	GraniteSeekBar* _tmp77_;
	GtkScale* _tmp78_;
	GtkScale* _tmp79_;
	ServicesScan* _tmp80_;
	ServicesScan* _tmp81_;
	GtkButton* _tmp82_;
	parent_class = G_OBJECT_CLASS (widgets_media_control_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_MEDIA_CONTROL, WidgetsMediaControl);
	_data22_ = g_slice_new0 (Block22Data);
	_data22_->_ref_count_ = 1;
	_data22_->self = g_object_ref (self);
	_tmp0_ = (GtkImage*) gtk_image_new_from_icon_name ("byte-favorite-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp0_);
	_g_object_unref0 (self->priv->icon_favorite);
	self->priv->icon_favorite = _tmp0_;
	_tmp1_ = (GtkImage*) gtk_image_new_from_icon_name ("byte-no-favorite-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp1_);
	_g_object_unref0 (self->priv->icon_no_favorite);
	self->priv->icon_no_favorite = _tmp1_;
	_tmp2_ = granite_seek_bar_new ((gdouble) 0);
	g_object_ref_sink (_tmp2_);
	_g_object_unref0 (self->priv->timeline);
	self->priv->timeline = _tmp2_;
	_tmp3_ = self->priv->timeline;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp3_, 6);
	_tmp4_ = self->priv->timeline;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp4_, 9);
	_tmp5_ = self->priv->timeline;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp5_, 6);
	_tmp6_ = self->priv->timeline;
	_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
	gtk_style_context_remove_class (_tmp7_, "seek-bar");
	_tmp8_ = self->priv->timeline;
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
	gtk_style_context_add_class (_tmp9_, "byte-seekbar");
	_tmp10_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp10_);
	_data22_->timeline_revealer = _tmp10_;
	_tmp11_ = _data22_->timeline_revealer;
	gtk_revealer_set_transition_type (_tmp11_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
	_tmp12_ = _data22_->timeline_revealer;
	_tmp13_ = self->priv->timeline;
	gtk_container_add ((GtkContainer*) _tmp12_, (GtkWidget*) _tmp13_);
	_tmp14_ = _data22_->timeline_revealer;
	gtk_revealer_set_reveal_child (_tmp14_, FALSE);
	_tmp15_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp15_);
	_g_object_unref0 (self->priv->title_label);
	self->priv->title_label = _tmp15_;
	_tmp16_ = self->priv->title_label;
	_tmp17_ = gtk_widget_get_style_context ((GtkWidget*) _tmp16_);
	gtk_style_context_add_class (_tmp17_, "font-bold");
	_tmp18_ = self->priv->title_label;
	gtk_label_set_ellipsize (_tmp18_, PANGO_ELLIPSIZE_END);
	_tmp19_ = self->priv->title_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp19_, GTK_ALIGN_CENTER);
	_tmp20_ = self->priv->title_label;
	gtk_label_set_selectable (_tmp20_, TRUE);
	_tmp21_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp21_);
	_g_object_unref0 (self->priv->subtitle_label);
	self->priv->subtitle_label = _tmp21_;
	_tmp22_ = self->priv->subtitle_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp22_, GTK_ALIGN_CENTER);
	_tmp23_ = self->priv->subtitle_label;
	gtk_label_set_ellipsize (_tmp23_, PANGO_ELLIPSIZE_END);
	_tmp24_ = self->priv->subtitle_label;
	gtk_label_set_selectable (_tmp24_, TRUE);
	_tmp25_ = (GtkButton*) gtk_button_new_from_icon_name ("view-more-horizontal-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp25_);
	options_button = _tmp25_;
	_tmp26_ = options_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp26_, GTK_ALIGN_CENTER);
	_tmp27_ = options_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp27_, FALSE);
	_tmp28_ = options_button;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp28_, 6);
	_tmp29_ = options_button;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp29_, _ ("Options"));
	_tmp30_ = options_button;
	_tmp31_ = gtk_widget_get_style_context ((GtkWidget*) _tmp30_);
	gtk_style_context_add_class (_tmp31_, GTK_STYLE_CLASS_FLAT);
	_tmp32_ = options_button;
	_tmp33_ = gtk_widget_get_style_context ((GtkWidget*) _tmp32_);
	gtk_style_context_add_class (_tmp33_, "options-button");
	_tmp34_ = options_button;
	_tmp35_ = gtk_widget_get_style_context ((GtkWidget*) _tmp34_);
	gtk_style_context_add_class (_tmp35_, "button-color");
	_tmp36_ = options_button;
	_tmp37_ = gtk_widget_get_style_context ((GtkWidget*) _tmp36_);
	gtk_style_context_remove_class (_tmp37_, "button");
	_tmp38_ = (GtkRevealer*) gtk_revealer_new ();
	g_object_ref_sink (_tmp38_);
	_data22_->favorite_revealer = _tmp38_;
	_tmp39_ = _data22_->favorite_revealer;
	gtk_revealer_set_transition_type (_tmp39_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT);
	_tmp40_ = _data22_->favorite_revealer;
	_tmp41_ = options_button;
	gtk_container_add ((GtkContainer*) _tmp40_, (GtkWidget*) _tmp41_);
	_tmp42_ = _data22_->favorite_revealer;
	gtk_revealer_set_reveal_child (_tmp42_, FALSE);
	_tmp43_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp43_);
	metainfo_box = _tmp43_;
	_tmp44_ = metainfo_box;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp44_, 6);
	_tmp45_ = metainfo_box;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp45_, 6);
	_tmp46_ = metainfo_box;
	gtk_widget_set_valign ((GtkWidget*) _tmp46_, GTK_ALIGN_CENTER);
	_tmp47_ = metainfo_box;
	_tmp48_ = self->priv->title_label;
	gtk_container_add ((GtkContainer*) _tmp47_, (GtkWidget*) _tmp48_);
	_tmp49_ = metainfo_box;
	_tmp50_ = self->priv->subtitle_label;
	gtk_container_add ((GtkContainer*) _tmp49_, (GtkWidget*) _tmp50_);
	_tmp51_ = widgets_cover_new ();
	g_object_ref_sink (_tmp51_);
	_data22_->image_cover = _tmp51_;
	_tmp52_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp52_);
	header_box = _tmp52_;
	_tmp53_ = header_box;
	g_object_set ((GtkWidget*) _tmp53_, "margin", 3, NULL);
	_tmp54_ = header_box;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp54_, 4);
	_tmp55_ = header_box;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp55_, 3);
	_tmp56_ = header_box;
	_tmp57_ = _data22_->image_cover;
	gtk_box_pack_start (_tmp56_, (GtkWidget*) _tmp57_, FALSE, FALSE, (guint) 0);
	_tmp58_ = header_box;
	_tmp59_ = metainfo_box;
	gtk_box_set_center_widget (_tmp58_, (GtkWidget*) _tmp59_);
	_tmp60_ = header_box;
	_tmp61_ = _data22_->favorite_revealer;
	gtk_box_pack_end (_tmp60_, (GtkWidget*) _tmp61_, FALSE, FALSE, (guint) 0);
	_tmp62_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp62_);
	main_box = _tmp62_;
	_tmp63_ = main_box;
	_tmp64_ = _data22_->timeline_revealer;
	gtk_box_pack_start (_tmp63_, (GtkWidget*) _tmp64_, FALSE, FALSE, (guint) 0);
	_tmp65_ = main_box;
	_tmp66_ = header_box;
	gtk_box_pack_start (_tmp65_, (GtkWidget*) _tmp66_, FALSE, FALSE, (guint) 0);
	_tmp67_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp67_);
	_tmp68_ = byte_player;
	g_signal_connect_object (_tmp68_, "current-progress-changed", (GCallback) __widgets_media_control___lambda54__services_player_current_progress_changed, self, 0);
	_tmp69_ = byte_player;
	g_signal_connect_object (_tmp69_, "current-duration-changed", (GCallback) __widgets_media_control___lambda55__services_player_current_duration_changed, self, 0);
	_tmp70_ = byte_player;
	g_signal_connect_data (_tmp70_, "current-track-changed", (GCallback) __widgets_media_control___lambda56__services_player_current_track_changed, block22_data_ref (_data22_), (GClosureNotify) block22_data_unref, 0);
	_tmp71_ = byte_player;
	g_signal_connect_object (_tmp71_, "current-radio-changed", (GCallback) __widgets_media_control___lambda57__services_player_current_radio_changed, self, 0);
	_tmp72_ = byte_player;
	g_signal_connect_object (_tmp72_, "current-radio-title-changed", (GCallback) __widgets_media_control___lambda58__services_player_current_radio_title_changed, self, 0);
	_tmp73_ = byte_player;
	g_signal_connect_object (_tmp73_, "state-changed", (GCallback) __widgets_media_control___lambda59__services_player_state_changed, self, 0);
	_tmp74_ = byte_player;
	g_signal_connect_data (_tmp74_, "mode-changed", (GCallback) __widgets_media_control___lambda60__services_player_mode_changed, block22_data_ref (_data22_), (GClosureNotify) block22_data_unref, 0);
	_tmp75_ = byte_lastfm_service;
	g_signal_connect_data (_tmp75_, "radio-cover-track-found", (GCallback) __widgets_media_control___lambda67__services_lastfm_radio_cover_track_found, block22_data_ref (_data22_), (GClosureNotify) block22_data_unref, 0);
	_tmp76_ = byte_database;
	g_signal_connect_data (_tmp76_, "updated-track-cover", (GCallback) __widgets_media_control___lambda68__services_database_updated_track_cover, block22_data_ref (_data22_), (GClosureNotify) block22_data_unref, 0);
	_tmp77_ = self->priv->timeline;
	_tmp78_ = granite_seek_bar_get_scale (_tmp77_);
	_tmp79_ = _tmp78_;
	g_signal_connect_object ((GtkRange*) _tmp79_, "change-value", (GCallback) __widgets_media_control___lambda70__gtk_range_change_value, self, 0);
	_tmp80_ = byte_scan_service;
	g_signal_connect_data (_tmp80_, "sync-started", (GCallback) __widgets_media_control___lambda71__services_scan_sync_started, block22_data_ref (_data22_), (GClosureNotify) block22_data_unref, 0);
	_tmp81_ = byte_scan_service;
	g_signal_connect_data (_tmp81_, "sync-finished", (GCallback) __widgets_media_control___lambda72__services_scan_sync_finished, block22_data_ref (_data22_), (GClosureNotify) block22_data_unref, 0);
	_tmp82_ = options_button;
	g_signal_connect_object (_tmp82_, "clicked", (GCallback) __widgets_media_control___lambda73__gtk_button_clicked, self, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (header_box);
	_g_object_unref0 (metainfo_box);
	_g_object_unref0 (options_button);
	block22_data_unref (_data22_);
	_data22_ = NULL;
	return obj;
}


static void
widgets_media_control_class_init (WidgetsMediaControlClass * klass)
{
	widgets_media_control_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsMediaControlPrivate));
	G_OBJECT_CLASS (klass)->constructor = widgets_media_control_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_media_control_finalize;
}


static void
widgets_media_control_instance_init (WidgetsMediaControl * self)
{
	self->priv = WIDGETS_MEDIA_CONTROL_GET_PRIVATE (self);
}


static void
widgets_media_control_finalize (GObject * obj)
{
	WidgetsMediaControl * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_MEDIA_CONTROL, WidgetsMediaControl);
	_g_object_unref0 (self->priv->timeline);
	_g_object_unref0 (self->priv->title_label);
	_g_object_unref0 (self->priv->subtitle_label);
	_g_object_unref0 (self->priv->icon_favorite);
	_g_object_unref0 (self->priv->icon_no_favorite);
	_g_object_unref0 (self->priv->playlists);
	_g_object_unref0 (self->priv->menu);
	G_OBJECT_CLASS (widgets_media_control_parent_class)->finalize (obj);
}


GType
widgets_media_control_get_type (void)
{
	static volatile gsize widgets_media_control_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_media_control_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsMediaControlClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_media_control_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsMediaControl), 0, (GInstanceInitFunc) widgets_media_control_instance_init, NULL };
		GType widgets_media_control_type_id;
		widgets_media_control_type_id = g_type_register_static (gtk_revealer_get_type (), "WidgetsMediaControl", &g_define_type_info, 0);
		g_once_init_leave (&widgets_media_control_type_id__volatile, widgets_media_control_type_id);
	}
	return widgets_media_control_type_id__volatile;
}



