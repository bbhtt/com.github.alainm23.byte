/* Artist.c generated by valac 0.40.11, the Vala compiler
 * generated from Artist.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <glib/gi18n-lib.h>
#include <pango/pango.h>
#include <granite.h>
#include <gio/gio.h>


#define VIEWS_TYPE_ARTIST (views_artist_get_type ())
#define VIEWS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_ARTIST, ViewsArtist))
#define VIEWS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_ARTIST, ViewsArtistClass))
#define VIEWS_IS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_ARTIST))
#define VIEWS_IS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_ARTIST))
#define VIEWS_ARTIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_ARTIST, ViewsArtistClass))

typedef struct _ViewsArtist ViewsArtist;
typedef struct _ViewsArtistClass ViewsArtistClass;
typedef struct _ViewsArtistPrivate ViewsArtistPrivate;

#define OBJECTS_TYPE_ARTIST (objects_artist_get_type ())
#define OBJECTS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ARTIST, ObjectsArtist))
#define OBJECTS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ARTIST, ObjectsArtistClass))
#define OBJECTS_IS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ARTIST))
#define OBJECTS_IS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ARTIST))
#define OBJECTS_ARTIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ARTIST, ObjectsArtistClass))

typedef struct _ObjectsArtist ObjectsArtist;
typedef struct _ObjectsArtistClass ObjectsArtistClass;

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;

#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;

#define OBJECTS_TYPE_ALBUM (objects_album_get_type ())
#define OBJECTS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ALBUM, ObjectsAlbum))
#define OBJECTS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ALBUM, ObjectsAlbumClass))
#define OBJECTS_IS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ALBUM))
#define OBJECTS_IS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ALBUM))
#define OBJECTS_ALBUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ALBUM, ObjectsAlbumClass))

typedef struct _ObjectsAlbum ObjectsAlbum;
typedef struct _ObjectsAlbumClass ObjectsAlbumClass;
enum  {
	VIEWS_ARTIST_0_PROPERTY,
	VIEWS_ARTIST_BACK_PAGE_PROPERTY,
	VIEWS_ARTIST_ARTIST_PROPERTY,
	VIEWS_ARTIST_NUM_PROPERTIES
};
static GParamSpec* views_artist_properties[VIEWS_ARTIST_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ObjectsArtistPrivate ObjectsArtistPrivate;

#define SERVICES_TYPE_SCAN (services_scan_get_type ())
#define SERVICES_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SCAN, ServicesScan))
#define SERVICES_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SCAN, ServicesScanClass))
#define SERVICES_IS_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SCAN))
#define SERVICES_IS_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SCAN))
#define SERVICES_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SCAN, ServicesScanClass))

typedef struct _ServicesScan ServicesScan;
typedef struct _ServicesScanClass ServicesScanClass;
typedef struct _ServicesScanPrivate ServicesScanPrivate;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define WIDGETS_TYPE_TRACK_ROW (widgets_track_row_get_type ())
#define WIDGETS_TRACK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRow))
#define WIDGETS_TRACK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRowClass))
#define WIDGETS_IS_TRACK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TRACK_ROW))
#define WIDGETS_IS_TRACK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TRACK_ROW))
#define WIDGETS_TRACK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TRACK_ROW, WidgetsTrackRowClass))

typedef struct _WidgetsTrackRow WidgetsTrackRow;
typedef struct _WidgetsTrackRowClass WidgetsTrackRowClass;

#define WIDGETS_TYPE_ALBUM_ARTIST_CHILD (widgets_album_artist_child_get_type ())
#define WIDGETS_ALBUM_ARTIST_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ALBUM_ARTIST_CHILD, WidgetsAlbumArtistChild))
#define WIDGETS_ALBUM_ARTIST_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ALBUM_ARTIST_CHILD, WidgetsAlbumArtistChildClass))
#define WIDGETS_IS_ALBUM_ARTIST_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ALBUM_ARTIST_CHILD))
#define WIDGETS_IS_ALBUM_ARTIST_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ALBUM_ARTIST_CHILD))
#define WIDGETS_ALBUM_ARTIST_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ALBUM_ARTIST_CHILD, WidgetsAlbumArtistChildClass))

typedef struct _WidgetsAlbumArtistChild WidgetsAlbumArtistChild;
typedef struct _WidgetsAlbumArtistChildClass WidgetsAlbumArtistChildClass;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	VIEWS_ARTIST_GO_BACK_SIGNAL,
	VIEWS_ARTIST_NUM_SIGNALS
};
static guint views_artist_signals[VIEWS_ARTIST_NUM_SIGNALS] = {0};

struct _ViewsArtist {
	GtkEventBox parent_instance;
	ViewsArtistPrivate * priv;
	ObjectsArtist* _artist;
};

struct _ViewsArtistClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsArtistPrivate {
	GtkLabel* name_label;
	WidgetsCover* image_cover;
	GtkListBox* listbox;
	GtkFlowBox* flowbox;
	gchar* _back_page;
	GeeArrayList* all_tracks;
	GeeArrayList* all_albums;
};

struct _ObjectsArtist {
	GObject parent_instance;
	ObjectsArtistPrivate * priv;
	gint id;
	gchar* name;
};

struct _ObjectsArtistClass {
	GObjectClass parent_class;
};

struct _ServicesScan {
	GObject parent_instance;
	ServicesScanPrivate * priv;
	gint counter;
	gint counter_max;
	gboolean is_sync;
};

struct _ServicesScanClass {
	GObjectClass parent_class;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};


static gpointer views_artist_parent_class = NULL;
extern ServicesScan* byte_scan_service;
extern ServicesDatabase* byte_database;
extern Utils* byte_utils;
extern GSettings* byte_settings;

GType views_artist_get_type (void) G_GNUC_CONST;
GType objects_artist_get_type (void) G_GNUC_CONST;
GType widgets_cover_get_type (void) G_GNUC_CONST;
GType objects_track_get_type (void) G_GNUC_CONST;
GType objects_album_get_type (void) G_GNUC_CONST;
#define VIEWS_ARTIST_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_ARTIST, ViewsArtistPrivate))
ViewsArtist* views_artist_new (void);
ViewsArtist* views_artist_construct (GType object_type);
const gchar* views_artist_get_back_page (ViewsArtist* self);
void views_artist_set_back_page (ViewsArtist* self,
                                 const gchar* value);
ObjectsArtist* views_artist_get_artist (ViewsArtist* self);
void views_artist_set_artist (ViewsArtist* self,
                              ObjectsArtist* value);
static void _views_artist_artist___lambda251_ (ViewsArtist* self,
                                        GtkWidget* widget);
static void __views_artist_artist___lambda251__gtk_callback (GtkWidget* widget,
                                                      gpointer self);
static void _views_artist_artist___lambda252_ (ViewsArtist* self,
                                        GtkWidget* widget);
static void __views_artist_artist___lambda252__gtk_callback (GtkWidget* widget,
                                                      gpointer self);
GType services_scan_get_type (void) G_GNUC_CONST;
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_tracks_by_artist (ServicesDatabase* self,
                                                          gint id);
GType widgets_track_row_get_type (void) G_GNUC_CONST;
WidgetsTrackRow* widgets_track_row_new (ObjectsTrack* track);
WidgetsTrackRow* widgets_track_row_construct (GType object_type,
                                              ObjectsTrack* track);
GeeArrayList* services_database_get_all_albums_by_artist (ServicesDatabase* self,
                                                          gint id);
GType widgets_album_artist_child_get_type (void) G_GNUC_CONST;
WidgetsAlbumArtistChild* widgets_album_artist_child_new (ObjectsAlbum* album);
WidgetsAlbumArtistChild* widgets_album_artist_child_construct (GType object_type,
                                                               ObjectsAlbum* album);
GType utils_get_type (void) G_GNUC_CONST;
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
void widgets_cover_set_with_default_icon (WidgetsCover* self,
                                          gint pixel_size,
                                          const gchar* type);
static GObject * views_artist_constructor (GType type,
                                    guint n_construct_properties,
                                    GObjectConstructParam * construct_properties);
WidgetsCover* widgets_cover_new_with_default_icon (gint pixel_size,
                                                   const gchar* type);
WidgetsCover* widgets_cover_construct_with_default_icon (GType object_type,
                                                         gint pixel_size,
                                                         const gchar* type);
static void _views_artist___lambda255_ (ViewsArtist* self);
static void __views_artist___lambda255__gtk_button_clicked (GtkButton* _sender,
                                                     gpointer self);
static void _views_artist___lambda256_ (ViewsArtist* self,
                                 GtkListBoxRow* row);
void utils_set_items (Utils* self,
                      GeeArrayList* all_items,
                      gboolean shuffle_mode,
                      ObjectsTrack* track);
ObjectsTrack* widgets_track_row_get_track (WidgetsTrackRow* self);
static void __views_artist___lambda256__gtk_list_box_row_activated (GtkListBox* _sender,
                                                             GtkListBoxRow* row,
                                                             gpointer self);
static void views_artist_finalize (GObject * obj);
static void _vala_views_artist_get_property (GObject * object,
                                      guint property_id,
                                      GValue * value,
                                      GParamSpec * pspec);
static void _vala_views_artist_set_property (GObject * object,
                                      guint property_id,
                                      const GValue * value,
                                      GParamSpec * pspec);


ViewsArtist*
views_artist_construct (GType object_type)
{
	ViewsArtist * self = NULL;
	self = (ViewsArtist*) g_object_new (object_type, NULL);
	return self;
}


ViewsArtist*
views_artist_new (void)
{
	return views_artist_construct (VIEWS_TYPE_ARTIST);
}


const gchar*
views_artist_get_back_page (ViewsArtist* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_back_page;
	result = _tmp0_;
	return result;
}


void
views_artist_set_back_page (ViewsArtist* self,
                            const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, views_artist_get_back_page (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_back_page);
		self->priv->_back_page = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, views_artist_properties[VIEWS_ARTIST_BACK_PAGE_PROPERTY]);
	}
}


ObjectsArtist*
views_artist_get_artist (ViewsArtist* self)
{
	ObjectsArtist* result;
	ObjectsArtist* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->_artist;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
_views_artist_artist___lambda251_ (ViewsArtist* self,
                                   GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
__views_artist_artist___lambda251__gtk_callback (GtkWidget* widget,
                                                 gpointer self)
{
	_views_artist_artist___lambda251_ ((ViewsArtist*) self, widget);
}


static void
_views_artist_artist___lambda252_ (ViewsArtist* self,
                                   GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
__views_artist_artist___lambda252__gtk_callback (GtkWidget* widget,
                                                 gpointer self)
{
	_views_artist_artist___lambda252_ ((ViewsArtist*) self, widget);
}


void
views_artist_set_artist (ViewsArtist* self,
                         ObjectsArtist* value)
{
	ObjectsArtist* _tmp0_;
	GtkLabel* _tmp1_;
	ObjectsArtist* _tmp2_;
	const gchar* _tmp3_;
	gint item_max = 0;
	GtkListBox* _tmp4_;
	GtkFlowBox* _tmp5_;
	ServicesScan* _tmp6_;
	gboolean _tmp7_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	_tmp0_ = _g_object_ref0 (value);
	_g_object_unref0 (self->_artist);
	self->_artist = _tmp0_;
	_tmp1_ = self->priv->name_label;
	_tmp2_ = self->_artist;
	_tmp3_ = _tmp2_->name;
	gtk_label_set_label (_tmp1_, _tmp3_);
	item_max = 5;
	_tmp4_ = self->priv->listbox;
	gtk_container_foreach ((GtkContainer*) _tmp4_, __views_artist_artist___lambda251__gtk_callback, self);
	_tmp5_ = self->priv->flowbox;
	gtk_container_foreach ((GtkContainer*) _tmp5_, __views_artist_artist___lambda252__gtk_callback, self);
	_tmp6_ = byte_scan_service;
	_tmp7_ = _tmp6_->is_sync;
	if (_tmp7_ == FALSE) {
		GeeArrayList* _tmp8_;
		ServicesDatabase* _tmp9_;
		ObjectsArtist* _tmp10_;
		gint _tmp11_;
		GeeArrayList* _tmp12_;
		gint _tmp13_;
		GeeArrayList* _tmp14_;
		gint _tmp15_;
		gint _tmp16_;
		GeeArrayList* _tmp33_;
		ServicesDatabase* _tmp34_;
		ObjectsArtist* _tmp35_;
		gint _tmp36_;
		GeeArrayList* _tmp37_;
		_tmp8_ = gee_array_list_new (OBJECTS_TYPE_TRACK, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL);
		_g_object_unref0 (self->priv->all_tracks);
		self->priv->all_tracks = _tmp8_;
		_tmp9_ = byte_database;
		_tmp10_ = self->_artist;
		_tmp11_ = _tmp10_->id;
		_tmp12_ = services_database_get_all_tracks_by_artist (_tmp9_, _tmp11_);
		_g_object_unref0 (self->priv->all_tracks);
		self->priv->all_tracks = _tmp12_;
		_tmp13_ = item_max;
		_tmp14_ = self->priv->all_tracks;
		_tmp15_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp14_);
		_tmp16_ = _tmp15_;
		if (_tmp13_ > _tmp16_) {
			GeeArrayList* _tmp17_;
			gint _tmp18_;
			gint _tmp19_;
			_tmp17_ = self->priv->all_tracks;
			_tmp18_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp17_);
			_tmp19_ = _tmp18_;
			item_max = _tmp19_;
		}
		{
			gint i = 0;
			i = 0;
			{
				gboolean _tmp20_ = FALSE;
				_tmp20_ = TRUE;
				while (TRUE) {
					gint _tmp22_;
					gint _tmp23_;
					WidgetsTrackRow* row = NULL;
					GeeArrayList* _tmp24_;
					gint _tmp25_;
					gpointer _tmp26_;
					ObjectsTrack* _tmp27_;
					WidgetsTrackRow* _tmp28_;
					WidgetsTrackRow* _tmp29_;
					GtkListBox* _tmp30_;
					WidgetsTrackRow* _tmp31_;
					GtkListBox* _tmp32_;
					if (!_tmp20_) {
						gint _tmp21_;
						_tmp21_ = i;
						i = _tmp21_ + 1;
					}
					_tmp20_ = FALSE;
					_tmp22_ = i;
					_tmp23_ = item_max;
					if (!(_tmp22_ < _tmp23_)) {
						break;
					}
					_tmp24_ = self->priv->all_tracks;
					_tmp25_ = i;
					_tmp26_ = gee_abstract_list_get ((GeeAbstractList*) _tmp24_, _tmp25_);
					_tmp27_ = (ObjectsTrack*) _tmp26_;
					_tmp28_ = widgets_track_row_new (_tmp27_);
					g_object_ref_sink (_tmp28_);
					_tmp29_ = _tmp28_;
					_g_object_unref0 (_tmp27_);
					row = _tmp29_;
					_tmp30_ = self->priv->listbox;
					_tmp31_ = row;
					gtk_container_add ((GtkContainer*) _tmp30_, (GtkWidget*) _tmp31_);
					_tmp32_ = self->priv->listbox;
					gtk_widget_show_all ((GtkWidget*) _tmp32_);
					_g_object_unref0 (row);
				}
			}
		}
		_tmp33_ = gee_array_list_new (OBJECTS_TYPE_ALBUM, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL);
		_g_object_unref0 (self->priv->all_albums);
		self->priv->all_albums = _tmp33_;
		_tmp34_ = byte_database;
		_tmp35_ = self->_artist;
		_tmp36_ = _tmp35_->id;
		_tmp37_ = services_database_get_all_albums_by_artist (_tmp34_, _tmp36_);
		_g_object_unref0 (self->priv->all_albums);
		self->priv->all_albums = _tmp37_;
		{
			GeeArrayList* _item_list = NULL;
			GeeArrayList* _tmp38_;
			GeeArrayList* _tmp39_;
			gint _item_size = 0;
			GeeArrayList* _tmp40_;
			gint _tmp41_;
			gint _tmp42_;
			gint _item_index = 0;
			_tmp38_ = self->priv->all_albums;
			_tmp39_ = _g_object_ref0 (_tmp38_);
			_item_list = _tmp39_;
			_tmp40_ = _item_list;
			_tmp41_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp40_);
			_tmp42_ = _tmp41_;
			_item_size = _tmp42_;
			_item_index = -1;
			while (TRUE) {
				gint _tmp43_;
				gint _tmp44_;
				gint _tmp45_;
				ObjectsAlbum* item = NULL;
				GeeArrayList* _tmp46_;
				gint _tmp47_;
				gpointer _tmp48_;
				WidgetsAlbumArtistChild* row = NULL;
				ObjectsAlbum* _tmp49_;
				WidgetsAlbumArtistChild* _tmp50_;
				GtkFlowBox* _tmp51_;
				WidgetsAlbumArtistChild* _tmp52_;
				GtkFlowBox* _tmp53_;
				_tmp43_ = _item_index;
				_item_index = _tmp43_ + 1;
				_tmp44_ = _item_index;
				_tmp45_ = _item_size;
				if (!(_tmp44_ < _tmp45_)) {
					break;
				}
				_tmp46_ = _item_list;
				_tmp47_ = _item_index;
				_tmp48_ = gee_abstract_list_get ((GeeAbstractList*) _tmp46_, _tmp47_);
				item = (ObjectsAlbum*) _tmp48_;
				_tmp49_ = item;
				_tmp50_ = widgets_album_artist_child_new (_tmp49_);
				g_object_ref_sink (_tmp50_);
				row = _tmp50_;
				_tmp51_ = self->priv->flowbox;
				_tmp52_ = row;
				gtk_container_add ((GtkContainer*) _tmp51_, (GtkWidget*) _tmp52_);
				_tmp53_ = self->priv->flowbox;
				gtk_widget_show_all ((GtkWidget*) _tmp53_);
				_g_object_unref0 (row);
				_g_object_unref0 (item);
			}
			_g_object_unref0 (_item_list);
		}
	}
	{
		gchar* cover_path = NULL;
		Utils* _tmp54_;
		const gchar* _tmp55_;
		ObjectsArtist* _tmp56_;
		gint _tmp57_;
		gchar* _tmp58_;
		gchar* _tmp59_;
		gchar* _tmp60_;
		gchar* _tmp61_;
		GdkPixbuf* pixbuf = NULL;
		GdkPixbuf* _tmp62_;
		WidgetsCover* _tmp63_;
		_tmp54_ = byte_utils;
		_tmp55_ = _tmp54_->COVER_FOLDER;
		_tmp56_ = self->_artist;
		_tmp57_ = _tmp56_->id;
		_tmp58_ = g_strdup_printf ("artist-%i.jpg", _tmp57_);
		_tmp59_ = _tmp58_;
		_tmp60_ = g_build_filename (_tmp55_, _tmp59_, NULL);
		_tmp61_ = _tmp60_;
		_g_free0 (_tmp59_);
		cover_path = _tmp61_;
		_tmp62_ = gdk_pixbuf_new_from_file_at_size (cover_path, 64, 64, &_inner_error_);
		pixbuf = _tmp62_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_free0 (cover_path);
			goto __catch50_g_error;
		}
		_tmp63_ = self->priv->image_cover;
		widgets_cover_set_pixbuf (_tmp63_, pixbuf);
		_g_object_unref0 (pixbuf);
		_g_free0 (cover_path);
	}
	goto __finally50;
	__catch50_g_error:
	{
		GError* e = NULL;
		WidgetsCover* _tmp64_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp64_ = self->priv->image_cover;
		widgets_cover_set_with_default_icon (_tmp64_, 64, "artist");
		_g_error_free0 (e);
	}
	__finally50:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	g_object_notify_by_pspec ((GObject *) self, views_artist_properties[VIEWS_ARTIST_ARTIST_PROPERTY]);
}


static void
_views_artist___lambda255_ (ViewsArtist* self)
{
	const gchar* _tmp0_;
	_tmp0_ = self->priv->_back_page;
	g_signal_emit (self, views_artist_signals[VIEWS_ARTIST_GO_BACK_SIGNAL], 0, _tmp0_);
}


static void
__views_artist___lambda255__gtk_button_clicked (GtkButton* _sender,
                                                gpointer self)
{
	_views_artist___lambda255_ ((ViewsArtist*) self);
}


static void
_views_artist___lambda256_ (ViewsArtist* self,
                            GtkListBoxRow* row)
{
	WidgetsTrackRow* item = NULL;
	WidgetsTrackRow* _tmp0_;
	Utils* _tmp1_;
	GeeArrayList* _tmp2_;
	GSettings* _tmp3_;
	WidgetsTrackRow* _tmp4_;
	ObjectsTrack* _tmp5_;
	ObjectsTrack* _tmp6_;
	g_return_if_fail (row != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TRACK_ROW) ? ((WidgetsTrackRow*) row) : NULL);
	item = _tmp0_;
	_tmp1_ = byte_utils;
	_tmp2_ = self->priv->all_tracks;
	_tmp3_ = byte_settings;
	_tmp4_ = item;
	_tmp5_ = widgets_track_row_get_track (_tmp4_);
	_tmp6_ = _tmp5_;
	utils_set_items (_tmp1_, _tmp2_, g_settings_get_boolean (_tmp3_, "shuffle-mode"), _tmp6_);
	_g_object_unref0 (item);
}


static void
__views_artist___lambda256__gtk_list_box_row_activated (GtkListBox* _sender,
                                                        GtkListBoxRow* row,
                                                        gpointer self)
{
	_views_artist___lambda256_ ((ViewsArtist*) self, row);
}


static GObject *
views_artist_constructor (GType type,
                          guint n_construct_properties,
                          GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsArtist * self;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkButton* back_button = NULL;
	GtkButton* _tmp2_;
	GtkButton* _tmp3_;
	GtkButton* _tmp4_;
	GtkButton* _tmp5_;
	GtkButton* _tmp6_;
	GtkButton* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkButton* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkLabel* center_label = NULL;
	GtkLabel* _tmp11_;
	GtkLabel* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	GtkStyleContext* _tmp15_;
	GtkLabel* _tmp16_;
	GtkStyleContext* _tmp17_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp18_;
	GtkBox* _tmp19_;
	GtkStyleContext* _tmp20_;
	GtkBox* _tmp21_;
	GtkButton* _tmp22_;
	GtkBox* _tmp23_;
	GtkLabel* _tmp24_;
	WidgetsCover* _tmp25_;
	WidgetsCover* _tmp26_;
	WidgetsCover* _tmp27_;
	GtkLabel* _tmp28_;
	GtkLabel* _tmp29_;
	GtkLabel* _tmp30_;
	GtkLabel* _tmp31_;
	GtkLabel* _tmp32_;
	GtkLabel* _tmp33_;
	GtkLabel* _tmp34_;
	GtkStyleContext* _tmp35_;
	GtkLabel* _tmp36_;
	GtkStyleContext* _tmp37_;
	GtkLabel* most_played_label = NULL;
	gchar* _tmp38_;
	gchar* _tmp39_;
	GtkLabel* _tmp40_;
	GtkLabel* _tmp41_;
	GtkLabel* _tmp42_;
	GtkStyleContext* _tmp43_;
	GtkLabel* _tmp44_;
	GtkStyleContext* _tmp45_;
	GtkLabel* _tmp46_;
	GtkLabel* _tmp47_;
	GtkLabel* _tmp48_;
	GtkListBox* _tmp49_;
	GtkLabel* albums_label = NULL;
	gchar* _tmp50_;
	gchar* _tmp51_;
	GtkLabel* _tmp52_;
	GtkLabel* _tmp53_;
	GtkLabel* _tmp54_;
	GtkStyleContext* _tmp55_;
	GtkLabel* _tmp56_;
	GtkStyleContext* _tmp57_;
	GtkLabel* _tmp58_;
	GtkLabel* _tmp59_;
	GtkLabel* _tmp60_;
	GtkFlowBox* _tmp61_;
	GtkFlowBox* _tmp62_;
	GtkFlowBox* _tmp63_;
	GtkBox* detail_box = NULL;
	GtkBox* _tmp64_;
	GtkBox* _tmp65_;
	GtkStyleContext* _tmp66_;
	GtkBox* _tmp67_;
	WidgetsCover* _tmp68_;
	GtkBox* _tmp69_;
	GtkLabel* _tmp70_;
	GtkBox* _tmp71_;
	GtkLabel* _tmp72_;
	GtkBox* _tmp73_;
	GtkSeparator* _tmp74_;
	GtkSeparator* _tmp75_;
	GtkBox* _tmp76_;
	GtkListBox* _tmp77_;
	GtkBox* _tmp78_;
	GtkLabel* _tmp79_;
	GtkBox* _tmp80_;
	GtkFlowBox* _tmp81_;
	GtkScrolledWindow* main_scrolled = NULL;
	GtkScrolledWindow* _tmp82_;
	GtkScrolledWindow* _tmp83_;
	GtkScrolledWindow* _tmp84_;
	GtkScrolledWindow* _tmp85_;
	GtkScrolledWindow* _tmp86_;
	GtkBox* _tmp87_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp88_;
	GtkBox* _tmp89_;
	GtkBox* _tmp90_;
	GtkBox* _tmp91_;
	GtkBox* _tmp92_;
	GtkSeparator* _tmp93_;
	GtkSeparator* _tmp94_;
	GtkBox* _tmp95_;
	GtkScrolledWindow* _tmp96_;
	GtkBox* _tmp97_;
	GtkButton* _tmp98_;
	GtkListBox* _tmp99_;
	parent_class = G_OBJECT_CLASS (views_artist_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_ARTIST, ViewsArtist);
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_VIEW);
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp1_, "w-round");
	_tmp2_ = (GtkButton*) gtk_button_new_from_icon_name ("byte-arrow-back-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
	g_object_ref_sink (_tmp2_);
	back_button = _tmp2_;
	_tmp3_ = back_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp3_, FALSE);
	_tmp4_ = back_button;
	g_object_set ((GtkWidget*) _tmp4_, "margin", 3, NULL);
	_tmp5_ = back_button;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp5_, 6);
	_tmp6_ = back_button;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp6_, 6);
	_tmp7_ = back_button;
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
	gtk_style_context_add_class (_tmp8_, GTK_STYLE_CLASS_FLAT);
	_tmp9_ = back_button;
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
	gtk_style_context_add_class (_tmp10_, "label-color-primary");
	_tmp11_ = (GtkLabel*) gtk_label_new (_ ("Artist"));
	g_object_ref_sink (_tmp11_);
	center_label = _tmp11_;
	_tmp12_ = center_label;
	gtk_label_set_use_markup (_tmp12_, TRUE);
	_tmp13_ = center_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp13_, GTK_ALIGN_CENTER);
	_tmp14_ = center_label;
	_tmp15_ = gtk_widget_get_style_context ((GtkWidget*) _tmp14_);
	gtk_style_context_add_class (_tmp15_, "h3");
	_tmp16_ = center_label;
	_tmp17_ = gtk_widget_get_style_context ((GtkWidget*) _tmp16_);
	gtk_style_context_add_class (_tmp17_, "label-color-primary");
	_tmp18_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp18_);
	header_box = _tmp18_;
	_tmp19_ = header_box;
	_tmp20_ = gtk_widget_get_style_context ((GtkWidget*) _tmp19_);
	gtk_style_context_add_class (_tmp20_, GTK_STYLE_CLASS_BACKGROUND);
	_tmp21_ = header_box;
	_tmp22_ = back_button;
	gtk_box_pack_start (_tmp21_, (GtkWidget*) _tmp22_, FALSE, FALSE, (guint) 0);
	_tmp23_ = header_box;
	_tmp24_ = center_label;
	gtk_box_set_center_widget (_tmp23_, (GtkWidget*) _tmp24_);
	_tmp25_ = widgets_cover_new_with_default_icon (128, "artist");
	g_object_ref_sink (_tmp25_);
	_g_object_unref0 (self->priv->image_cover);
	self->priv->image_cover = _tmp25_;
	_tmp26_ = self->priv->image_cover;
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_CENTER);
	_tmp27_ = self->priv->image_cover;
	gtk_widget_set_valign ((GtkWidget*) _tmp27_, GTK_ALIGN_CENTER);
	_tmp28_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp28_);
	_g_object_unref0 (self->priv->name_label);
	self->priv->name_label = _tmp28_;
	_tmp29_ = self->priv->name_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp29_, GTK_ALIGN_CENTER);
	_tmp30_ = self->priv->name_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp30_, GTK_ALIGN_CENTER);
	_tmp31_ = self->priv->name_label;
	g_object_set (_tmp31_, "wrap", TRUE, NULL);
	_tmp32_ = self->priv->name_label;
	g_object_set (_tmp32_, "wrap-mode", PANGO_WRAP_CHAR, NULL);
	_tmp33_ = self->priv->name_label;
	gtk_label_set_justify (_tmp33_, GTK_JUSTIFY_FILL);
	_tmp34_ = self->priv->name_label;
	_tmp35_ = gtk_widget_get_style_context ((GtkWidget*) _tmp34_);
	gtk_style_context_add_class (_tmp35_, "font-bold");
	_tmp36_ = self->priv->name_label;
	_tmp37_ = gtk_widget_get_style_context ((GtkWidget*) _tmp36_);
	gtk_style_context_add_class (_tmp37_, "h3");
	_tmp38_ = g_strdup_printf ("<b>%s</b>", _ ("Most Played"));
	_tmp39_ = _tmp38_;
	_tmp40_ = (GtkLabel*) gtk_label_new (_tmp39_);
	g_object_ref_sink (_tmp40_);
	_tmp41_ = _tmp40_;
	_g_free0 (_tmp39_);
	most_played_label = _tmp41_;
	_tmp42_ = most_played_label;
	_tmp43_ = gtk_widget_get_style_context ((GtkWidget*) _tmp42_);
	gtk_style_context_add_class (_tmp43_, "label-color-primary");
	_tmp44_ = most_played_label;
	_tmp45_ = gtk_widget_get_style_context ((GtkWidget*) _tmp44_);
	gtk_style_context_add_class (_tmp45_, "h3");
	_tmp46_ = most_played_label;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp46_, 6);
	_tmp47_ = most_played_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp47_, GTK_ALIGN_START);
	_tmp48_ = most_played_label;
	gtk_label_set_use_markup (_tmp48_, TRUE);
	_tmp49_ = (GtkListBox*) gtk_list_box_new ();
	g_object_ref_sink (_tmp49_);
	_g_object_unref0 (self->priv->listbox);
	self->priv->listbox = _tmp49_;
	_tmp50_ = g_strdup_printf ("<b>%s</b>", _ ("Albums"));
	_tmp51_ = _tmp50_;
	_tmp52_ = (GtkLabel*) gtk_label_new (_tmp51_);
	g_object_ref_sink (_tmp52_);
	_tmp53_ = _tmp52_;
	_g_free0 (_tmp51_);
	albums_label = _tmp53_;
	_tmp54_ = albums_label;
	_tmp55_ = gtk_widget_get_style_context ((GtkWidget*) _tmp54_);
	gtk_style_context_add_class (_tmp55_, "label-color-primary");
	_tmp56_ = albums_label;
	_tmp57_ = gtk_widget_get_style_context ((GtkWidget*) _tmp56_);
	gtk_style_context_add_class (_tmp57_, "h3");
	_tmp58_ = albums_label;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp58_, 7);
	_tmp59_ = albums_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp59_, GTK_ALIGN_START);
	_tmp60_ = albums_label;
	gtk_label_set_use_markup (_tmp60_, TRUE);
	_tmp61_ = (GtkFlowBox*) gtk_flow_box_new ();
	g_object_ref_sink (_tmp61_);
	_g_object_unref0 (self->priv->flowbox);
	self->priv->flowbox = _tmp61_;
	_tmp62_ = self->priv->flowbox;
	gtk_flow_box_set_min_children_per_line (_tmp62_, (guint) 2);
	_tmp63_ = self->priv->flowbox;
	gtk_flow_box_set_max_children_per_line (_tmp63_, (guint) 2);
	_tmp64_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp64_);
	detail_box = _tmp64_;
	_tmp65_ = detail_box;
	_tmp66_ = gtk_widget_get_style_context ((GtkWidget*) _tmp65_);
	gtk_style_context_add_class (_tmp66_, GRANITE_STYLE_CLASS_WELCOME);
	_tmp67_ = detail_box;
	_tmp68_ = self->priv->image_cover;
	gtk_box_pack_start (_tmp67_, (GtkWidget*) _tmp68_, FALSE, FALSE, (guint) 6);
	_tmp69_ = detail_box;
	_tmp70_ = self->priv->name_label;
	gtk_box_pack_start (_tmp69_, (GtkWidget*) _tmp70_, FALSE, FALSE, (guint) 6);
	_tmp71_ = detail_box;
	_tmp72_ = most_played_label;
	gtk_box_pack_start (_tmp71_, (GtkWidget*) _tmp72_, FALSE, FALSE, (guint) 3);
	_tmp73_ = detail_box;
	_tmp74_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp74_);
	_tmp75_ = _tmp74_;
	gtk_box_pack_start (_tmp73_, (GtkWidget*) _tmp75_, FALSE, FALSE, (guint) 0);
	_g_object_unref0 (_tmp75_);
	_tmp76_ = detail_box;
	_tmp77_ = self->priv->listbox;
	gtk_box_pack_start (_tmp76_, (GtkWidget*) _tmp77_, FALSE, FALSE, (guint) 0);
	_tmp78_ = detail_box;
	_tmp79_ = albums_label;
	gtk_box_pack_start (_tmp78_, (GtkWidget*) _tmp79_, FALSE, FALSE, (guint) 3);
	_tmp80_ = detail_box;
	_tmp81_ = self->priv->flowbox;
	gtk_box_pack_start (_tmp80_, (GtkWidget*) _tmp81_, FALSE, FALSE, (guint) 0);
	_tmp82_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
	g_object_ref_sink (_tmp82_);
	main_scrolled = _tmp82_;
	_tmp83_ = main_scrolled;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp83_, 48);
	_tmp84_ = main_scrolled;
	g_object_set (_tmp84_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
	_tmp85_ = main_scrolled;
	g_object_set ((GtkWidget*) _tmp85_, "expand", TRUE, NULL);
	_tmp86_ = main_scrolled;
	_tmp87_ = detail_box;
	gtk_container_add ((GtkContainer*) _tmp86_, (GtkWidget*) _tmp87_);
	_tmp88_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp88_);
	main_box = _tmp88_;
	_tmp89_ = main_box;
	g_object_set ((GtkWidget*) _tmp89_, "expand", TRUE, NULL);
	_tmp90_ = main_box;
	_tmp91_ = header_box;
	gtk_box_pack_start (_tmp90_, (GtkWidget*) _tmp91_, FALSE, FALSE, (guint) 0);
	_tmp92_ = main_box;
	_tmp93_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp93_);
	_tmp94_ = _tmp93_;
	gtk_box_pack_start (_tmp92_, (GtkWidget*) _tmp94_, FALSE, FALSE, (guint) 0);
	_g_object_unref0 (_tmp94_);
	_tmp95_ = main_box;
	_tmp96_ = main_scrolled;
	gtk_box_pack_start (_tmp95_, (GtkWidget*) _tmp96_, TRUE, TRUE, (guint) 0);
	_tmp97_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp97_);
	_tmp98_ = back_button;
	g_signal_connect_object (_tmp98_, "clicked", (GCallback) __views_artist___lambda255__gtk_button_clicked, self, 0);
	_tmp99_ = self->priv->listbox;
	g_signal_connect_object (_tmp99_, "row-activated", (GCallback) __views_artist___lambda256__gtk_list_box_row_activated, self, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (main_scrolled);
	_g_object_unref0 (detail_box);
	_g_object_unref0 (albums_label);
	_g_object_unref0 (most_played_label);
	_g_object_unref0 (header_box);
	_g_object_unref0 (center_label);
	_g_object_unref0 (back_button);
	return obj;
}


static void
views_artist_class_init (ViewsArtistClass * klass)
{
	views_artist_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (ViewsArtistPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_views_artist_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_views_artist_set_property;
	G_OBJECT_CLASS (klass)->constructor = views_artist_constructor;
	G_OBJECT_CLASS (klass)->finalize = views_artist_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_ARTIST_BACK_PAGE_PROPERTY, views_artist_properties[VIEWS_ARTIST_BACK_PAGE_PROPERTY] = g_param_spec_string ("back-page", "back-page", "back-page", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_ARTIST_ARTIST_PROPERTY, views_artist_properties[VIEWS_ARTIST_ARTIST_PROPERTY] = g_param_spec_object ("artist", "artist", "artist", OBJECTS_TYPE_ARTIST, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	views_artist_signals[VIEWS_ARTIST_GO_BACK_SIGNAL] = g_signal_new ("go-back", VIEWS_TYPE_ARTIST, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
}


static void
views_artist_instance_init (ViewsArtist * self)
{
	self->priv = VIEWS_ARTIST_GET_PRIVATE (self);
}


static void
views_artist_finalize (GObject * obj)
{
	ViewsArtist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_ARTIST, ViewsArtist);
	_g_object_unref0 (self->priv->name_label);
	_g_object_unref0 (self->priv->image_cover);
	_g_object_unref0 (self->priv->listbox);
	_g_object_unref0 (self->priv->flowbox);
	_g_free0 (self->priv->_back_page);
	_g_object_unref0 (self->priv->all_tracks);
	_g_object_unref0 (self->priv->all_albums);
	_g_object_unref0 (self->_artist);
	G_OBJECT_CLASS (views_artist_parent_class)->finalize (obj);
}


GType
views_artist_get_type (void)
{
	static volatile gsize views_artist_type_id__volatile = 0;
	if (g_once_init_enter (&views_artist_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsArtistClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_artist_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsArtist), 0, (GInstanceInitFunc) views_artist_instance_init, NULL };
		GType views_artist_type_id;
		views_artist_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsArtist", &g_define_type_info, 0);
		g_once_init_leave (&views_artist_type_id__volatile, views_artist_type_id);
	}
	return views_artist_type_id__volatile;
}


static void
_vala_views_artist_get_property (GObject * object,
                                 guint property_id,
                                 GValue * value,
                                 GParamSpec * pspec)
{
	ViewsArtist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_ARTIST, ViewsArtist);
	switch (property_id) {
		case VIEWS_ARTIST_BACK_PAGE_PROPERTY:
		g_value_set_string (value, views_artist_get_back_page (self));
		break;
		case VIEWS_ARTIST_ARTIST_PROPERTY:
		g_value_set_object (value, views_artist_get_artist (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_views_artist_set_property (GObject * object,
                                 guint property_id,
                                 const GValue * value,
                                 GParamSpec * pspec)
{
	ViewsArtist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_ARTIST, ViewsArtist);
	switch (property_id) {
		case VIEWS_ARTIST_BACK_PAGE_PROPERTY:
		views_artist_set_back_page (self, g_value_get_string (value));
		break;
		case VIEWS_ARTIST_ARTIST_PROPERTY:
		views_artist_set_artist (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



