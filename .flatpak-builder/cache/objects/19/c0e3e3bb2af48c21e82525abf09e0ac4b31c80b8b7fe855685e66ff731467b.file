/* Notification.c generated by valac 0.40.11, the Vala compiler
 * generated from Notification.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <stdio.h>


#define SERVICES_TYPE_NOTIFICATION (services_notification_get_type ())
#define SERVICES_NOTIFICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATION, ServicesNotification))
#define SERVICES_NOTIFICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATION, ServicesNotificationClass))
#define SERVICES_IS_NOTIFICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATION))
#define SERVICES_IS_NOTIFICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATION))
#define SERVICES_NOTIFICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATION, ServicesNotificationClass))

typedef struct _ServicesNotification ServicesNotification;
typedef struct _ServicesNotificationClass ServicesNotificationClass;
typedef struct _ServicesNotificationPrivate ServicesNotificationPrivate;
enum  {
	SERVICES_NOTIFICATION_0_PROPERTY,
	SERVICES_NOTIFICATION_NUM_PROPERTIES
};
static GParamSpec* services_notification_properties[SERVICES_NOTIFICATION_NUM_PROPERTIES];

#define SERVICES_TYPE_PLAYER (services_player_get_type ())
#define SERVICES_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_PLAYER, ServicesPlayer))
#define SERVICES_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_PLAYER, ServicesPlayerClass))
#define SERVICES_IS_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_PLAYER))
#define SERVICES_IS_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_PLAYER))
#define SERVICES_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_PLAYER, ServicesPlayerClass))

typedef struct _ServicesPlayer ServicesPlayer;
typedef struct _ServicesPlayerClass ServicesPlayerClass;

#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;
typedef struct _ObjectsTrackPrivate ObjectsTrackPrivate;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_BYTE (byte_get_type ())
#define BYTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BYTE, Byte))
#define BYTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BYTE, ByteClass))
#define IS_BYTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BYTE))
#define IS_BYTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BYTE))
#define BYTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BYTE, ByteClass))

typedef struct _Byte Byte;
typedef struct _ByteClass ByteClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define OBJECTS_TYPE_RADIO (objects_radio_get_type ())
#define OBJECTS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_RADIO, ObjectsRadio))
#define OBJECTS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_RADIO, ObjectsRadioClass))
#define OBJECTS_IS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_RADIO))
#define OBJECTS_IS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_RADIO))
#define OBJECTS_RADIO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_RADIO, ObjectsRadioClass))

typedef struct _ObjectsRadio ObjectsRadio;
typedef struct _ObjectsRadioClass ObjectsRadioClass;

struct _ServicesNotification {
	GObject parent_instance;
	ServicesNotificationPrivate * priv;
};

struct _ServicesNotificationClass {
	GObjectClass parent_class;
};

struct _ObjectsTrack {
	GObject parent_instance;
	ObjectsTrackPrivate * priv;
	gint track_order;
	gint id;
	gint album_id;
	gint track;
	gint disc;
	gint play_count;
	gint is_favorite;
	gint bitrate;
	gint bpm;
	gint rating;
	gint samplerate;
	gint channels;
	gint year;
	gint playlist;
	guint64 duration;
	gchar* path;
	gchar* title;
	gchar* favorite_added;
	gchar* last_played;
	gchar* album_title;
	gchar* artist_name;
	gchar* composer;
	gchar* grouping;
	gchar* comment;
	gchar* lyrics;
	gchar* genre;
	gchar* album_artist;
	gchar* date_added;
};

struct _ObjectsTrackClass {
	GObjectClass parent_class;
};


static gpointer services_notification_parent_class = NULL;
extern ServicesPlayer* byte_player;
extern GSettings* byte_settings;
extern Utils* byte_utils;

GType services_notification_get_type (void) G_GNUC_CONST;
ServicesNotification* services_notification_new (void);
ServicesNotification* services_notification_construct (GType object_type);
GType services_player_get_type (void) G_GNUC_CONST;
GType objects_track_get_type (void) G_GNUC_CONST;
static void __lambda369_ (ServicesNotification* self,
                   ObjectsTrack* track);
void services_notification_send_track_notification (ServicesNotification* self,
                                                    ObjectsTrack* track);
static void ___lambda369__services_player_current_track_changed (ServicesPlayer* _sender,
                                                          ObjectsTrack* track,
                                                          gpointer self);
static void __lambda370_ (ServicesNotification* self,
                   const gchar* title);
void services_notification_send_radio_notification (ServicesNotification* self,
                                                    const gchar* title);
static void ___lambda370__services_player_current_radio_title_changed (ServicesPlayer* _sender,
                                                                const gchar* title,
                                                                gpointer self);
GType utils_get_type (void) G_GNUC_CONST;
gchar* utils_get_cover_file (Utils* self,
                             gint track_id);
GType byte_get_type (void) G_GNUC_CONST;
Byte* byte_get_instance (void);
void services_notification_send_notification (ServicesNotification* self,
                                              const gchar* title,
                                              const gchar* body);
GType objects_radio_get_type (void) G_GNUC_CONST;
ObjectsRadio* services_player_get_current_radio (ServicesPlayer* self);
const gchar* objects_radio_get_name (ObjectsRadio* self);
gchar* utils_get_cover_radio_file (Utils* self,
                                   gint radio_id);
gint objects_radio_get_id (ObjectsRadio* self);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


static void
__lambda369_ (ServicesNotification* self,
              ObjectsTrack* track)
{
	GSettings* _tmp0_;
	_tmp0_ = byte_settings;
	if (g_settings_get_boolean (_tmp0_, "notifications-enabled")) {
		services_notification_send_track_notification (self, track);
	}
}


static void
___lambda369__services_player_current_track_changed (ServicesPlayer* _sender,
                                                     ObjectsTrack* track,
                                                     gpointer self)
{
	__lambda369_ ((ServicesNotification*) self, track);
}


static void
__lambda370_ (ServicesNotification* self,
              const gchar* title)
{
	GSettings* _tmp0_;
	_tmp0_ = byte_settings;
	if (g_settings_get_boolean (_tmp0_, "notifications-enabled")) {
		services_notification_send_radio_notification (self, title);
	}
}


static void
___lambda370__services_player_current_radio_title_changed (ServicesPlayer* _sender,
                                                           const gchar* title,
                                                           gpointer self)
{
	__lambda370_ ((ServicesNotification*) self, title);
}


ServicesNotification*
services_notification_construct (GType object_type)
{
	ServicesNotification * self = NULL;
	ServicesPlayer* _tmp0_;
	ServicesPlayer* _tmp1_;
	self = (ServicesNotification*) g_object_new (object_type, NULL);
	_tmp0_ = byte_player;
	g_signal_connect_object (_tmp0_, "current-track-changed", (GCallback) ___lambda369__services_player_current_track_changed, self, 0);
	_tmp1_ = byte_player;
	g_signal_connect_object (_tmp1_, "current-radio-title-changed", (GCallback) ___lambda370__services_player_current_radio_title_changed, self, 0);
	return self;
}


ServicesNotification*
services_notification_new (void)
{
	return services_notification_construct (SERVICES_TYPE_NOTIFICATION);
}


void
services_notification_send_track_notification (ServicesNotification* self,
                                               ObjectsTrack* track)
{
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (track != NULL);
	{
		GNotification* notification = NULL;
		const gchar* _tmp0_;
		GNotification* _tmp1_;
		const gchar* _tmp2_;
		GIcon* _tmp3_ = NULL;
		Utils* _tmp4_;
		gint _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		GIcon* _tmp8_;
		GIcon* _tmp9_;
		Byte* _tmp10_;
		Byte* _tmp11_;
		Byte* _tmp12_;
		Byte* _tmp13_;
		const gchar* _tmp14_;
		const gchar* _tmp15_;
		_tmp0_ = track->title;
		_tmp1_ = g_notification_new (_tmp0_);
		notification = _tmp1_;
		_tmp2_ = track->artist_name;
		g_notification_set_body (notification, _tmp2_);
		_tmp4_ = byte_utils;
		_tmp5_ = track->id;
		_tmp6_ = utils_get_cover_file (_tmp4_, _tmp5_);
		_tmp7_ = _tmp6_;
		_tmp8_ = g_icon_new_for_string (_tmp7_, &_inner_error_);
		_tmp9_ = _tmp8_;
		_g_free0 (_tmp7_);
		_tmp3_ = _tmp9_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_object_unref0 (notification);
			goto __catch19_g_error;
		}
		g_notification_set_icon (notification, _tmp3_);
		g_notification_set_priority (notification, G_NOTIFICATION_PRIORITY_LOW);
		_tmp10_ = byte_get_instance ();
		_tmp11_ = _tmp10_;
		_tmp12_ = byte_get_instance ();
		_tmp13_ = _tmp12_;
		_tmp14_ = g_application_get_application_id ((GApplication*) _tmp13_);
		_tmp15_ = _tmp14_;
		g_application_send_notification ((GApplication*) _tmp11_, _tmp15_, notification);
		_g_object_unref0 (_tmp3_);
		_g_object_unref0 (notification);
	}
	goto __finally19;
	__catch19_g_error:
	{
		GError* e = NULL;
		FILE* _tmp16_;
		GError* _tmp17_;
		const gchar* _tmp18_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp16_ = stderr;
		_tmp17_ = e;
		_tmp18_ = _tmp17_->message;
		fprintf (_tmp16_, "Error setting default avatar icon: %s ", _tmp18_);
		_g_error_free0 (e);
	}
	__finally19:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


void
services_notification_send_notification (ServicesNotification* self,
                                         const gchar* title,
                                         const gchar* body)
{
	GNotification* notification = NULL;
	GNotification* _tmp0_;
	Byte* _tmp1_;
	Byte* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	GThemedIcon* _tmp5_;
	GThemedIcon* _tmp6_;
	Byte* _tmp7_;
	Byte* _tmp8_;
	Byte* _tmp9_;
	Byte* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (title != NULL);
	g_return_if_fail (body != NULL);
	_tmp0_ = g_notification_new (title);
	notification = _tmp0_;
	g_notification_set_body (notification, body);
	_tmp1_ = byte_get_instance ();
	_tmp2_ = _tmp1_;
	_tmp3_ = g_application_get_application_id ((GApplication*) _tmp2_);
	_tmp4_ = _tmp3_;
	_tmp5_ = (GThemedIcon*) g_themed_icon_new (_tmp4_);
	_tmp6_ = _tmp5_;
	g_notification_set_icon (notification, (GIcon*) _tmp6_);
	_g_object_unref0 (_tmp6_);
	g_notification_set_priority (notification, G_NOTIFICATION_PRIORITY_NORMAL);
	_tmp7_ = byte_get_instance ();
	_tmp8_ = _tmp7_;
	_tmp9_ = byte_get_instance ();
	_tmp10_ = _tmp9_;
	_tmp11_ = g_application_get_application_id ((GApplication*) _tmp10_);
	_tmp12_ = _tmp11_;
	g_application_send_notification ((GApplication*) _tmp8_, _tmp12_, notification);
	_g_object_unref0 (notification);
}


void
services_notification_send_radio_notification (ServicesNotification* self,
                                               const gchar* title)
{
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (title != NULL);
	{
		if (title != NULL) {
			gchar** media = NULL;
			gchar** _tmp0_;
			gchar** _tmp1_;
			gint media_length1;
			gint _media_size_;
			gchar* artist = NULL;
			gchar* _tmp2_;
			gchar* track = NULL;
			gchar* _tmp3_;
			gboolean _tmp4_ = FALSE;
			gchar** _tmp5_;
			gint _tmp5__length1;
			const gchar* _tmp6_;
			_tmp1_ = _tmp0_ = g_strsplit (title, " - ", 0);
			media = _tmp1_;
			media_length1 = _vala_array_length (_tmp0_);
			_media_size_ = media_length1;
			_tmp2_ = g_strdup ("");
			artist = _tmp2_;
			_tmp3_ = g_strdup ("");
			track = _tmp3_;
			_tmp5_ = media;
			_tmp5__length1 = media_length1;
			_tmp6_ = _tmp5_[0];
			if (_tmp6_ != NULL) {
				gchar** _tmp7_;
				gint _tmp7__length1;
				const gchar* _tmp8_;
				_tmp7_ = media;
				_tmp7__length1 = media_length1;
				_tmp8_ = _tmp7_[1];
				_tmp4_ = _tmp8_ != NULL;
			} else {
				_tmp4_ = FALSE;
			}
			if (_tmp4_) {
				gchar** _tmp9_;
				gint _tmp9__length1;
				const gchar* _tmp10_;
				gchar* _tmp11_;
				gchar** _tmp12_;
				gint _tmp12__length1;
				const gchar* _tmp13_;
				gchar* _tmp14_;
				GNotification* notification = NULL;
				ServicesPlayer* _tmp15_;
				ObjectsRadio* _tmp16_;
				ObjectsRadio* _tmp17_;
				const gchar* _tmp18_;
				const gchar* _tmp19_;
				GNotification* _tmp20_;
				GNotification* _tmp21_;
				const gchar* _tmp22_;
				const gchar* _tmp23_;
				gchar* _tmp24_;
				gchar* _tmp25_;
				GIcon* _tmp26_ = NULL;
				Utils* _tmp27_;
				ServicesPlayer* _tmp28_;
				ObjectsRadio* _tmp29_;
				ObjectsRadio* _tmp30_;
				gint _tmp31_;
				gint _tmp32_;
				gchar* _tmp33_;
				gchar* _tmp34_;
				GIcon* _tmp35_;
				GIcon* _tmp36_;
				GNotification* _tmp37_;
				GNotification* _tmp38_;
				Byte* _tmp39_;
				Byte* _tmp40_;
				Byte* _tmp41_;
				Byte* _tmp42_;
				const gchar* _tmp43_;
				const gchar* _tmp44_;
				GNotification* _tmp45_;
				_tmp9_ = media;
				_tmp9__length1 = media_length1;
				_tmp10_ = _tmp9_[0];
				_tmp11_ = g_strdup (_tmp10_);
				_g_free0 (artist);
				artist = _tmp11_;
				_tmp12_ = media;
				_tmp12__length1 = media_length1;
				_tmp13_ = _tmp12_[1];
				_tmp14_ = g_strdup (_tmp13_);
				_g_free0 (track);
				track = _tmp14_;
				_tmp15_ = byte_player;
				_tmp16_ = services_player_get_current_radio (_tmp15_);
				_tmp17_ = _tmp16_;
				_tmp18_ = objects_radio_get_name (_tmp17_);
				_tmp19_ = _tmp18_;
				_tmp20_ = g_notification_new (_tmp19_);
				notification = _tmp20_;
				_tmp21_ = notification;
				_tmp22_ = artist;
				_tmp23_ = track;
				_tmp24_ = g_strdup_printf ("%s - %s", _tmp22_, _tmp23_);
				_tmp25_ = _tmp24_;
				g_notification_set_body (_tmp21_, _tmp25_);
				_g_free0 (_tmp25_);
				_tmp27_ = byte_utils;
				_tmp28_ = byte_player;
				_tmp29_ = services_player_get_current_radio (_tmp28_);
				_tmp30_ = _tmp29_;
				_tmp31_ = objects_radio_get_id (_tmp30_);
				_tmp32_ = _tmp31_;
				_tmp33_ = utils_get_cover_radio_file (_tmp27_, _tmp32_);
				_tmp34_ = _tmp33_;
				_tmp35_ = g_icon_new_for_string (_tmp34_, &_inner_error_);
				_tmp36_ = _tmp35_;
				_g_free0 (_tmp34_);
				_tmp26_ = _tmp36_;
				if (G_UNLIKELY (_inner_error_ != NULL)) {
					_g_object_unref0 (notification);
					_g_free0 (track);
					_g_free0 (artist);
					media = (_vala_array_free (media, media_length1, (GDestroyNotify) g_free), NULL);
					goto __catch20_g_error;
				}
				_tmp37_ = notification;
				g_notification_set_icon (_tmp37_, _tmp26_);
				_tmp38_ = notification;
				g_notification_set_priority (_tmp38_, G_NOTIFICATION_PRIORITY_LOW);
				_tmp39_ = byte_get_instance ();
				_tmp40_ = _tmp39_;
				_tmp41_ = byte_get_instance ();
				_tmp42_ = _tmp41_;
				_tmp43_ = g_application_get_application_id ((GApplication*) _tmp42_);
				_tmp44_ = _tmp43_;
				_tmp45_ = notification;
				g_application_send_notification ((GApplication*) _tmp40_, _tmp44_, _tmp45_);
				_g_object_unref0 (_tmp26_);
				_g_object_unref0 (notification);
			}
			_g_free0 (track);
			_g_free0 (artist);
			media = (_vala_array_free (media, media_length1, (GDestroyNotify) g_free), NULL);
		}
	}
	goto __finally20;
	__catch20_g_error:
	{
		GError* e = NULL;
		FILE* _tmp46_;
		GError* _tmp47_;
		const gchar* _tmp48_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp46_ = stderr;
		_tmp47_ = e;
		_tmp48_ = _tmp47_->message;
		fprintf (_tmp46_, "Error setting default avatar icon: %s ", _tmp48_);
		_g_error_free0 (e);
	}
	__finally20:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static void
services_notification_class_init (ServicesNotificationClass * klass)
{
	services_notification_parent_class = g_type_class_peek_parent (klass);
}


static void
services_notification_instance_init (ServicesNotification * self)
{
}


GType
services_notification_get_type (void)
{
	static volatile gsize services_notification_type_id__volatile = 0;
	if (g_once_init_enter (&services_notification_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ServicesNotificationClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) services_notification_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ServicesNotification), 0, (GInstanceInitFunc) services_notification_instance_init, NULL };
		GType services_notification_type_id;
		services_notification_type_id = g_type_register_static (G_TYPE_OBJECT, "ServicesNotification", &g_define_type_info, 0);
		g_once_init_leave (&services_notification_type_id__volatile, services_notification_type_id);
	}
	return services_notification_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



