/* Track.c generated by valac 0.40.11, the Vala compiler
 * generated from Track.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>


#define OBJECTS_TYPE_TRACK (objects_track_get_type ())
#define OBJECTS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TRACK, ObjectsTrack))
#define OBJECTS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TRACK, ObjectsTrackClass))
#define OBJECTS_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TRACK))
#define OBJECTS_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TRACK))
#define OBJECTS_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TRACK, ObjectsTrackClass))

typedef struct _ObjectsTrack ObjectsTrack;
typedef struct _ObjectsTrackClass ObjectsTrackClass;
typedef struct _ObjectsTrackPrivate ObjectsTrackPrivate;
enum  {
	OBJECTS_TRACK_0_PROPERTY,
	OBJECTS_TRACK_NUM_PROPERTIES
};
static GParamSpec* objects_track_properties[OBJECTS_TRACK_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

struct _ObjectsTrack {
	GObject parent_instance;
	ObjectsTrackPrivate * priv;
	gint track_order;
	gint id;
	gint album_id;
	gint track;
	gint disc;
	gint play_count;
	gint is_favorite;
	gint bitrate;
	gint bpm;
	gint rating;
	gint samplerate;
	gint channels;
	gint year;
	gint playlist;
	guint64 duration;
	gchar* path;
	gchar* title;
	gchar* favorite_added;
	gchar* last_played;
	gchar* album_title;
	gchar* artist_name;
	gchar* composer;
	gchar* grouping;
	gchar* comment;
	gchar* lyrics;
	gchar* genre;
	gchar* album_artist;
	gchar* date_added;
};

struct _ObjectsTrackClass {
	GObjectClass parent_class;
};


static gpointer objects_track_parent_class = NULL;

GType objects_track_get_type (void) G_GNUC_CONST;
ObjectsTrack* objects_track_new (gint track_order,
                                 gint id,
                                 gint album_id,
                                 gint track,
                                 gint disc,
                                 gint play_count,
                                 gint is_favorite,
                                 gint bitrate,
                                 gint bpm,
                                 gint rating,
                                 gint samplerate,
                                 gint channels,
                                 gint year,
                                 gint playlist,
                                 guint64 duration,
                                 const gchar* path,
                                 const gchar* title,
                                 const gchar* favorite_added,
                                 const gchar* last_played,
                                 const gchar* album_title,
                                 const gchar* artist_name,
                                 const gchar* composer,
                                 const gchar* grouping,
                                 const gchar* comment,
                                 const gchar* lyrics,
                                 const gchar* genre,
                                 const gchar* album_artist,
                                 const gchar* date_added);
ObjectsTrack* objects_track_construct (GType object_type,
                                       gint track_order,
                                       gint id,
                                       gint album_id,
                                       gint track,
                                       gint disc,
                                       gint play_count,
                                       gint is_favorite,
                                       gint bitrate,
                                       gint bpm,
                                       gint rating,
                                       gint samplerate,
                                       gint channels,
                                       gint year,
                                       gint playlist,
                                       guint64 duration,
                                       const gchar* path,
                                       const gchar* title,
                                       const gchar* favorite_added,
                                       const gchar* last_played,
                                       const gchar* album_title,
                                       const gchar* artist_name,
                                       const gchar* composer,
                                       const gchar* grouping,
                                       const gchar* comment,
                                       const gchar* lyrics,
                                       const gchar* genre,
                                       const gchar* album_artist,
                                       const gchar* date_added);
static void objects_track_finalize (GObject * obj);


ObjectsTrack*
objects_track_construct (GType object_type,
                         gint track_order,
                         gint id,
                         gint album_id,
                         gint track,
                         gint disc,
                         gint play_count,
                         gint is_favorite,
                         gint bitrate,
                         gint bpm,
                         gint rating,
                         gint samplerate,
                         gint channels,
                         gint year,
                         gint playlist,
                         guint64 duration,
                         const gchar* path,
                         const gchar* title,
                         const gchar* favorite_added,
                         const gchar* last_played,
                         const gchar* album_title,
                         const gchar* artist_name,
                         const gchar* composer,
                         const gchar* grouping,
                         const gchar* comment,
                         const gchar* lyrics,
                         const gchar* genre,
                         const gchar* album_artist,
                         const gchar* date_added)
{
	ObjectsTrack * self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	g_return_val_if_fail (path != NULL, NULL);
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (favorite_added != NULL, NULL);
	g_return_val_if_fail (last_played != NULL, NULL);
	g_return_val_if_fail (album_title != NULL, NULL);
	g_return_val_if_fail (artist_name != NULL, NULL);
	g_return_val_if_fail (composer != NULL, NULL);
	g_return_val_if_fail (grouping != NULL, NULL);
	g_return_val_if_fail (comment != NULL, NULL);
	g_return_val_if_fail (lyrics != NULL, NULL);
	g_return_val_if_fail (genre != NULL, NULL);
	g_return_val_if_fail (album_artist != NULL, NULL);
	g_return_val_if_fail (date_added != NULL, NULL);
	self = (ObjectsTrack*) g_object_new (object_type, NULL);
	self->track_order = track_order;
	self->id = id;
	self->album_id = album_id;
	self->track = track;
	self->disc = disc;
	self->play_count = play_count;
	self->is_favorite = is_favorite;
	self->bitrate = bitrate;
	self->bpm = bpm;
	self->rating = rating;
	self->samplerate = samplerate;
	self->channels = channels;
	self->year = year;
	self->duration = duration;
	_tmp0_ = g_strdup (path);
	_g_free0 (self->path);
	self->path = _tmp0_;
	_tmp1_ = g_strdup (title);
	_g_free0 (self->title);
	self->title = _tmp1_;
	_tmp2_ = g_strdup (favorite_added);
	_g_free0 (self->favorite_added);
	self->favorite_added = _tmp2_;
	_tmp3_ = g_strdup (last_played);
	_g_free0 (self->last_played);
	self->last_played = _tmp3_;
	_tmp4_ = g_strdup (album_title);
	_g_free0 (self->album_title);
	self->album_title = _tmp4_;
	_tmp5_ = g_strdup (artist_name);
	_g_free0 (self->artist_name);
	self->artist_name = _tmp5_;
	_tmp6_ = g_strdup (composer);
	_g_free0 (self->composer);
	self->composer = _tmp6_;
	_tmp7_ = g_strdup (grouping);
	_g_free0 (self->grouping);
	self->grouping = _tmp7_;
	_tmp8_ = g_strdup (comment);
	_g_free0 (self->comment);
	self->comment = _tmp8_;
	_tmp9_ = g_strdup (lyrics);
	_g_free0 (self->lyrics);
	self->lyrics = _tmp9_;
	_tmp10_ = g_strdup (genre);
	_g_free0 (self->genre);
	self->genre = _tmp10_;
	_tmp11_ = g_strdup (album_artist);
	_g_free0 (self->album_artist);
	self->album_artist = _tmp11_;
	_tmp12_ = g_strdup (date_added);
	_g_free0 (self->date_added);
	self->date_added = _tmp12_;
	return self;
}


ObjectsTrack*
objects_track_new (gint track_order,
                   gint id,
                   gint album_id,
                   gint track,
                   gint disc,
                   gint play_count,
                   gint is_favorite,
                   gint bitrate,
                   gint bpm,
                   gint rating,
                   gint samplerate,
                   gint channels,
                   gint year,
                   gint playlist,
                   guint64 duration,
                   const gchar* path,
                   const gchar* title,
                   const gchar* favorite_added,
                   const gchar* last_played,
                   const gchar* album_title,
                   const gchar* artist_name,
                   const gchar* composer,
                   const gchar* grouping,
                   const gchar* comment,
                   const gchar* lyrics,
                   const gchar* genre,
                   const gchar* album_artist,
                   const gchar* date_added)
{
	return objects_track_construct (OBJECTS_TYPE_TRACK, track_order, id, album_id, track, disc, play_count, is_favorite, bitrate, bpm, rating, samplerate, channels, year, playlist, duration, path, title, favorite_added, last_played, album_title, artist_name, composer, grouping, comment, lyrics, genre, album_artist, date_added);
}


static void
objects_track_class_init (ObjectsTrackClass * klass)
{
	objects_track_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = objects_track_finalize;
}


static void
objects_track_instance_init (ObjectsTrack * self)
{
}


static void
objects_track_finalize (GObject * obj)
{
	ObjectsTrack * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_TRACK, ObjectsTrack);
	_g_free0 (self->path);
	_g_free0 (self->title);
	_g_free0 (self->favorite_added);
	_g_free0 (self->last_played);
	_g_free0 (self->album_title);
	_g_free0 (self->artist_name);
	_g_free0 (self->composer);
	_g_free0 (self->grouping);
	_g_free0 (self->comment);
	_g_free0 (self->lyrics);
	_g_free0 (self->genre);
	_g_free0 (self->album_artist);
	_g_free0 (self->date_added);
	G_OBJECT_CLASS (objects_track_parent_class)->finalize (obj);
}


GType
objects_track_get_type (void)
{
	static volatile gsize objects_track_type_id__volatile = 0;
	if (g_once_init_enter (&objects_track_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ObjectsTrackClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_track_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsTrack), 0, (GInstanceInitFunc) objects_track_instance_init, NULL };
		GType objects_track_type_id;
		objects_track_type_id = g_type_register_static (G_TYPE_OBJECT, "ObjectsTrack", &g_define_type_info, 0);
		g_once_init_leave (&objects_track_type_id__volatile, objects_track_type_id);
	}
	return objects_track_type_id__volatile;
}



