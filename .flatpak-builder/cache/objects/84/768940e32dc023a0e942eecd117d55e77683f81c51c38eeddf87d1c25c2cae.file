/* ArtistRow.c generated by valac 0.40.11, the Vala compiler
 * generated from ArtistRow.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <pango/pango.h>
#include <gdk/gdk.h>


#define WIDGETS_TYPE_ARTIST_ROW (widgets_artist_row_get_type ())
#define WIDGETS_ARTIST_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRow))
#define WIDGETS_ARTIST_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRowClass))
#define WIDGETS_IS_ARTIST_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ARTIST_ROW))
#define WIDGETS_IS_ARTIST_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ARTIST_ROW))
#define WIDGETS_ARTIST_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRowClass))

typedef struct _WidgetsArtistRow WidgetsArtistRow;
typedef struct _WidgetsArtistRowClass WidgetsArtistRowClass;
typedef struct _WidgetsArtistRowPrivate WidgetsArtistRowPrivate;

#define OBJECTS_TYPE_ARTIST (objects_artist_get_type ())
#define OBJECTS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ARTIST, ObjectsArtist))
#define OBJECTS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ARTIST, ObjectsArtistClass))
#define OBJECTS_IS_ARTIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ARTIST))
#define OBJECTS_IS_ARTIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ARTIST))
#define OBJECTS_ARTIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ARTIST, ObjectsArtistClass))

typedef struct _ObjectsArtist ObjectsArtist;
typedef struct _ObjectsArtistClass ObjectsArtistClass;

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;
enum  {
	WIDGETS_ARTIST_ROW_0_PROPERTY,
	WIDGETS_ARTIST_ROW_ARTIST_PROPERTY,
	WIDGETS_ARTIST_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_artist_row_properties[WIDGETS_ARTIST_ROW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ObjectsArtistPrivate ObjectsArtistPrivate;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;

struct _WidgetsArtistRow {
	GtkListBoxRow parent_instance;
	WidgetsArtistRowPrivate * priv;
};

struct _WidgetsArtistRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsArtistRowPrivate {
	ObjectsArtist* _artist;
	GtkLabel* name_label;
	WidgetsCover* image_cover;
	gchar* cover_path;
};

struct _ObjectsArtist {
	GObject parent_instance;
	ObjectsArtistPrivate * priv;
	gint id;
	gchar* name;
};

struct _ObjectsArtistClass {
	GObjectClass parent_class;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};


static gpointer widgets_artist_row_parent_class = NULL;
extern Utils* byte_utils;

GType widgets_artist_row_get_type (void) G_GNUC_CONST;
GType objects_artist_get_type (void) G_GNUC_CONST;
GType widgets_cover_get_type (void) G_GNUC_CONST;
#define WIDGETS_ARTIST_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRowPrivate))
WidgetsArtistRow* widgets_artist_row_new (ObjectsArtist* artist);
WidgetsArtistRow* widgets_artist_row_construct (GType object_type,
                                                ObjectsArtist* artist);
ObjectsArtist* widgets_artist_row_get_artist (WidgetsArtistRow* self);
static void widgets_artist_row_set_artist (WidgetsArtistRow* self,
                                    ObjectsArtist* value);
static GObject * widgets_artist_row_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
GType utils_get_type (void) G_GNUC_CONST;
WidgetsCover* widgets_cover_new_from_file (const gchar* filepath,
                                           gint pixel_size,
                                           const gchar* type);
WidgetsCover* widgets_cover_construct_from_file (GType object_type,
                                                 const gchar* filepath,
                                                 gint pixel_size,
                                                 const gchar* type);
static void widgets_artist_row_finalize (GObject * obj);
static void _vala_widgets_artist_row_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_widgets_artist_row_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);


WidgetsArtistRow*
widgets_artist_row_construct (GType object_type,
                              ObjectsArtist* artist)
{
	WidgetsArtistRow * self = NULL;
	g_return_val_if_fail (artist != NULL, NULL);
	self = (WidgetsArtistRow*) g_object_new (object_type, "artist", artist, NULL);
	return self;
}


WidgetsArtistRow*
widgets_artist_row_new (ObjectsArtist* artist)
{
	return widgets_artist_row_construct (WIDGETS_TYPE_ARTIST_ROW, artist);
}


ObjectsArtist*
widgets_artist_row_get_artist (WidgetsArtistRow* self)
{
	ObjectsArtist* result;
	ObjectsArtist* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_artist;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
widgets_artist_row_set_artist (WidgetsArtistRow* self,
                               ObjectsArtist* value)
{
	g_return_if_fail (self != NULL);
	if (widgets_artist_row_get_artist (self) != value) {
		ObjectsArtist* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_artist);
		self->priv->_artist = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, widgets_artist_row_properties[WIDGETS_ARTIST_ROW_ARTIST_PROPERTY]);
	}
}


static GObject *
widgets_artist_row_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsArtistRow * self;
	GtkStyleContext* _tmp0_;
	ObjectsArtist* _tmp1_;
	const gchar* _tmp2_;
	GtkLabel* _tmp3_;
	GtkLabel* _tmp4_;
	GtkLabel* _tmp5_;
	GtkStyleContext* _tmp6_;
	GtkLabel* _tmp7_;
	Utils* _tmp8_;
	const gchar* _tmp9_;
	ObjectsArtist* _tmp10_;
	gint _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	const gchar* _tmp15_;
	WidgetsCover* _tmp16_;
	WidgetsCover* _tmp17_;
	WidgetsCover* _tmp18_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp19_;
	GtkGrid* _tmp20_;
	GtkGrid* _tmp21_;
	GtkGrid* _tmp22_;
	GtkGrid* _tmp23_;
	GtkGrid* _tmp24_;
	WidgetsCover* _tmp25_;
	GtkGrid* _tmp26_;
	GtkLabel* _tmp27_;
	GtkEventBox* event_box = NULL;
	GtkEventBox* _tmp28_;
	GtkEventBox* _tmp29_;
	GtkEventBox* _tmp30_;
	GtkGrid* _tmp31_;
	GtkEventBox* _tmp32_;
	parent_class = G_OBJECT_CLASS (widgets_artist_row_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRow);
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp0_, "album-row");
	_tmp1_ = self->priv->_artist;
	_tmp2_ = _tmp1_->name;
	_tmp3_ = (GtkLabel*) gtk_label_new (_tmp2_);
	g_object_ref_sink (_tmp3_);
	_g_object_unref0 (self->priv->name_label);
	self->priv->name_label = _tmp3_;
	_tmp4_ = self->priv->name_label;
	gtk_widget_set_valign ((GtkWidget*) _tmp4_, GTK_ALIGN_CENTER);
	_tmp5_ = self->priv->name_label;
	_tmp6_ = gtk_widget_get_style_context ((GtkWidget*) _tmp5_);
	gtk_style_context_add_class (_tmp6_, "h3");
	_tmp7_ = self->priv->name_label;
	gtk_label_set_ellipsize (_tmp7_, PANGO_ELLIPSIZE_END);
	_tmp8_ = byte_utils;
	_tmp9_ = _tmp8_->COVER_FOLDER;
	_tmp10_ = self->priv->_artist;
	_tmp11_ = _tmp10_->id;
	_tmp12_ = g_strdup_printf ("artist-%i.jpg", _tmp11_);
	_tmp13_ = _tmp12_;
	_tmp14_ = g_build_filename (_tmp9_, _tmp13_, NULL);
	_g_free0 (self->priv->cover_path);
	self->priv->cover_path = _tmp14_;
	_g_free0 (_tmp13_);
	_tmp15_ = self->priv->cover_path;
	_tmp16_ = widgets_cover_new_from_file (_tmp15_, 48, "artist");
	g_object_ref_sink (_tmp16_);
	_g_object_unref0 (self->priv->image_cover);
	self->priv->image_cover = _tmp16_;
	_tmp17_ = self->priv->image_cover;
	gtk_widget_set_halign ((GtkWidget*) _tmp17_, GTK_ALIGN_START);
	_tmp18_ = self->priv->image_cover;
	gtk_widget_set_valign ((GtkWidget*) _tmp18_, GTK_ALIGN_START);
	_tmp19_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp19_);
	main_grid = _tmp19_;
	_tmp20_ = main_grid;
	g_object_set ((GtkWidget*) _tmp20_, "margin", 3, NULL);
	_tmp21_ = main_grid;
	gtk_grid_set_column_spacing (_tmp21_, 6);
	_tmp22_ = main_grid;
	gtk_widget_set_halign ((GtkWidget*) _tmp22_, GTK_ALIGN_START);
	_tmp23_ = main_grid;
	gtk_widget_set_valign ((GtkWidget*) _tmp23_, GTK_ALIGN_START);
	_tmp24_ = main_grid;
	_tmp25_ = self->priv->image_cover;
	gtk_container_add ((GtkContainer*) _tmp24_, (GtkWidget*) _tmp25_);
	_tmp26_ = main_grid;
	_tmp27_ = self->priv->name_label;
	gtk_container_add ((GtkContainer*) _tmp26_, (GtkWidget*) _tmp27_);
	_tmp28_ = (GtkEventBox*) gtk_event_box_new ();
	g_object_ref_sink (_tmp28_);
	event_box = _tmp28_;
	_tmp29_ = event_box;
	gtk_widget_add_events ((GtkWidget*) _tmp29_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
	_tmp30_ = event_box;
	_tmp31_ = main_grid;
	gtk_container_add ((GtkContainer*) _tmp30_, (GtkWidget*) _tmp31_);
	_tmp32_ = event_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp32_);
	_g_object_unref0 (event_box);
	_g_object_unref0 (main_grid);
	return obj;
}


static void
widgets_artist_row_class_init (WidgetsArtistRowClass * klass)
{
	widgets_artist_row_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsArtistRowPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_artist_row_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_artist_row_set_property;
	G_OBJECT_CLASS (klass)->constructor = widgets_artist_row_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_artist_row_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ARTIST_ROW_ARTIST_PROPERTY, widgets_artist_row_properties[WIDGETS_ARTIST_ROW_ARTIST_PROPERTY] = g_param_spec_object ("artist", "artist", "artist", OBJECTS_TYPE_ARTIST, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
}


static void
widgets_artist_row_instance_init (WidgetsArtistRow * self)
{
	self->priv = WIDGETS_ARTIST_ROW_GET_PRIVATE (self);
}


static void
widgets_artist_row_finalize (GObject * obj)
{
	WidgetsArtistRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRow);
	_g_object_unref0 (self->priv->_artist);
	_g_object_unref0 (self->priv->name_label);
	_g_object_unref0 (self->priv->image_cover);
	_g_free0 (self->priv->cover_path);
	G_OBJECT_CLASS (widgets_artist_row_parent_class)->finalize (obj);
}


GType
widgets_artist_row_get_type (void)
{
	static volatile gsize widgets_artist_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_artist_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsArtistRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_artist_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsArtistRow), 0, (GInstanceInitFunc) widgets_artist_row_instance_init, NULL };
		GType widgets_artist_row_type_id;
		widgets_artist_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsArtistRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_artist_row_type_id__volatile, widgets_artist_row_type_id);
	}
	return widgets_artist_row_type_id__volatile;
}


static void
_vala_widgets_artist_row_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	WidgetsArtistRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRow);
	switch (property_id) {
		case WIDGETS_ARTIST_ROW_ARTIST_PROPERTY:
		g_value_set_object (value, widgets_artist_row_get_artist (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_widgets_artist_row_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	WidgetsArtistRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ARTIST_ROW, WidgetsArtistRow);
	switch (property_id) {
		case WIDGETS_ARTIST_ROW_ARTIST_PROPERTY:
		widgets_artist_row_set_artist (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



