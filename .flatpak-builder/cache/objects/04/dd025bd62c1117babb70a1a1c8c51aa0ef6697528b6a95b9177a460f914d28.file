/* NewPlaylist.c generated by valac 0.40.11, the Vala compiler
 * generated from NewPlaylist.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>
#include <gdk/gdk.h>


#define WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST (widgets_popovers_new_playlist_get_type ())
#define WIDGETS_POPOVERS_NEW_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST, WidgetsPopoversNewPlaylist))
#define WIDGETS_POPOVERS_NEW_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST, WidgetsPopoversNewPlaylistClass))
#define WIDGETS_POPOVERS_IS_NEW_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST))
#define WIDGETS_POPOVERS_IS_NEW_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST))
#define WIDGETS_POPOVERS_NEW_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST, WidgetsPopoversNewPlaylistClass))

typedef struct _WidgetsPopoversNewPlaylist WidgetsPopoversNewPlaylist;
typedef struct _WidgetsPopoversNewPlaylistClass WidgetsPopoversNewPlaylistClass;
typedef struct _WidgetsPopoversNewPlaylistPrivate WidgetsPopoversNewPlaylistPrivate;

#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;
enum  {
	WIDGETS_POPOVERS_NEW_PLAYLIST_0_PROPERTY,
	WIDGETS_POPOVERS_NEW_PLAYLIST_NUM_PROPERTIES
};
static GParamSpec* widgets_popovers_new_playlist_properties[WIDGETS_POPOVERS_NEW_PLAYLIST_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define OBJECTS_TYPE_PLAYLIST (objects_playlist_get_type ())
#define OBJECTS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylist))
#define OBJECTS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))
#define OBJECTS_IS_PLAYLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_IS_PLAYLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PLAYLIST))
#define OBJECTS_PLAYLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PLAYLIST, ObjectsPlaylistClass))

typedef struct _ObjectsPlaylist ObjectsPlaylist;
typedef struct _ObjectsPlaylistClass ObjectsPlaylistClass;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
typedef struct _ObjectsPlaylistPrivate ObjectsPlaylistPrivate;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _Block39Data Block39Data;

struct _WidgetsPopoversNewPlaylist {
	GtkPopover parent_instance;
	WidgetsPopoversNewPlaylistPrivate * priv;
	GtkEntry* title_entry;
};

struct _WidgetsPopoversNewPlaylistClass {
	GtkPopoverClass parent_class;
};

struct _WidgetsPopoversNewPlaylistPrivate {
	GtkTextView* note_text;
	WidgetsCover* image_cover;
	gchar* cover_path;
};

struct _ObjectsPlaylist {
	GObject parent_instance;
	ObjectsPlaylistPrivate * priv;
	gint id;
	gchar* title;
	gchar* note;
	gchar* date_added;
	gchar* date_updated;
	gint num_tracks;
};

struct _ObjectsPlaylistClass {
	GObjectClass parent_class;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* MAIN_FOLDER;
	gchar* COVER_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};

struct _Block39Data {
	int _ref_count_;
	WidgetsPopoversNewPlaylist* self;
	GtkLabel* note_placeholder;
};


static gpointer widgets_popovers_new_playlist_parent_class = NULL;
extern ServicesDatabase* byte_database;
extern Utils* byte_utils;

GType widgets_popovers_new_playlist_get_type (void) G_GNUC_CONST;
GType widgets_cover_get_type (void) G_GNUC_CONST;
#define WIDGETS_POPOVERS_NEW_PLAYLIST_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST, WidgetsPopoversNewPlaylistPrivate))
WidgetsPopoversNewPlaylist* widgets_popovers_new_playlist_new (GtkWidget* relative);
WidgetsPopoversNewPlaylist* widgets_popovers_new_playlist_construct (GType object_type,
                                                                     GtkWidget* relative);
static void widgets_popovers_new_playlist_add_playlist (WidgetsPopoversNewPlaylist* self);
GType objects_playlist_get_type (void) G_GNUC_CONST;
ObjectsPlaylist* objects_playlist_new (gint id,
                                       const gchar* title,
                                       const gchar* note,
                                       const gchar* date_added,
                                       const gchar* date_updated,
                                       gint num_tracks);
ObjectsPlaylist* objects_playlist_construct (GType object_type,
                                             gint id,
                                             const gchar* title,
                                             const gchar* note,
                                             const gchar* date_added,
                                             const gchar* date_updated,
                                             gint num_tracks);
GType services_database_get_type (void) G_GNUC_CONST;
gint services_database_insert_playlist (ServicesDatabase* self,
                                        ObjectsPlaylist* playlist);
GType utils_get_type (void) G_GNUC_CONST;
GdkPixbuf* utils_align_and_scale_pixbuf (Utils* self,
                                         GdkPixbuf* p,
                                         gint size);
void widgets_cover_set_with_default_icon (WidgetsCover* self,
                                          gint pixel_size,
                                          const gchar* type);
static GObject * widgets_popovers_new_playlist_constructor (GType type,
                                                     guint n_construct_properties,
                                                     GObjectConstructParam * construct_properties);
static Block39Data* block39_data_ref (Block39Data* _data39_);
static void block39_data_unref (void * _userdata_);
WidgetsCover* widgets_cover_new_with_default_icon (gint pixel_size,
                                                   const gchar* type);
WidgetsCover* widgets_cover_construct_with_default_icon (GType object_type,
                                                         gint pixel_size,
                                                         const gchar* type);
static void _widgets_popovers_new_playlist_add_playlist_gtk_entry_activate (GtkEntry* _sender,
                                                                     gpointer self);
static void _widgets_popovers_new_playlist_add_playlist_gtk_button_clicked (GtkButton* _sender,
                                                                     gpointer self);
static void _widgets_popovers_new_playlist___lambda196_ (WidgetsPopoversNewPlaylist* self);
gchar* utils_choose_new_cover (Utils* self);
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
static void __widgets_popovers_new_playlist___lambda196__gtk_button_clicked (GtkButton* _sender,
                                                                      gpointer self);
static gboolean _widgets_popovers_new_playlist___lambda197_ (Block39Data* _data39_);
static gboolean __widgets_popovers_new_playlist___lambda197__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                                                 GdkEventFocus* event,
                                                                                 gpointer self);
static gboolean _widgets_popovers_new_playlist___lambda198_ (Block39Data* _data39_);
static gboolean __widgets_popovers_new_playlist___lambda198__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                                  GdkEventFocus* event,
                                                                                  gpointer self);
static void widgets_popovers_new_playlist_finalize (GObject * obj);


WidgetsPopoversNewPlaylist*
widgets_popovers_new_playlist_construct (GType object_type,
                                         GtkWidget* relative)
{
	WidgetsPopoversNewPlaylist * self = NULL;
	g_return_val_if_fail (relative != NULL, NULL);
	self = (WidgetsPopoversNewPlaylist*) g_object_new (object_type, "relative-to", relative, "modal", TRUE, "position", GTK_POS_BOTTOM, NULL);
	return self;
}


WidgetsPopoversNewPlaylist*
widgets_popovers_new_playlist_new (GtkWidget* relative)
{
	return widgets_popovers_new_playlist_construct (WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST, relative);
}


static gchar*
g_date_time_to_string (GDateTime* self)
{
	gchar* result = NULL;
	gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_date_time_format (self, "%FT%H:%M:%S%z");
	result = _tmp0_;
	return result;
}


static void
widgets_popovers_new_playlist_add_playlist (WidgetsPopoversNewPlaylist* self)
{
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->title_entry;
	_tmp1_ = gtk_entry_get_text (_tmp0_);
	_tmp2_ = _tmp1_;
	if (g_strcmp0 (_tmp2_, "") != 0) {
		ObjectsPlaylist* playlist = NULL;
		GDateTime* _tmp3_;
		GDateTime* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
		GDateTime* _tmp7_;
		GDateTime* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		ObjectsPlaylist* _tmp11_;
		ObjectsPlaylist* _tmp12_;
		ObjectsPlaylist* _tmp13_;
		GtkEntry* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
		gchar* _tmp17_;
		ObjectsPlaylist* _tmp18_;
		GtkTextView* _tmp19_;
		GtkTextBuffer* _tmp20_;
		GtkTextBuffer* _tmp21_;
		gchar* _tmp22_;
		gchar* _tmp23_;
		gint id = 0;
		ServicesDatabase* _tmp24_;
		ObjectsPlaylist* _tmp25_;
		gboolean _tmp26_ = FALSE;
		const gchar* _tmp27_;
		gchar* _tmp47_;
		GtkEntry* _tmp48_;
		GtkTextView* _tmp49_;
		GtkTextBuffer* _tmp50_;
		GtkTextBuffer* _tmp51_;
		WidgetsCover* _tmp52_;
		_tmp3_ = g_date_time_new_now_local ();
		_tmp4_ = _tmp3_;
		_tmp5_ = g_date_time_to_string (_tmp4_);
		_tmp6_ = _tmp5_;
		_tmp7_ = g_date_time_new_now_local ();
		_tmp8_ = _tmp7_;
		_tmp9_ = g_date_time_to_string (_tmp8_);
		_tmp10_ = _tmp9_;
		_tmp11_ = objects_playlist_new (0, "", "", _tmp6_, _tmp10_, 0);
		_tmp12_ = _tmp11_;
		_g_free0 (_tmp10_);
		_g_date_time_unref0 (_tmp8_);
		_g_free0 (_tmp6_);
		_g_date_time_unref0 (_tmp4_);
		playlist = _tmp12_;
		_tmp13_ = playlist;
		_tmp14_ = self->title_entry;
		_tmp15_ = gtk_entry_get_text (_tmp14_);
		_tmp16_ = _tmp15_;
		_tmp17_ = g_strdup (_tmp16_);
		_g_free0 (_tmp13_->title);
		_tmp13_->title = _tmp17_;
		_tmp18_ = playlist;
		_tmp19_ = self->priv->note_text;
		_tmp20_ = gtk_text_view_get_buffer (_tmp19_);
		_tmp21_ = _tmp20_;
		g_object_get (_tmp21_, "text", &_tmp22_, NULL);
		_tmp23_ = _tmp22_;
		_g_free0 (_tmp18_->note);
		_tmp18_->note = _tmp23_;
		_tmp24_ = byte_database;
		_tmp25_ = playlist;
		id = services_database_insert_playlist (_tmp24_, _tmp25_);
		_tmp27_ = self->priv->cover_path;
		if (_tmp27_ != NULL) {
			gint _tmp28_;
			_tmp28_ = id;
			_tmp26_ = _tmp28_ != 0;
		} else {
			_tmp26_ = FALSE;
		}
		if (_tmp26_) {
			{
				GdkPixbuf* _tmp29_ = NULL;
				const gchar* _tmp30_;
				GdkPixbuf* _tmp31_;
				GdkPixbuf* pixbuf = NULL;
				Utils* _tmp32_;
				GdkPixbuf* _tmp33_;
				gchar* file = NULL;
				Utils* _tmp34_;
				const gchar* _tmp35_;
				gint _tmp36_;
				gchar* _tmp37_;
				gchar* _tmp38_;
				gchar* _tmp39_;
				gchar* _tmp40_;
				_tmp30_ = self->priv->cover_path;
				_tmp31_ = gdk_pixbuf_new_from_file (_tmp30_, &_inner_error_);
				_tmp29_ = _tmp31_;
				if (G_UNLIKELY (_inner_error_ != NULL)) {
					goto __catch43_g_error;
				}
				_tmp32_ = byte_utils;
				_tmp33_ = utils_align_and_scale_pixbuf (_tmp32_, _tmp29_, 256);
				pixbuf = _tmp33_;
				_tmp34_ = byte_utils;
				_tmp35_ = _tmp34_->COVER_FOLDER;
				_tmp36_ = id;
				_tmp37_ = g_strdup_printf ("playlist-%i.jpg", _tmp36_);
				_tmp38_ = _tmp37_;
				_tmp39_ = g_build_filename (_tmp35_, _tmp38_, NULL);
				_tmp40_ = _tmp39_;
				_g_free0 (_tmp38_);
				file = _tmp40_;
				{
					GdkPixbuf* _tmp41_;
					const gchar* _tmp42_;
					_tmp41_ = pixbuf;
					_tmp42_ = file;
					gdk_pixbuf_save (_tmp41_, _tmp42_, "jpeg", &_inner_error_, "quality", "100", NULL);
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						goto __catch44_g_error;
					}
				}
				goto __finally44;
				__catch44_g_error:
				{
					GError* err = NULL;
					GError* _tmp43_;
					const gchar* _tmp44_;
					err = _inner_error_;
					_inner_error_ = NULL;
					_tmp43_ = err;
					_tmp44_ = _tmp43_->message;
					g_warning ("NewPlaylist.vala:131: %s", _tmp44_);
					_g_error_free0 (err);
				}
				__finally44:
				if (G_UNLIKELY (_inner_error_ != NULL)) {
					_g_free0 (file);
					_g_object_unref0 (pixbuf);
					_g_object_unref0 (_tmp29_);
					goto __catch43_g_error;
				}
				_g_free0 (file);
				_g_object_unref0 (pixbuf);
				_g_object_unref0 (_tmp29_);
			}
			goto __finally43;
			__catch43_g_error:
			{
				GError* err = NULL;
				GError* _tmp45_;
				const gchar* _tmp46_;
				err = _inner_error_;
				_inner_error_ = NULL;
				_tmp45_ = err;
				_tmp46_ = _tmp45_->message;
				g_warning ("NewPlaylist.vala:134: %s", _tmp46_);
				_g_error_free0 (err);
			}
			__finally43:
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				_g_object_unref0 (playlist);
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
				g_clear_error (&_inner_error_);
				return;
			}
		}
		_tmp47_ = g_strdup ("");
		_g_free0 (self->priv->cover_path);
		self->priv->cover_path = _tmp47_;
		_tmp48_ = self->title_entry;
		gtk_entry_set_text (_tmp48_, "");
		_tmp49_ = self->priv->note_text;
		_tmp50_ = gtk_text_view_get_buffer (_tmp49_);
		_tmp51_ = _tmp50_;
		g_object_set (_tmp51_, "text", "", NULL);
		_tmp52_ = self->priv->image_cover;
		widgets_cover_set_with_default_icon (_tmp52_, 64, "playlist");
		gtk_popover_popdown ((GtkPopover*) self);
		_g_object_unref0 (playlist);
	}
}


static Block39Data*
block39_data_ref (Block39Data* _data39_)
{
	g_atomic_int_inc (&_data39_->_ref_count_);
	return _data39_;
}


static void
block39_data_unref (void * _userdata_)
{
	Block39Data* _data39_;
	_data39_ = (Block39Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data39_->_ref_count_)) {
		WidgetsPopoversNewPlaylist* self;
		self = _data39_->self;
		_g_object_unref0 (_data39_->note_placeholder);
		_g_object_unref0 (self);
		g_slice_free (Block39Data, _data39_);
	}
}


static void
_widgets_popovers_new_playlist_add_playlist_gtk_entry_activate (GtkEntry* _sender,
                                                                gpointer self)
{
	widgets_popovers_new_playlist_add_playlist ((WidgetsPopoversNewPlaylist*) self);
}


static void
_widgets_popovers_new_playlist_add_playlist_gtk_button_clicked (GtkButton* _sender,
                                                                gpointer self)
{
	widgets_popovers_new_playlist_add_playlist ((WidgetsPopoversNewPlaylist*) self);
}


static void
_widgets_popovers_new_playlist___lambda196_ (WidgetsPopoversNewPlaylist* self)
{
	gchar* new_cover = NULL;
	Utils* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	GError * _inner_error_ = NULL;
	_tmp0_ = byte_utils;
	_tmp1_ = utils_choose_new_cover (_tmp0_);
	new_cover = _tmp1_;
	_tmp2_ = new_cover;
	if (_tmp2_ != NULL) {
		const gchar* _tmp3_;
		gchar* _tmp4_;
		_tmp3_ = new_cover;
		_tmp4_ = g_strdup (_tmp3_);
		_g_free0 (self->priv->cover_path);
		self->priv->cover_path = _tmp4_;
		{
			GdkPixbuf* _tmp5_ = NULL;
			const gchar* _tmp6_;
			GdkPixbuf* _tmp7_;
			GdkPixbuf* pixbuf = NULL;
			Utils* _tmp8_;
			GdkPixbuf* _tmp9_;
			WidgetsCover* _tmp10_;
			GdkPixbuf* _tmp11_;
			_tmp6_ = self->priv->cover_path;
			_tmp7_ = gdk_pixbuf_new_from_file (_tmp6_, &_inner_error_);
			_tmp5_ = _tmp7_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch45_g_error;
			}
			_tmp8_ = byte_utils;
			_tmp9_ = utils_align_and_scale_pixbuf (_tmp8_, _tmp5_, 64);
			pixbuf = _tmp9_;
			_tmp10_ = self->priv->image_cover;
			_tmp11_ = pixbuf;
			widgets_cover_set_pixbuf (_tmp10_, _tmp11_);
			_g_object_unref0 (pixbuf);
			_g_object_unref0 (_tmp5_);
		}
		goto __finally45;
		__catch45_g_error:
		{
			GError* err = NULL;
			GError* _tmp12_;
			const gchar* _tmp13_;
			err = _inner_error_;
			_inner_error_ = NULL;
			_tmp12_ = err;
			_tmp13_ = _tmp12_->message;
			g_warning ("NewPlaylist.vala:93: %s", _tmp13_);
			_g_error_free0 (err);
		}
		__finally45:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_free0 (new_cover);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	_g_free0 (new_cover);
}


static void
__widgets_popovers_new_playlist___lambda196__gtk_button_clicked (GtkButton* _sender,
                                                                 gpointer self)
{
	_widgets_popovers_new_playlist___lambda196_ ((WidgetsPopoversNewPlaylist*) self);
}


static gboolean
_widgets_popovers_new_playlist___lambda197_ (Block39Data* _data39_)
{
	WidgetsPopoversNewPlaylist* self;
	gboolean result = FALSE;
	GtkLabel* _tmp0_;
	self = _data39_->self;
	_tmp0_ = _data39_->note_placeholder;
	gtk_widget_set_visible ((GtkWidget*) _tmp0_, FALSE);
	result = FALSE;
	return result;
}


static gboolean
__widgets_popovers_new_playlist___lambda197__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                                        GdkEventFocus* event,
                                                                        gpointer self)
{
	gboolean result;
	result = _widgets_popovers_new_playlist___lambda197_ (self);
	return result;
}


static gboolean
_widgets_popovers_new_playlist___lambda198_ (Block39Data* _data39_)
{
	WidgetsPopoversNewPlaylist* self;
	gboolean result = FALSE;
	GtkTextView* _tmp0_;
	GtkTextBuffer* _tmp1_;
	GtkTextBuffer* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gboolean _tmp6_;
	self = _data39_->self;
	_tmp0_ = self->priv->note_text;
	_tmp1_ = gtk_text_view_get_buffer (_tmp0_);
	_tmp2_ = _tmp1_;
	g_object_get (_tmp2_, "text", &_tmp3_, NULL);
	_tmp4_ = _tmp3_;
	_tmp5_ = _tmp4_;
	_tmp6_ = g_strcmp0 (_tmp5_, "") == 0;
	_g_free0 (_tmp5_);
	if (_tmp6_) {
		GtkLabel* _tmp7_;
		_tmp7_ = _data39_->note_placeholder;
		gtk_widget_set_visible ((GtkWidget*) _tmp7_, TRUE);
	}
	result = FALSE;
	return result;
}


static gboolean
__widgets_popovers_new_playlist___lambda198__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                         GdkEventFocus* event,
                                                                         gpointer self)
{
	gboolean result;
	result = _widgets_popovers_new_playlist___lambda198_ (self);
	return result;
}


static GObject *
widgets_popovers_new_playlist_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsPopoversNewPlaylist * self;
	Block39Data* _data39_;
	GtkStyleContext* _tmp0_;
	GtkEntry* _tmp1_;
	GtkEntry* _tmp2_;
	GtkEntry* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkEntry* _tmp5_;
	GtkEntry* _tmp6_;
	GtkTextView* _tmp7_;
	GtkTextView* _tmp8_;
	GtkTextView* _tmp9_;
	GtkTextView* _tmp10_;
	GtkTextView* _tmp11_;
	GtkTextView* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	GtkTextView* _tmp15_;
	GtkLabel* _tmp16_;
	GtkImage* camera_image = NULL;
	GtkImage* _tmp17_;
	GtkImage* _tmp18_;
	GThemedIcon* _tmp19_;
	GThemedIcon* _tmp20_;
	GtkImage* _tmp21_;
	GtkStyleContext* _tmp22_;
	GtkImage* _tmp23_;
	GtkImage* _tmp24_;
	GtkImage* _tmp25_;
	WidgetsCover* _tmp26_;
	GtkButton* cover_button = NULL;
	GtkButton* _tmp27_;
	GtkButton* _tmp28_;
	GtkButton* _tmp29_;
	GtkStyleContext* _tmp30_;
	GtkButton* _tmp31_;
	GtkStyleContext* _tmp32_;
	GtkButton* _tmp33_;
	WidgetsCover* _tmp34_;
	GtkOverlay* cover_overlay = NULL;
	GtkOverlay* _tmp35_;
	GtkOverlay* _tmp36_;
	GtkOverlay* _tmp37_;
	GtkOverlay* _tmp38_;
	GtkImage* _tmp39_;
	GtkOverlay* _tmp40_;
	GtkButton* _tmp41_;
	GtkButton* add_button = NULL;
	GtkButton* _tmp42_;
	GtkButton* _tmp43_;
	GtkButton* _tmp44_;
	GtkBox* box_01 = NULL;
	GtkBox* _tmp45_;
	GtkBox* _tmp46_;
	GtkOverlay* _tmp47_;
	GtkBox* _tmp48_;
	GtkEntry* _tmp49_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp50_;
	GtkGrid* _tmp51_;
	GtkGrid* _tmp52_;
	GtkGrid* _tmp53_;
	GtkGrid* _tmp54_;
	GtkGrid* _tmp55_;
	GtkBox* _tmp56_;
	GtkGrid* _tmp57_;
	GtkTextView* _tmp58_;
	GtkGrid* _tmp59_;
	GtkButton* _tmp60_;
	GtkGrid* _tmp61_;
	GtkEntry* _tmp62_;
	GtkEntry* _tmp63_;
	GtkButton* _tmp64_;
	GtkButton* _tmp65_;
	GtkTextView* _tmp66_;
	GtkTextView* _tmp67_;
	parent_class = G_OBJECT_CLASS (widgets_popovers_new_playlist_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST, WidgetsPopoversNewPlaylist);
	_data39_ = g_slice_new0 (Block39Data);
	_data39_->_ref_count_ = 1;
	_data39_->self = g_object_ref (self);
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_VIEW);
	_tmp1_ = (GtkEntry*) gtk_entry_new ();
	g_object_ref_sink (_tmp1_);
	_g_object_unref0 (self->title_entry);
	self->title_entry = _tmp1_;
	_tmp2_ = self->title_entry;
	gtk_entry_set_placeholder_text (_tmp2_, _ ("New Playlist"));
	_tmp3_ = self->title_entry;
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
	gtk_style_context_add_class (_tmp4_, GTK_STYLE_CLASS_FLAT);
	_tmp5_ = self->title_entry;
	gtk_widget_set_valign ((GtkWidget*) _tmp5_, GTK_ALIGN_START);
	_tmp6_ = self->title_entry;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp6_, 6);
	_tmp7_ = (GtkTextView*) gtk_text_view_new ();
	g_object_ref_sink (_tmp7_);
	_g_object_unref0 (self->priv->note_text);
	self->priv->note_text = _tmp7_;
	_tmp8_ = self->priv->note_text;
	g_object_set ((GtkWidget*) _tmp8_, "height-request", 35, NULL);
	_tmp9_ = self->priv->note_text;
	gtk_text_view_set_wrap_mode (_tmp9_, GTK_WRAP_WORD_CHAR);
	_tmp10_ = self->priv->note_text;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp10_, TRUE);
	_tmp11_ = self->priv->note_text;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp11_, 6);
	_tmp12_ = self->priv->note_text;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp12_, 6);
	_tmp13_ = (GtkLabel*) gtk_label_new (_ ("Add Description"));
	g_object_ref_sink (_tmp13_);
	_data39_->note_placeholder = _tmp13_;
	_tmp14_ = _data39_->note_placeholder;
	gtk_widget_set_opacity ((GtkWidget*) _tmp14_, 0.6);
	_tmp15_ = self->priv->note_text;
	_tmp16_ = _data39_->note_placeholder;
	gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp16_);
	_tmp17_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp17_);
	camera_image = _tmp17_;
	_tmp18_ = camera_image;
	_tmp19_ = (GThemedIcon*) g_themed_icon_new ("camera-photo-symbolic");
	_tmp20_ = _tmp19_;
	g_object_set (_tmp18_, "gicon", (GIcon*) _tmp20_, NULL);
	_g_object_unref0 (_tmp20_);
	_tmp21_ = camera_image;
	_tmp22_ = gtk_widget_get_style_context ((GtkWidget*) _tmp21_);
	gtk_style_context_add_class (_tmp22_, "playing-ani-color");
	_tmp23_ = camera_image;
	gtk_image_set_pixel_size (_tmp23_, 16);
	_tmp24_ = camera_image;
	gtk_widget_set_halign ((GtkWidget*) _tmp24_, GTK_ALIGN_END);
	_tmp25_ = camera_image;
	gtk_widget_set_valign ((GtkWidget*) _tmp25_, GTK_ALIGN_END);
	_tmp26_ = widgets_cover_new_with_default_icon (64, "playlist");
	g_object_ref_sink (_tmp26_);
	_g_object_unref0 (self->priv->image_cover);
	self->priv->image_cover = _tmp26_;
	_tmp27_ = (GtkButton*) gtk_button_new ();
	g_object_ref_sink (_tmp27_);
	cover_button = _tmp27_;
	_tmp28_ = cover_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp28_, FALSE);
	_tmp29_ = cover_button;
	_tmp30_ = gtk_widget_get_style_context ((GtkWidget*) _tmp29_);
	gtk_style_context_add_class (_tmp30_, "no-padding");
	_tmp31_ = cover_button;
	_tmp32_ = gtk_widget_get_style_context ((GtkWidget*) _tmp31_);
	gtk_style_context_add_class (_tmp32_, GTK_STYLE_CLASS_FLAT);
	_tmp33_ = cover_button;
	_tmp34_ = self->priv->image_cover;
	gtk_container_add ((GtkContainer*) _tmp33_, (GtkWidget*) _tmp34_);
	_tmp35_ = (GtkOverlay*) gtk_overlay_new ();
	g_object_ref_sink (_tmp35_);
	cover_overlay = _tmp35_;
	_tmp36_ = cover_overlay;
	gtk_widget_set_halign ((GtkWidget*) _tmp36_, GTK_ALIGN_START);
	_tmp37_ = cover_overlay;
	gtk_widget_set_valign ((GtkWidget*) _tmp37_, GTK_ALIGN_START);
	_tmp38_ = cover_overlay;
	_tmp39_ = camera_image;
	gtk_overlay_add_overlay (_tmp38_, (GtkWidget*) _tmp39_);
	_tmp40_ = cover_overlay;
	_tmp41_ = cover_button;
	gtk_container_add ((GtkContainer*) _tmp40_, (GtkWidget*) _tmp41_);
	_tmp42_ = (GtkButton*) gtk_button_new_with_label (_ ("Add"));
	g_object_ref_sink (_tmp42_);
	add_button = _tmp42_;
	_tmp43_ = add_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp43_, FALSE);
	_tmp44_ = add_button;
	g_object_set ((GtkWidget*) _tmp44_, "margin", 6, NULL);
	_tmp45_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
	g_object_ref_sink (_tmp45_);
	box_01 = _tmp45_;
	_tmp46_ = box_01;
	_tmp47_ = cover_overlay;
	gtk_box_pack_start (_tmp46_, (GtkWidget*) _tmp47_, FALSE, FALSE, (guint) 0);
	_tmp48_ = box_01;
	_tmp49_ = self->title_entry;
	gtk_box_pack_start (_tmp48_, (GtkWidget*) _tmp49_, FALSE, FALSE, (guint) 0);
	_tmp50_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp50_);
	main_grid = _tmp50_;
	_tmp51_ = main_grid;
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp51_, GTK_ORIENTATION_VERTICAL);
	_tmp52_ = main_grid;
	g_object_set ((GtkWidget*) _tmp52_, "margin", 3, NULL);
	_tmp53_ = main_grid;
	gtk_grid_set_column_spacing (_tmp53_, 6);
	_tmp54_ = main_grid;
	gtk_grid_set_row_spacing (_tmp54_, 3);
	_tmp55_ = main_grid;
	_tmp56_ = box_01;
	gtk_container_add ((GtkContainer*) _tmp55_, (GtkWidget*) _tmp56_);
	_tmp57_ = main_grid;
	_tmp58_ = self->priv->note_text;
	gtk_container_add ((GtkContainer*) _tmp57_, (GtkWidget*) _tmp58_);
	_tmp59_ = main_grid;
	_tmp60_ = add_button;
	gtk_container_add ((GtkContainer*) _tmp59_, (GtkWidget*) _tmp60_);
	_tmp61_ = main_grid;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp61_);
	_tmp62_ = self->title_entry;
	gtk_widget_grab_focus ((GtkWidget*) _tmp62_);
	_tmp63_ = self->title_entry;
	g_signal_connect_object (_tmp63_, "activate", (GCallback) _widgets_popovers_new_playlist_add_playlist_gtk_entry_activate, self, 0);
	_tmp64_ = add_button;
	g_signal_connect_object (_tmp64_, "clicked", (GCallback) _widgets_popovers_new_playlist_add_playlist_gtk_button_clicked, self, 0);
	_tmp65_ = cover_button;
	g_signal_connect_object (_tmp65_, "clicked", (GCallback) __widgets_popovers_new_playlist___lambda196__gtk_button_clicked, self, 0);
	_tmp66_ = self->priv->note_text;
	g_signal_connect_data ((GtkWidget*) _tmp66_, "focus-in-event", (GCallback) __widgets_popovers_new_playlist___lambda197__gtk_widget_focus_in_event, block39_data_ref (_data39_), (GClosureNotify) block39_data_unref, 0);
	_tmp67_ = self->priv->note_text;
	g_signal_connect_data ((GtkWidget*) _tmp67_, "focus-out-event", (GCallback) __widgets_popovers_new_playlist___lambda198__gtk_widget_focus_out_event, block39_data_ref (_data39_), (GClosureNotify) block39_data_unref, 0);
	_g_object_unref0 (main_grid);
	_g_object_unref0 (box_01);
	_g_object_unref0 (add_button);
	_g_object_unref0 (cover_overlay);
	_g_object_unref0 (cover_button);
	_g_object_unref0 (camera_image);
	block39_data_unref (_data39_);
	_data39_ = NULL;
	return obj;
}


static void
widgets_popovers_new_playlist_class_init (WidgetsPopoversNewPlaylistClass * klass)
{
	widgets_popovers_new_playlist_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsPopoversNewPlaylistPrivate));
	G_OBJECT_CLASS (klass)->constructor = widgets_popovers_new_playlist_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_popovers_new_playlist_finalize;
}


static void
widgets_popovers_new_playlist_instance_init (WidgetsPopoversNewPlaylist * self)
{
	self->priv = WIDGETS_POPOVERS_NEW_PLAYLIST_GET_PRIVATE (self);
}


static void
widgets_popovers_new_playlist_finalize (GObject * obj)
{
	WidgetsPopoversNewPlaylist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_POPOVERS_TYPE_NEW_PLAYLIST, WidgetsPopoversNewPlaylist);
	_g_object_unref0 (self->title_entry);
	_g_object_unref0 (self->priv->note_text);
	_g_object_unref0 (self->priv->image_cover);
	_g_free0 (self->priv->cover_path);
	G_OBJECT_CLASS (widgets_popovers_new_playlist_parent_class)->finalize (obj);
}


GType
widgets_popovers_new_playlist_get_type (void)
{
	static volatile gsize widgets_popovers_new_playlist_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_popovers_new_playlist_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsPopoversNewPlaylistClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_popovers_new_playlist_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsPopoversNewPlaylist), 0, (GInstanceInitFunc) widgets_popovers_new_playlist_instance_init, NULL };
		GType widgets_popovers_new_playlist_type_id;
		widgets_popovers_new_playlist_type_id = g_type_register_static (gtk_popover_get_type (), "WidgetsPopoversNewPlaylist", &g_define_type_info, 0);
		g_once_init_leave (&widgets_popovers_new_playlist_type_id__volatile, widgets_popovers_new_playlist_type_id);
	}
	return widgets_popovers_new_playlist_type_id__volatile;
}



