/* QuickFind.c generated by valac 0.40.11, the Vala compiler
 * generated from QuickFind.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <granite.h>
#include <glib/gi18n-lib.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>


#define WIDGETS_TYPE_QUICK_FIND (widgets_quick_find_get_type ())
#define WIDGETS_QUICK_FIND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFind))
#define WIDGETS_QUICK_FIND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFindClass))
#define WIDGETS_IS_QUICK_FIND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_QUICK_FIND))
#define WIDGETS_IS_QUICK_FIND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_QUICK_FIND))
#define WIDGETS_QUICK_FIND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFindClass))

typedef struct _WidgetsQuickFind WidgetsQuickFind;
typedef struct _WidgetsQuickFindClass WidgetsQuickFindClass;
typedef struct _WidgetsQuickFindPrivate WidgetsQuickFindPrivate;

#define WIDGETS_TYPE_SEARCH_ENTRY (widgets_search_entry_get_type ())
#define WIDGETS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntry))
#define WIDGETS_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntryClass))
#define WIDGETS_IS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_SEARCH_ENTRY))
#define WIDGETS_IS_SEARCH_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_SEARCH_ENTRY))
#define WIDGETS_SEARCH_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_SEARCH_ENTRY, WidgetsSearchEntryClass))

typedef struct _WidgetsSearchEntry WidgetsSearchEntry;
typedef struct _WidgetsSearchEntryClass WidgetsSearchEntryClass;
enum  {
	WIDGETS_QUICK_FIND_0_PROPERTY,
	WIDGETS_QUICK_FIND_REVEAL_PROPERTY,
	WIDGETS_QUICK_FIND_NUM_PROPERTIES
};
static GParamSpec* widgets_quick_find_properties[WIDGETS_QUICK_FIND_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block24Data Block24Data;

#define WIDGETS_TYPE_ALERT_VIEW (widgets_alert_view_get_type ())
#define WIDGETS_ALERT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertView))
#define WIDGETS_ALERT_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertViewClass))
#define WIDGETS_IS_ALERT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ALERT_VIEW))
#define WIDGETS_IS_ALERT_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ALERT_VIEW))
#define WIDGETS_ALERT_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertViewClass))

typedef struct _WidgetsAlertView WidgetsAlertView;
typedef struct _WidgetsAlertViewClass WidgetsAlertViewClass;

#define SERVICES_TYPE_RADIO_BROWSER (services_radio_browser_get_type ())
#define SERVICES_RADIO_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_RADIO_BROWSER, ServicesRadioBrowser))
#define SERVICES_RADIO_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_RADIO_BROWSER, ServicesRadioBrowserClass))
#define SERVICES_IS_RADIO_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_RADIO_BROWSER))
#define SERVICES_IS_RADIO_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_RADIO_BROWSER))
#define SERVICES_RADIO_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_RADIO_BROWSER, ServicesRadioBrowserClass))

typedef struct _ServicesRadioBrowser ServicesRadioBrowser;
typedef struct _ServicesRadioBrowserClass ServicesRadioBrowserClass;

#define OBJECTS_TYPE_RADIO (objects_radio_get_type ())
#define OBJECTS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_RADIO, ObjectsRadio))
#define OBJECTS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_RADIO, ObjectsRadioClass))
#define OBJECTS_IS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_RADIO))
#define OBJECTS_IS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_RADIO))
#define OBJECTS_RADIO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_RADIO, ObjectsRadioClass))

typedef struct _ObjectsRadio ObjectsRadio;
typedef struct _ObjectsRadioClass ObjectsRadioClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define WIDGETS_TYPE_RADIO_SEARCH_ROW (widgets_radio_search_row_get_type ())
#define WIDGETS_RADIO_SEARCH_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_RADIO_SEARCH_ROW, WidgetsRadioSearchRow))
#define WIDGETS_RADIO_SEARCH_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_RADIO_SEARCH_ROW, WidgetsRadioSearchRowClass))
#define WIDGETS_IS_RADIO_SEARCH_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_RADIO_SEARCH_ROW))
#define WIDGETS_IS_RADIO_SEARCH_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_RADIO_SEARCH_ROW))
#define WIDGETS_RADIO_SEARCH_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_RADIO_SEARCH_ROW, WidgetsRadioSearchRowClass))

typedef struct _WidgetsRadioSearchRow WidgetsRadioSearchRow;
typedef struct _WidgetsRadioSearchRowClass WidgetsRadioSearchRowClass;
typedef struct _Block25Data Block25Data;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

struct _WidgetsQuickFind {
	GtkRevealer parent_instance;
	WidgetsQuickFindPrivate * priv;
	WidgetsSearchEntry* search_entry;
};

struct _WidgetsQuickFindClass {
	GtkRevealerClass parent_class;
};

struct _WidgetsQuickFindPrivate {
	GtkListBox* radios_listbox;
};

struct _Block24Data {
	int _ref_count_;
	WidgetsQuickFind* self;
	GraniteWidgetsToast* toast;
	GtkStack* radio_stack;
};

struct _Block25Data {
	int _ref_count_;
	Block24Data * _data24_;
	gint c;
};


static gpointer widgets_quick_find_parent_class = NULL;
extern ServicesRadioBrowser* byte_radio_browser;
extern ServicesDatabase* byte_database;

GType widgets_quick_find_get_type (void) G_GNUC_CONST;
GType widgets_search_entry_get_type (void) G_GNUC_CONST;
#define WIDGETS_QUICK_FIND_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFindPrivate))
WidgetsQuickFind* widgets_quick_find_new (void);
WidgetsQuickFind* widgets_quick_find_construct (GType object_type);
void widgets_quick_find_set_reveal (WidgetsQuickFind* self,
                                    gboolean value);
static GObject * widgets_quick_find_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
static Block24Data* block24_data_ref (Block24Data* _data24_);
static void block24_data_unref (void * _userdata_);
WidgetsSearchEntry* widgets_search_entry_new (void);
WidgetsSearchEntry* widgets_search_entry_construct (GType object_type);
GType widgets_alert_view_get_type (void) G_GNUC_CONST;
WidgetsAlertView* widgets_alert_view_new (const gchar* title,
                                          const gchar* description,
                                          const gchar* icon_name);
WidgetsAlertView* widgets_alert_view_construct (GType object_type,
                                                const gchar* title,
                                                const gchar* description,
                                                const gchar* icon_name);
static void _widgets_quick_find___lambda289_ (WidgetsQuickFind* self);
static void __widgets_quick_find___lambda289__gtk_button_clicked (GtkButton* _sender,
                                                           gpointer self);
static void _widgets_quick_find___lambda290_ (WidgetsQuickFind* self);
GType services_radio_browser_get_type (void) G_GNUC_CONST;
void services_radio_browser_get_radios_by_name (ServicesRadioBrowser* self,
                                                const gchar* name,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
void services_radio_browser_get_radios_by_name_finish (ServicesRadioBrowser* self,
                                                       GAsyncResult* _res_);
static void __widgets_quick_find___lambda290__gtk_entry_activate (GtkEntry* _sender,
                                                           gpointer self);
GType objects_radio_get_type (void) G_GNUC_CONST;
static void _widgets_quick_find___lambda294_ (Block24Data* _data24_,
                                       ObjectsRadio* item);
const gchar* objects_radio_get_name (ObjectsRadio* self);
GType widgets_radio_search_row_get_type (void) G_GNUC_CONST;
WidgetsRadioSearchRow* widgets_radio_search_row_new (ObjectsRadio* radio);
WidgetsRadioSearchRow* widgets_radio_search_row_construct (GType object_type,
                                                           ObjectsRadio* radio);
static void __lambda298_ (Block24Data* _data24_);
static void ___lambda298__widgets_radio_search_row_send_notification_error (WidgetsRadioSearchRow* _sender,
                                                                     gpointer self);
static void __widgets_quick_find___lambda294__services_radio_browser_item_loaded (ServicesRadioBrowser* _sender,
                                                                           ObjectsRadio* radio,
                                                                           gpointer self);
static void _widgets_quick_find___lambda299_ (Block24Data* _data24_);
static void __lambda300_ (WidgetsQuickFind* self,
                   GtkWidget* widget);
static void ___lambda300__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __widgets_quick_find___lambda299__services_radio_browser_started (ServicesRadioBrowser* _sender,
                                                                       gpointer self);
static void _widgets_quick_find___lambda301_ (Block24Data* _data24_);
static Block25Data* block25_data_ref (Block25Data* _data25_);
static void block25_data_unref (void * _userdata_);
static void __lambda302_ (Block25Data* _data25_,
                   GtkWidget* widget);
static void ___lambda302__gtk_callback (GtkWidget* widget,
                                 gpointer self);
static void __widgets_quick_find___lambda301__services_radio_browser_finished (ServicesRadioBrowser* _sender,
                                                                        gpointer self);
GType services_database_get_type (void) G_GNUC_CONST;
static void _widgets_quick_find___lambda303_ (Block24Data* _data24_,
                                       ObjectsRadio* radio);
static void __widgets_quick_find___lambda303__services_database_adden_new_radio (ServicesDatabase* _sender,
                                                                          ObjectsRadio* radio,
                                                                          gpointer self);
static void widgets_quick_find_finalize (GObject * obj);
static void _vala_widgets_quick_find_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);


WidgetsQuickFind*
widgets_quick_find_construct (GType object_type)
{
	WidgetsQuickFind * self = NULL;
	self = (WidgetsQuickFind*) g_object_new (object_type, NULL);
	gtk_revealer_set_transition_type ((GtkRevealer*) self, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
	gtk_widget_set_margin_top ((GtkWidget*) self, 12);
	gtk_widget_set_valign ((GtkWidget*) self, GTK_ALIGN_START);
	gtk_widget_set_halign ((GtkWidget*) self, GTK_ALIGN_CENTER);
	gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
	return self;
}


WidgetsQuickFind*
widgets_quick_find_new (void)
{
	return widgets_quick_find_construct (WIDGETS_TYPE_QUICK_FIND);
}


void
widgets_quick_find_set_reveal (WidgetsQuickFind* self,
                               gboolean value)
{
	g_return_if_fail (self != NULL);
	if (value) {
		WidgetsSearchEntry* _tmp0_;
		gtk_revealer_set_reveal_child ((GtkRevealer*) self, TRUE);
		_tmp0_ = self->search_entry;
		gtk_widget_grab_focus ((GtkWidget*) _tmp0_);
	} else {
		gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
	}
	g_object_notify_by_pspec ((GObject *) self, widgets_quick_find_properties[WIDGETS_QUICK_FIND_REVEAL_PROPERTY]);
}


static Block24Data*
block24_data_ref (Block24Data* _data24_)
{
	g_atomic_int_inc (&_data24_->_ref_count_);
	return _data24_;
}


static void
block24_data_unref (void * _userdata_)
{
	Block24Data* _data24_;
	_data24_ = (Block24Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data24_->_ref_count_)) {
		WidgetsQuickFind* self;
		self = _data24_->self;
		_g_object_unref0 (_data24_->radio_stack);
		_g_object_unref0 (_data24_->toast);
		_g_object_unref0 (self);
		g_slice_free (Block24Data, _data24_);
	}
}


static void
_widgets_quick_find___lambda289_ (WidgetsQuickFind* self)
{
	widgets_quick_find_set_reveal (self, FALSE);
}


static void
__widgets_quick_find___lambda289__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self)
{
	_widgets_quick_find___lambda289_ ((WidgetsQuickFind*) self);
}


static void
_widgets_quick_find___lambda290_ (WidgetsQuickFind* self)
{
	ServicesRadioBrowser* _tmp0_;
	WidgetsSearchEntry* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	_tmp0_ = byte_radio_browser;
	_tmp1_ = self->search_entry;
	_tmp2_ = gtk_entry_get_text ((GtkEntry*) _tmp1_);
	_tmp3_ = _tmp2_;
	services_radio_browser_get_radios_by_name (_tmp0_, _tmp3_, NULL, NULL);
}


static void
__widgets_quick_find___lambda290__gtk_entry_activate (GtkEntry* _sender,
                                                      gpointer self)
{
	_widgets_quick_find___lambda290_ ((WidgetsQuickFind*) self);
}


static void
__lambda298_ (Block24Data* _data24_)
{
	WidgetsQuickFind* self;
	GraniteWidgetsToast* _tmp0_;
	GraniteWidgetsToast* _tmp1_;
	self = _data24_->self;
	_tmp0_ = _data24_->toast;
	granite_widgets_toast_set_title (_tmp0_, _ ("The radio station is already added"));
	_tmp1_ = _data24_->toast;
	granite_widgets_toast_send_notification (_tmp1_);
}


static void
___lambda298__widgets_radio_search_row_send_notification_error (WidgetsRadioSearchRow* _sender,
                                                                gpointer self)
{
	__lambda298_ (self);
}


static void
_widgets_quick_find___lambda294_ (Block24Data* _data24_,
                                  ObjectsRadio* item)
{
	WidgetsQuickFind* self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	WidgetsRadioSearchRow* row = NULL;
	WidgetsRadioSearchRow* _tmp4_;
	WidgetsRadioSearchRow* _tmp5_;
	GtkListBox* _tmp6_;
	WidgetsRadioSearchRow* _tmp7_;
	GtkListBox* _tmp8_;
	self = _data24_->self;
	g_return_if_fail (item != NULL);
	_tmp0_ = objects_radio_get_name (item);
	_tmp1_ = _tmp0_;
	_tmp2_ = g_strconcat (_tmp1_, "\n", NULL);
	_tmp3_ = _tmp2_;
	g_print ("%s", _tmp3_);
	_g_free0 (_tmp3_);
	_tmp4_ = widgets_radio_search_row_new (item);
	g_object_ref_sink (_tmp4_);
	row = _tmp4_;
	_tmp5_ = row;
	g_signal_connect_data (_tmp5_, "send-notification-error", (GCallback) ___lambda298__widgets_radio_search_row_send_notification_error, block24_data_ref (_data24_), (GClosureNotify) block24_data_unref, 0);
	_tmp6_ = self->priv->radios_listbox;
	_tmp7_ = row;
	gtk_container_add ((GtkContainer*) _tmp6_, (GtkWidget*) _tmp7_);
	_tmp8_ = self->priv->radios_listbox;
	gtk_widget_show_all ((GtkWidget*) _tmp8_);
	_g_object_unref0 (row);
}


static void
__widgets_quick_find___lambda294__services_radio_browser_item_loaded (ServicesRadioBrowser* _sender,
                                                                      ObjectsRadio* radio,
                                                                      gpointer self)
{
	_widgets_quick_find___lambda294_ (self, radio);
}


static void
__lambda300_ (WidgetsQuickFind* self,
              GtkWidget* widget)
{
	g_return_if_fail (widget != NULL);
	gtk_widget_destroy (widget);
}


static void
___lambda300__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda300_ ((WidgetsQuickFind*) self, widget);
}


static void
_widgets_quick_find___lambda299_ (Block24Data* _data24_)
{
	WidgetsQuickFind* self;
	GtkStack* _tmp0_;
	GtkListBox* _tmp1_;
	self = _data24_->self;
	_tmp0_ = _data24_->radio_stack;
	gtk_stack_set_visible_child_name (_tmp0_, "radios_spinner");
	_tmp1_ = self->priv->radios_listbox;
	gtk_container_foreach ((GtkContainer*) _tmp1_, ___lambda300__gtk_callback, self);
}


static void
__widgets_quick_find___lambda299__services_radio_browser_started (ServicesRadioBrowser* _sender,
                                                                  gpointer self)
{
	_widgets_quick_find___lambda299_ (self);
}


static Block25Data*
block25_data_ref (Block25Data* _data25_)
{
	g_atomic_int_inc (&_data25_->_ref_count_);
	return _data25_;
}


static void
block25_data_unref (void * _userdata_)
{
	Block25Data* _data25_;
	_data25_ = (Block25Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data25_->_ref_count_)) {
		WidgetsQuickFind* self;
		self = _data25_->_data24_->self;
		block24_data_unref (_data25_->_data24_);
		_data25_->_data24_ = NULL;
		g_slice_free (Block25Data, _data25_);
	}
}


static void
__lambda302_ (Block25Data* _data25_,
              GtkWidget* widget)
{
	Block24Data* _data24_;
	WidgetsQuickFind* self;
	gint _tmp0_;
	_data24_ = _data25_->_data24_;
	self = _data24_->self;
	g_return_if_fail (widget != NULL);
	_tmp0_ = _data25_->c;
	_data25_->c = _tmp0_ + 1;
}


static void
___lambda302__gtk_callback (GtkWidget* widget,
                            gpointer self)
{
	__lambda302_ (self, widget);
}


static void
_widgets_quick_find___lambda301_ (Block24Data* _data24_)
{
	WidgetsQuickFind* self;
	Block25Data* _data25_;
	GtkListBox* _tmp0_;
	gint _tmp1_;
	self = _data24_->self;
	_data25_ = g_slice_new0 (Block25Data);
	_data25_->_ref_count_ = 1;
	_data25_->_data24_ = block24_data_ref (_data24_);
	_data25_->c = 0;
	_tmp0_ = self->priv->radios_listbox;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda302__gtk_callback, _data25_);
	_tmp1_ = _data25_->c;
	if (_tmp1_ > 0) {
		GtkStack* _tmp2_;
		_tmp2_ = _data24_->radio_stack;
		gtk_stack_set_visible_child_name (_tmp2_, "radios_listbox");
	} else {
		GtkStack* _tmp3_;
		_tmp3_ = _data24_->radio_stack;
		gtk_stack_set_visible_child_name (_tmp3_, "radio_alert_grid");
	}
	block25_data_unref (_data25_);
	_data25_ = NULL;
}


static void
__widgets_quick_find___lambda301__services_radio_browser_finished (ServicesRadioBrowser* _sender,
                                                                   gpointer self)
{
	_widgets_quick_find___lambda301_ (self);
}


static void
_widgets_quick_find___lambda303_ (Block24Data* _data24_,
                                  ObjectsRadio* radio)
{
	WidgetsQuickFind* self;
	GraniteWidgetsToast* _tmp0_;
	GraniteWidgetsToast* _tmp1_;
	self = _data24_->self;
	g_return_if_fail (radio != NULL);
	_tmp0_ = _data24_->toast;
	granite_widgets_toast_set_title (_tmp0_, _ ("The radio station was added correctly"));
	_tmp1_ = _data24_->toast;
	granite_widgets_toast_send_notification (_tmp1_);
}


static void
__widgets_quick_find___lambda303__services_database_adden_new_radio (ServicesDatabase* _sender,
                                                                     ObjectsRadio* radio,
                                                                     gpointer self)
{
	_widgets_quick_find___lambda303_ (self, radio);
}


static GObject *
widgets_quick_find_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsQuickFind * self;
	Block24Data* _data24_;
	GraniteWidgetsToast* _tmp0_;
	WidgetsSearchEntry* _tmp1_;
	WidgetsSearchEntry* _tmp2_;
	WidgetsSearchEntry* _tmp3_;
	GtkStyleContext* _tmp4_;
	WidgetsSearchEntry* _tmp5_;
	GtkButton* cancel_button = NULL;
	GtkButton* _tmp6_;
	GtkButton* _tmp7_;
	GtkButton* _tmp8_;
	GtkButton* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkButton* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkBox* top_box = NULL;
	GtkBox* _tmp13_;
	GtkBox* _tmp14_;
	GtkBox* _tmp15_;
	WidgetsSearchEntry* _tmp16_;
	GtkBox* _tmp17_;
	GtkButton* _tmp18_;
	GraniteWidgetsModeButton* mode_button = NULL;
	GraniteWidgetsModeButton* _tmp19_;
	GraniteWidgetsModeButton* _tmp20_;
	GtkStyleContext* _tmp21_;
	GraniteWidgetsModeButton* _tmp22_;
	GraniteWidgetsModeButton* _tmp23_;
	GraniteWidgetsModeButton* _tmp24_;
	GraniteWidgetsModeButton* _tmp25_;
	GraniteWidgetsModeButton* _tmp26_;
	GtkListBox* _tmp27_;
	GtkListBox* _tmp28_;
	GtkSpinner* radios_spinner = NULL;
	GtkSpinner* _tmp29_;
	GtkSpinner* _tmp30_;
	GtkSpinner* _tmp31_;
	GtkSpinner* _tmp32_;
	GtkSpinner* _tmp33_;
	GtkSpinner* _tmp34_;
	WidgetsAlertView* alert_view = NULL;
	WidgetsAlertView* _tmp35_;
	GtkStack* _tmp36_;
	GtkStack* _tmp37_;
	GtkStack* _tmp38_;
	GtkStack* _tmp39_;
	WidgetsAlertView* _tmp40_;
	GtkStack* _tmp41_;
	GtkSpinner* _tmp42_;
	GtkStack* _tmp43_;
	GtkListBox* _tmp44_;
	GtkScrolledWindow* radio_scrolled = NULL;
	GtkScrolledWindow* _tmp45_;
	GtkScrolledWindow* _tmp46_;
	GtkScrolledWindow* _tmp47_;
	GtkScrolledWindow* _tmp48_;
	GtkStack* _tmp49_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp50_;
	GtkBox* _tmp51_;
	GtkBox* _tmp52_;
	GtkBox* _tmp53_;
	GtkStyleContext* _tmp54_;
	GtkBox* _tmp55_;
	GtkBox* _tmp56_;
	GtkBox* _tmp57_;
	GtkScrolledWindow* _tmp58_;
	GtkBox* _tmp59_;
	GraniteWidgetsToast* _tmp60_;
	GtkBox* _tmp61_;
	GtkButton* _tmp62_;
	WidgetsSearchEntry* _tmp63_;
	ServicesRadioBrowser* _tmp64_;
	ServicesRadioBrowser* _tmp65_;
	ServicesRadioBrowser* _tmp66_;
	ServicesDatabase* _tmp67_;
	parent_class = G_OBJECT_CLASS (widgets_quick_find_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFind);
	_data24_ = g_slice_new0 (Block24Data);
	_data24_->_ref_count_ = 1;
	_data24_->self = g_object_ref (self);
	_tmp0_ = granite_widgets_toast_new (_ ("The radio station was added correctly"));
	g_object_ref_sink (_tmp0_);
	_data24_->toast = _tmp0_;
	_tmp1_ = widgets_search_entry_new ();
	g_object_ref_sink (_tmp1_);
	_g_object_unref0 (self->search_entry);
	self->search_entry = _tmp1_;
	_tmp2_ = self->search_entry;
	g_object_set ((GtkWidget*) _tmp2_, "margin", 0, NULL);
	_tmp3_ = self->search_entry;
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
	gtk_style_context_add_class (_tmp4_, "search-entry");
	_tmp5_ = self->search_entry;
	gtk_entry_set_placeholder_text ((GtkEntry*) _tmp5_, _ ("Quick find"));
	_tmp6_ = (GtkButton*) gtk_button_new_with_label (_ ("Cancel"));
	g_object_ref_sink (_tmp6_);
	cancel_button = _tmp6_;
	_tmp7_ = cancel_button;
	gtk_widget_set_can_focus ((GtkWidget*) _tmp7_, FALSE);
	_tmp8_ = cancel_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp8_, GTK_ALIGN_CENTER);
	_tmp9_ = cancel_button;
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
	gtk_style_context_add_class (_tmp10_, GTK_STYLE_CLASS_FLAT);
	_tmp11_ = cancel_button;
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
	gtk_style_context_add_class (_tmp12_, "quick-find-cancel");
	_tmp13_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
	g_object_ref_sink (_tmp13_);
	top_box = _tmp13_;
	_tmp14_ = top_box;
	g_object_set ((GtkWidget*) _tmp14_, "margin", 6, NULL);
	_tmp15_ = top_box;
	_tmp16_ = self->search_entry;
	gtk_box_pack_start (_tmp15_, (GtkWidget*) _tmp16_, TRUE, TRUE, (guint) 0);
	_tmp17_ = top_box;
	_tmp18_ = cancel_button;
	gtk_box_pack_end (_tmp17_, (GtkWidget*) _tmp18_, FALSE, FALSE, (guint) 0);
	_tmp19_ = granite_widgets_mode_button_new ();
	g_object_ref_sink (_tmp19_);
	mode_button = _tmp19_;
	_tmp20_ = mode_button;
	_tmp21_ = gtk_widget_get_style_context ((GtkWidget*) _tmp20_);
	gtk_style_context_add_class (_tmp21_, "quick-find-modebutton");
	_tmp22_ = mode_button;
	g_object_set ((GtkWidget*) _tmp22_, "margin", 6, NULL);
	_tmp23_ = mode_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp23_, GTK_ALIGN_CENTER);
	_tmp24_ = mode_button;
	granite_widgets_mode_button_append_text (_tmp24_, _ ("Library"));
	_tmp25_ = mode_button;
	granite_widgets_mode_button_append_text (_tmp25_, _ ("Radios"));
	_tmp26_ = mode_button;
	granite_widgets_mode_button_set_selected (_tmp26_, 0);
	_tmp27_ = (GtkListBox*) gtk_list_box_new ();
	g_object_ref_sink (_tmp27_);
	_g_object_unref0 (self->priv->radios_listbox);
	self->priv->radios_listbox = _tmp27_;
	_tmp28_ = self->priv->radios_listbox;
	g_object_set ((GtkWidget*) _tmp28_, "expand", TRUE, NULL);
	_tmp29_ = (GtkSpinner*) gtk_spinner_new ();
	g_object_ref_sink (_tmp29_);
	radios_spinner = _tmp29_;
	_tmp30_ = radios_spinner;
	gtk_widget_set_halign ((GtkWidget*) _tmp30_, GTK_ALIGN_CENTER);
	_tmp31_ = radios_spinner;
	gtk_widget_set_valign ((GtkWidget*) _tmp31_, GTK_ALIGN_CENTER);
	_tmp32_ = radios_spinner;
	g_object_set ((GtkWidget*) _tmp32_, "expand", TRUE, NULL);
	_tmp33_ = radios_spinner;
	g_object_set (_tmp33_, "active", TRUE, NULL);
	_tmp34_ = radios_spinner;
	gtk_spinner_start (_tmp34_);
	_tmp35_ = widgets_alert_view_new (_ ("Discover…"), _ ("Search your favorite radios"), "edit-find-symbolic");
	g_object_ref_sink (_tmp35_);
	alert_view = _tmp35_;
	_tmp36_ = (GtkStack*) gtk_stack_new ();
	g_object_ref_sink (_tmp36_);
	_data24_->radio_stack = _tmp36_;
	_tmp37_ = _data24_->radio_stack;
	g_object_set ((GtkWidget*) _tmp37_, "expand", TRUE, NULL);
	_tmp38_ = _data24_->radio_stack;
	gtk_stack_set_transition_type (_tmp38_, GTK_STACK_TRANSITION_TYPE_CROSSFADE);
	_tmp39_ = _data24_->radio_stack;
	_tmp40_ = alert_view;
	gtk_stack_add_named (_tmp39_, (GtkWidget*) _tmp40_, "radio_alert_grid");
	_tmp41_ = _data24_->radio_stack;
	_tmp42_ = radios_spinner;
	gtk_stack_add_named (_tmp41_, (GtkWidget*) _tmp42_, "radios_spinner");
	_tmp43_ = _data24_->radio_stack;
	_tmp44_ = self->priv->radios_listbox;
	gtk_stack_add_named (_tmp43_, (GtkWidget*) _tmp44_, "radios_listbox");
	_tmp45_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
	g_object_ref_sink (_tmp45_);
	radio_scrolled = _tmp45_;
	_tmp46_ = radio_scrolled;
	g_object_set (_tmp46_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
	_tmp47_ = radio_scrolled;
	g_object_set ((GtkWidget*) _tmp47_, "expand", TRUE, NULL);
	_tmp48_ = radio_scrolled;
	_tmp49_ = _data24_->radio_stack;
	gtk_container_add ((GtkContainer*) _tmp48_, (GtkWidget*) _tmp49_);
	_tmp50_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	g_object_ref_sink (_tmp50_);
	main_box = _tmp50_;
	_tmp51_ = main_box;
	g_object_set ((GtkWidget*) _tmp51_, "height-request", 450, NULL);
	_tmp52_ = main_box;
	g_object_set ((GtkWidget*) _tmp52_, "width-request", 325, NULL);
	_tmp53_ = main_box;
	_tmp54_ = gtk_widget_get_style_context ((GtkWidget*) _tmp53_);
	gtk_style_context_add_class (_tmp54_, "quick-find");
	_tmp55_ = main_box;
	_tmp56_ = top_box;
	gtk_box_pack_start (_tmp55_, (GtkWidget*) _tmp56_, FALSE, FALSE, (guint) 0);
	_tmp57_ = main_box;
	_tmp58_ = radio_scrolled;
	gtk_box_pack_start (_tmp57_, (GtkWidget*) _tmp58_, TRUE, TRUE, (guint) 0);
	_tmp59_ = main_box;
	_tmp60_ = _data24_->toast;
	gtk_box_pack_end (_tmp59_, (GtkWidget*) _tmp60_, FALSE, FALSE, (guint) 0);
	_tmp61_ = main_box;
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp61_);
	_tmp62_ = cancel_button;
	g_signal_connect_object (_tmp62_, "clicked", (GCallback) __widgets_quick_find___lambda289__gtk_button_clicked, self, 0);
	_tmp63_ = self->search_entry;
	g_signal_connect_object ((GtkEntry*) _tmp63_, "activate", (GCallback) __widgets_quick_find___lambda290__gtk_entry_activate, self, 0);
	_tmp64_ = byte_radio_browser;
	g_signal_connect_data (_tmp64_, "item-loaded", (GCallback) __widgets_quick_find___lambda294__services_radio_browser_item_loaded, block24_data_ref (_data24_), (GClosureNotify) block24_data_unref, 0);
	_tmp65_ = byte_radio_browser;
	g_signal_connect_data (_tmp65_, "started", (GCallback) __widgets_quick_find___lambda299__services_radio_browser_started, block24_data_ref (_data24_), (GClosureNotify) block24_data_unref, 0);
	_tmp66_ = byte_radio_browser;
	g_signal_connect_data (_tmp66_, "finished", (GCallback) __widgets_quick_find___lambda301__services_radio_browser_finished, block24_data_ref (_data24_), (GClosureNotify) block24_data_unref, 0);
	_tmp67_ = byte_database;
	g_signal_connect_data (_tmp67_, "adden-new-radio", (GCallback) __widgets_quick_find___lambda303__services_database_adden_new_radio, block24_data_ref (_data24_), (GClosureNotify) block24_data_unref, 0);
	_g_object_unref0 (main_box);
	_g_object_unref0 (radio_scrolled);
	_g_object_unref0 (alert_view);
	_g_object_unref0 (radios_spinner);
	_g_object_unref0 (mode_button);
	_g_object_unref0 (top_box);
	_g_object_unref0 (cancel_button);
	block24_data_unref (_data24_);
	_data24_ = NULL;
	return obj;
}


static void
widgets_quick_find_class_init (WidgetsQuickFindClass * klass)
{
	widgets_quick_find_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsQuickFindPrivate));
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_quick_find_set_property;
	G_OBJECT_CLASS (klass)->constructor = widgets_quick_find_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_quick_find_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_QUICK_FIND_REVEAL_PROPERTY, widgets_quick_find_properties[WIDGETS_QUICK_FIND_REVEAL_PROPERTY] = g_param_spec_boolean ("reveal", "reveal", "reveal", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE));
}


static void
widgets_quick_find_instance_init (WidgetsQuickFind * self)
{
	self->priv = WIDGETS_QUICK_FIND_GET_PRIVATE (self);
}


static void
widgets_quick_find_finalize (GObject * obj)
{
	WidgetsQuickFind * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFind);
	_g_object_unref0 (self->priv->radios_listbox);
	_g_object_unref0 (self->search_entry);
	G_OBJECT_CLASS (widgets_quick_find_parent_class)->finalize (obj);
}


GType
widgets_quick_find_get_type (void)
{
	static volatile gsize widgets_quick_find_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_quick_find_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsQuickFindClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_quick_find_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsQuickFind), 0, (GInstanceInitFunc) widgets_quick_find_instance_init, NULL };
		GType widgets_quick_find_type_id;
		widgets_quick_find_type_id = g_type_register_static (gtk_revealer_get_type (), "WidgetsQuickFind", &g_define_type_info, 0);
		g_once_init_leave (&widgets_quick_find_type_id__volatile, widgets_quick_find_type_id);
	}
	return widgets_quick_find_type_id__volatile;
}


static void
_vala_widgets_quick_find_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	WidgetsQuickFind * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFind);
	switch (property_id) {
		case WIDGETS_QUICK_FIND_REVEAL_PROPERTY:
		widgets_quick_find_set_reveal (self, g_value_get_boolean (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



