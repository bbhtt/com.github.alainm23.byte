/* Settings.c generated by valac 0.40.11, the Vala compiler
 * generated from Settings.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <gdk/gdk.h>
#include <glib/gi18n-lib.h>
#include <granite.h>


#define DIALOGS_TYPE_SETTINGS (dialogs_settings_get_type ())
#define DIALOGS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_SETTINGS, DialogsSettings))
#define DIALOGS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_SETTINGS, DialogsSettingsClass))
#define DIALOGS_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_SETTINGS))
#define DIALOGS_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_SETTINGS))
#define DIALOGS_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_SETTINGS, DialogsSettingsClass))

typedef struct _DialogsSettings DialogsSettings;
typedef struct _DialogsSettingsClass DialogsSettingsClass;
typedef struct _DialogsSettingsPrivate DialogsSettingsPrivate;
enum  {
	DIALOGS_SETTINGS_0_PROPERTY,
	DIALOGS_SETTINGS_NUM_PROPERTIES
};
static GParamSpec* dialogs_settings_properties[DIALOGS_SETTINGS_NUM_PROPERTIES];

#define TYPE_BYTE (byte_get_type ())
#define BYTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BYTE, Byte))
#define BYTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BYTE, ByteClass))
#define IS_BYTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BYTE))
#define IS_BYTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BYTE))
#define BYTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BYTE, ByteClass))

typedef struct _Byte Byte;
typedef struct _ByteClass ByteClass;
typedef struct _BytePrivate BytePrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block64Data Block64Data;

#define SERVICES_TYPE_SCAN (services_scan_get_type ())
#define SERVICES_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SCAN, ServicesScan))
#define SERVICES_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SCAN, ServicesScanClass))
#define SERVICES_IS_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SCAN))
#define SERVICES_IS_SCAN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SCAN))
#define SERVICES_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SCAN, ServicesScanClass))

typedef struct _ServicesScan ServicesScan;
typedef struct _ServicesScanClass ServicesScanClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;

struct _DialogsSettings {
	GtkDialog parent_instance;
	DialogsSettingsPrivate * priv;
};

struct _DialogsSettingsClass {
	GtkDialogClass parent_class;
};

struct _Byte {
	GtkApplication parent_instance;
	BytePrivate * priv;
	MainWindow* main_window;
	gchar** argsv;
	gint argsv_length1;
	gboolean has_entry_focus;
	GSimpleAction* toggle_playing_action;
};

struct _ByteClass {
	GtkApplicationClass parent_class;
};

struct _Block64Data {
	int _ref_count_;
	DialogsSettings* self;
	GtkSwitch* settings_02_switch;
	GtkSwitch* settings_03_switch;
	GtkFileChooserButton* library_filechooser;
	GtkSwitch* settings_05_switch;
	GtkSwitch* settings_06_switch;
	GtkSwitch* settings_07_switch;
};


static gpointer dialogs_settings_parent_class = NULL;
extern GSettings* byte_settings;
extern ServicesScan* byte_scan_service;
extern ServicesDatabase* byte_database;
extern Utils* byte_utils;

GType dialogs_settings_get_type (void) G_GNUC_CONST;
#define DIALOGS_SETTINGS_COLOR_CSS "\n" \
"        .color-%s radio {\n" \
"            background: %s;\n" \
"        }\n" \
"    "
DialogsSettings* dialogs_settings_new (void);
DialogsSettings* dialogs_settings_construct (GType object_type);
GType byte_get_type (void) G_GNUC_CONST;
Byte* byte_get_instance (void);
GType main_window_get_type (void) G_GNUC_CONST;
static void dialogs_settings_apply_styles (DialogsSettings* self,
                                    const gchar* id,
                                    const gchar* color,
                                    GtkRadioButton* radio);
static GObject * dialogs_settings_constructor (GType type,
                                        guint n_construct_properties,
                                        GObjectConstructParam * construct_properties);
static Block64Data* block64_data_ref (Block64Data* _data64_);
static void block64_data_unref (void * _userdata_);
static void _dialogs_settings___lambda28_ (Block64Data* _data64_);
static void __dialogs_settings___lambda28__g_object_notify (GObject* _sender,
                                                     GParamSpec* pspec,
                                                     gpointer self);
static void _dialogs_settings___lambda29_ (Block64Data* _data64_);
static void __dialogs_settings___lambda29__g_object_notify (GObject* _sender,
                                                     GParamSpec* pspec,
                                                     gpointer self);
static void _dialogs_settings___lambda30_ (Block64Data* _data64_);
static void __dialogs_settings___lambda30__g_object_notify (GObject* _sender,
                                                     GParamSpec* pspec,
                                                     gpointer self);
static void _dialogs_settings___lambda31_ (Block64Data* _data64_);
static void __dialogs_settings___lambda31__g_object_notify (GObject* _sender,
                                                     GParamSpec* pspec,
                                                     gpointer self);
static void _dialogs_settings___lambda32_ (Block64Data* _data64_);
static void __dialogs_settings___lambda32__g_object_notify (GObject* _sender,
                                                     GParamSpec* pspec,
                                                     gpointer self);
static void _dialogs_settings___lambda33_ (Block64Data* _data64_);
GType services_scan_get_type (void) G_GNUC_CONST;
void services_scan_scan_local_files (ServicesScan* self,
                                     const gchar* uri);
static void __dialogs_settings___lambda33__gtk_file_chooser_button_file_set (GtkFileChooserButton* _sender,
                                                                      gpointer self);
static void _dialogs_settings___lambda34_ (DialogsSettings* self);
GType services_database_get_type (void) G_GNUC_CONST;
void services_database_reset_all_library (ServicesDatabase* self);
static void __dialogs_settings___lambda34__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void _dialogs_settings___lambda35_ (DialogsSettings* self);
GType utils_get_type (void) G_GNUC_CONST;
void utils_apply_theme (Utils* self,
                        gint id);
static void __dialogs_settings___lambda35__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                               gpointer self);
static void _dialogs_settings___lambda36_ (DialogsSettings* self);
static void __dialogs_settings___lambda36__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                               gpointer self);
static void _dialogs_settings___lambda37_ (DialogsSettings* self);
static void __dialogs_settings___lambda37__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                               gpointer self);


DialogsSettings*
dialogs_settings_construct (GType object_type)
{
	DialogsSettings * self = NULL;
	Byte* _tmp0_;
	Byte* _tmp1_;
	MainWindow* _tmp2_;
	_tmp0_ = byte_get_instance ();
	_tmp1_ = _tmp0_;
	_tmp2_ = _tmp1_->main_window;
	self = (DialogsSettings*) g_object_new (object_type, "transient-for", _tmp2_, "deletable", TRUE, "resizable", TRUE, "destroy-with-parent", TRUE, "window-position", GTK_WIN_POS_CENTER_ON_PARENT, NULL);
	return self;
}


DialogsSettings*
dialogs_settings_new (void)
{
	return dialogs_settings_construct (DIALOGS_TYPE_SETTINGS);
}


static void
dialogs_settings_apply_styles (DialogsSettings* self,
                               const gchar* id,
                               const gchar* color,
                               GtkRadioButton* radio)
{
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp0_;
	GtkStyleContext* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GtkStyleContext* _tmp4_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (id != NULL);
	g_return_if_fail (color != NULL);
	g_return_if_fail (radio != NULL);
	_tmp0_ = gtk_css_provider_new ();
	provider = _tmp0_;
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) radio);
	_tmp2_ = g_strdup_printf ("color-%s", id);
	_tmp3_ = _tmp2_;
	gtk_style_context_add_class (_tmp1_, _tmp3_);
	_g_free0 (_tmp3_);
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) radio);
	gtk_style_context_add_class (_tmp4_, "color-radio");
	{
		gchar* colored_css = NULL;
		gchar* _tmp5_;
		GtkCssProvider* _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		gint _tmp9_;
		gint _tmp10_;
		GdkScreen* _tmp11_;
		GtkCssProvider* _tmp12_;
		_tmp5_ = g_strdup_printf (DIALOGS_SETTINGS_COLOR_CSS, id, color);
		colored_css = _tmp5_;
		_tmp6_ = provider;
		_tmp7_ = colored_css;
		_tmp8_ = colored_css;
		_tmp9_ = strlen (_tmp8_);
		_tmp10_ = _tmp9_;
		gtk_css_provider_load_from_data (_tmp6_, _tmp7_, (gssize) _tmp10_, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_free0 (colored_css);
			goto __catch54_g_error;
		}
		_tmp11_ = gdk_screen_get_default ();
		_tmp12_ = provider;
		gtk_style_context_add_provider_for_screen (_tmp11_, (GtkStyleProvider*) _tmp12_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
		_g_free0 (colored_css);
	}
	goto __finally54;
	__catch54_g_error:
	{
		GError* e = NULL;
		e = _inner_error_;
		_inner_error_ = NULL;
		_g_error_free0 (e);
		_g_object_unref0 (provider);
		return;
	}
	__finally54:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (provider);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_g_object_unref0 (provider);
}


static Block64Data*
block64_data_ref (Block64Data* _data64_)
{
	g_atomic_int_inc (&_data64_->_ref_count_);
	return _data64_;
}


static void
block64_data_unref (void * _userdata_)
{
	Block64Data* _data64_;
	_data64_ = (Block64Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data64_->_ref_count_)) {
		DialogsSettings* self;
		self = _data64_->self;
		_g_object_unref0 (_data64_->settings_07_switch);
		_g_object_unref0 (_data64_->settings_06_switch);
		_g_object_unref0 (_data64_->settings_05_switch);
		_g_object_unref0 (_data64_->library_filechooser);
		_g_object_unref0 (_data64_->settings_03_switch);
		_g_object_unref0 (_data64_->settings_02_switch);
		_g_object_unref0 (self);
		g_slice_free (Block64Data, _data64_);
	}
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
_dialogs_settings___lambda28_ (Block64Data* _data64_)
{
	DialogsSettings* self;
	GSettings* _tmp0_;
	GtkSwitch* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	self = _data64_->self;
	_tmp0_ = byte_settings;
	_tmp1_ = _data64_->settings_02_switch;
	_tmp2_ = gtk_switch_get_active (_tmp1_);
	_tmp3_ = _tmp2_;
	g_settings_set_boolean (_tmp0_, "notifications-enabled", _tmp3_);
}


static void
__dialogs_settings___lambda28__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self)
{
	_dialogs_settings___lambda28_ (self);
}


static void
_dialogs_settings___lambda29_ (Block64Data* _data64_)
{
	DialogsSettings* self;
	GSettings* _tmp0_;
	GtkSwitch* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	self = _data64_->self;
	_tmp0_ = byte_settings;
	_tmp1_ = _data64_->settings_03_switch;
	_tmp2_ = gtk_switch_get_active (_tmp1_);
	_tmp3_ = _tmp2_;
	g_settings_set_boolean (_tmp0_, "play-in-background", _tmp3_);
}


static void
__dialogs_settings___lambda29__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self)
{
	_dialogs_settings___lambda29_ (self);
}


static void
_dialogs_settings___lambda30_ (Block64Data* _data64_)
{
	DialogsSettings* self;
	GSettings* _tmp0_;
	GtkSwitch* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	self = _data64_->self;
	_tmp0_ = byte_settings;
	_tmp1_ = _data64_->settings_05_switch;
	_tmp2_ = gtk_switch_get_active (_tmp1_);
	_tmp3_ = _tmp2_;
	g_settings_set_boolean (_tmp0_, "sync-files", _tmp3_);
}


static void
__dialogs_settings___lambda30__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self)
{
	_dialogs_settings___lambda30_ (self);
}


static void
_dialogs_settings___lambda31_ (Block64Data* _data64_)
{
	DialogsSettings* self;
	GSettings* _tmp0_;
	GtkSwitch* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	self = _data64_->self;
	_tmp0_ = byte_settings;
	_tmp1_ = _data64_->settings_06_switch;
	_tmp2_ = gtk_switch_get_active (_tmp1_);
	_tmp3_ = _tmp2_;
	g_settings_set_boolean (_tmp0_, "auto-download-covers", _tmp3_);
}


static void
__dialogs_settings___lambda31__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self)
{
	_dialogs_settings___lambda31_ (self);
}


static void
_dialogs_settings___lambda32_ (Block64Data* _data64_)
{
	DialogsSettings* self;
	GSettings* _tmp0_;
	GtkSwitch* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	self = _data64_->self;
	_tmp0_ = byte_settings;
	_tmp1_ = _data64_->settings_07_switch;
	_tmp2_ = gtk_switch_get_active (_tmp1_);
	_tmp3_ = _tmp2_;
	g_settings_set_boolean (_tmp0_, "save-id3-tags", _tmp3_);
}


static void
__dialogs_settings___lambda32__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self)
{
	_dialogs_settings___lambda32_ (self);
}


static void
_dialogs_settings___lambda33_ (Block64Data* _data64_)
{
	DialogsSettings* self;
	GraniteMessageDialog* message_dialog = NULL;
	GtkFileChooserButton* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GraniteMessageDialog* _tmp5_;
	GraniteMessageDialog* _tmp6_;
	GtkButton* set_button = NULL;
	GtkButton* _tmp7_;
	GtkButton* _tmp8_;
	GtkStyleContext* _tmp9_;
	GraniteMessageDialog* _tmp10_;
	GtkButton* _tmp11_;
	GraniteMessageDialog* _tmp12_;
	GraniteMessageDialog* _tmp13_;
	GraniteMessageDialog* _tmp22_;
	self = _data64_->self;
	_tmp0_ = _data64_->library_filechooser;
	_tmp1_ = gtk_file_chooser_get_filename ((GtkFileChooser*) _tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = g_strdup_printf (_ ("Are you sure you want to set the music folder to <b>%s</b>?"), _tmp2_);
	_tmp4_ = _tmp3_;
	_tmp5_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Set Music Folder?"), _tmp4_, "dialog-warning", GTK_BUTTONS_CANCEL);
	g_object_ref_sink (_tmp5_);
	_tmp6_ = _tmp5_;
	_g_free0 (_tmp4_);
	_g_free0 (_tmp2_);
	message_dialog = _tmp6_;
	_tmp7_ = (GtkButton*) gtk_button_new_with_label (_ ("Set Music Folder"));
	g_object_ref_sink (_tmp7_);
	set_button = _tmp7_;
	_tmp8_ = set_button;
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
	gtk_style_context_add_class (_tmp9_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
	_tmp10_ = message_dialog;
	_tmp11_ = set_button;
	gtk_dialog_add_action_widget ((GtkDialog*) _tmp10_, (GtkWidget*) _tmp11_, (gint) GTK_RESPONSE_ACCEPT);
	_tmp12_ = message_dialog;
	gtk_widget_show_all ((GtkWidget*) _tmp12_);
	_tmp13_ = message_dialog;
	if (gtk_dialog_run ((GtkDialog*) _tmp13_) == ((gint) GTK_RESPONSE_ACCEPT)) {
		GSettings* _tmp14_;
		GtkFileChooserButton* _tmp15_;
		gchar* _tmp16_;
		gchar* _tmp17_;
		ServicesScan* _tmp18_;
		GtkFileChooserButton* _tmp19_;
		gchar* _tmp20_;
		gchar* _tmp21_;
		_tmp14_ = byte_settings;
		_tmp15_ = _data64_->library_filechooser;
		_tmp16_ = gtk_file_chooser_get_uri ((GtkFileChooser*) _tmp15_);
		_tmp17_ = _tmp16_;
		g_settings_set_string (_tmp14_, "library-location", _tmp17_);
		_g_free0 (_tmp17_);
		_tmp18_ = byte_scan_service;
		_tmp19_ = _data64_->library_filechooser;
		_tmp20_ = gtk_file_chooser_get_uri ((GtkFileChooser*) _tmp19_);
		_tmp21_ = _tmp20_;
		services_scan_scan_local_files (_tmp18_, _tmp21_);
		_g_free0 (_tmp21_);
	}
	_tmp22_ = message_dialog;
	gtk_widget_destroy ((GtkWidget*) _tmp22_);
	_g_object_unref0 (set_button);
	_g_object_unref0 (message_dialog);
}


static void
__dialogs_settings___lambda33__gtk_file_chooser_button_file_set (GtkFileChooserButton* _sender,
                                                                 gpointer self)
{
	_dialogs_settings___lambda33_ (self);
}


static void
_dialogs_settings___lambda34_ (DialogsSettings* self)
{
	GraniteMessageDialog* message_dialog = NULL;
	GraniteMessageDialog* _tmp0_;
	GtkButton* remove_button = NULL;
	GtkButton* _tmp1_;
	GtkButton* _tmp2_;
	GtkStyleContext* _tmp3_;
	GraniteMessageDialog* _tmp4_;
	GtkButton* _tmp5_;
	GraniteMessageDialog* _tmp6_;
	GraniteMessageDialog* _tmp7_;
	GraniteMessageDialog* _tmp9_;
	_tmp0_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Reset your library?"), _ ("Are you sure you want to reset all your library?"), "dialog-warning", GTK_BUTTONS_CANCEL);
	g_object_ref_sink (_tmp0_);
	message_dialog = _tmp0_;
	_tmp1_ = (GtkButton*) gtk_button_new_with_label (_ ("Reset"));
	g_object_ref_sink (_tmp1_);
	remove_button = _tmp1_;
	_tmp2_ = remove_button;
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
	gtk_style_context_add_class (_tmp3_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
	_tmp4_ = message_dialog;
	_tmp5_ = remove_button;
	gtk_dialog_add_action_widget ((GtkDialog*) _tmp4_, (GtkWidget*) _tmp5_, (gint) GTK_RESPONSE_ACCEPT);
	_tmp6_ = message_dialog;
	gtk_widget_show_all ((GtkWidget*) _tmp6_);
	_tmp7_ = message_dialog;
	if (gtk_dialog_run ((GtkDialog*) _tmp7_) == ((gint) GTK_RESPONSE_ACCEPT)) {
		ServicesDatabase* _tmp8_;
		_tmp8_ = byte_database;
		services_database_reset_all_library (_tmp8_);
		gtk_widget_destroy ((GtkWidget*) self);
	}
	_tmp9_ = message_dialog;
	gtk_widget_destroy ((GtkWidget*) _tmp9_);
	_g_object_unref0 (remove_button);
	_g_object_unref0 (message_dialog);
}


static void
__dialogs_settings___lambda34__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
	_dialogs_settings___lambda34_ ((DialogsSettings*) self);
}


static void
_dialogs_settings___lambda35_ (DialogsSettings* self)
{
	GSettings* _tmp0_;
	Utils* _tmp1_;
	_tmp0_ = byte_settings;
	g_settings_set_enum (_tmp0_, "theme", 1);
	_tmp1_ = byte_utils;
	utils_apply_theme (_tmp1_, 1);
}


static void
__dialogs_settings___lambda35__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                          gpointer self)
{
	_dialogs_settings___lambda35_ ((DialogsSettings*) self);
}


static void
_dialogs_settings___lambda36_ (DialogsSettings* self)
{
	GSettings* _tmp0_;
	Utils* _tmp1_;
	_tmp0_ = byte_settings;
	g_settings_set_enum (_tmp0_, "theme", 2);
	_tmp1_ = byte_utils;
	utils_apply_theme (_tmp1_, 2);
}


static void
__dialogs_settings___lambda36__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                          gpointer self)
{
	_dialogs_settings___lambda36_ ((DialogsSettings*) self);
}


static void
_dialogs_settings___lambda37_ (DialogsSettings* self)
{
	GSettings* _tmp0_;
	Utils* _tmp1_;
	_tmp0_ = byte_settings;
	g_settings_set_enum (_tmp0_, "theme", 3);
	_tmp1_ = byte_utils;
	utils_apply_theme (_tmp1_, 3);
}


static void
__dialogs_settings___lambda37__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                          gpointer self)
{
	_dialogs_settings___lambda37_ ((DialogsSettings*) self);
}


static GObject *
dialogs_settings_constructor (GType type,
                              guint n_construct_properties,
                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsSettings * self;
	Block64Data* _data64_;
	GtkStyleContext* _tmp0_;
	GtkHeaderBar* header_bar = NULL;
	GtkWidget* _tmp1_;
	GtkHeaderBar* _tmp2_;
	GtkHeaderBar* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkHeaderBar* _tmp5_;
	GtkStyleContext* _tmp6_;
	GtkLabel* general_label = NULL;
	GtkLabel* _tmp7_;
	GtkLabel* _tmp8_;
	GtkLabel* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkLabel* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	GtkImage* settings_01_icon = NULL;
	GtkImage* _tmp15_;
	GtkImage* _tmp16_;
	GThemedIcon* _tmp17_;
	GThemedIcon* _tmp18_;
	GtkImage* _tmp19_;
	GtkImage* _tmp20_;
	GtkStyleContext* _tmp21_;
	GtkImage* _tmp22_;
	GtkLabel* settings_01_label = NULL;
	GtkLabel* _tmp23_;
	GtkRadioButton* theme_01 = NULL;
	GtkRadioButton* _tmp24_;
	GtkRadioButton* _tmp25_;
	GtkRadioButton* _tmp26_;
	GtkRadioButton* _tmp27_;
	GtkRadioButton* _tmp28_;
	GtkRadioButton* theme_02 = NULL;
	GtkRadioButton* _tmp29_;
	GtkRadioButton* _tmp30_;
	GtkRadioButton* _tmp31_;
	GtkRadioButton* _tmp32_;
	GtkRadioButton* _tmp33_;
	GtkRadioButton* _tmp34_;
	GtkRadioButton* theme_03 = NULL;
	GtkRadioButton* _tmp35_;
	GtkRadioButton* _tmp36_;
	GtkRadioButton* _tmp37_;
	GtkRadioButton* _tmp38_;
	GtkRadioButton* _tmp39_;
	GtkRadioButton* _tmp40_;
	GtkBox* theme_box = NULL;
	GtkBox* _tmp41_;
	GtkBox* _tmp42_;
	GtkRadioButton* _tmp43_;
	GtkBox* _tmp44_;
	GtkRadioButton* _tmp45_;
	GtkBox* _tmp46_;
	GtkRadioButton* _tmp47_;
	GSettings* _tmp48_;
	GtkBox* settings_01_box = NULL;
	GtkBox* _tmp52_;
	GtkBox* _tmp53_;
	GtkBox* _tmp54_;
	GtkBox* _tmp55_;
	GtkBox* _tmp56_;
	GtkImage* _tmp57_;
	GtkBox* _tmp58_;
	GtkLabel* _tmp59_;
	GtkBox* _tmp60_;
	GtkBox* _tmp61_;
	GtkImage* settings_02_icon = NULL;
	GtkImage* _tmp62_;
	GtkImage* _tmp63_;
	GThemedIcon* _tmp64_;
	GThemedIcon* _tmp65_;
	GtkImage* _tmp66_;
	GtkImage* _tmp67_;
	GtkStyleContext* _tmp68_;
	GtkImage* _tmp69_;
	GtkLabel* settings_02_label = NULL;
	GtkLabel* _tmp70_;
	GtkSwitch* _tmp71_;
	GtkSwitch* _tmp72_;
	GtkStyleContext* _tmp73_;
	GtkSwitch* _tmp74_;
	GtkSwitch* _tmp75_;
	GSettings* _tmp76_;
	GtkBox* settings_02_box = NULL;
	GtkBox* _tmp77_;
	GtkBox* _tmp78_;
	GtkBox* _tmp79_;
	GtkBox* _tmp80_;
	GtkImage* _tmp81_;
	GtkBox* _tmp82_;
	GtkLabel* _tmp83_;
	GtkBox* _tmp84_;
	GtkSwitch* _tmp85_;
	GtkImage* settings_03_icon = NULL;
	GtkImage* _tmp86_;
	GtkImage* _tmp87_;
	GThemedIcon* _tmp88_;
	GThemedIcon* _tmp89_;
	GtkImage* _tmp90_;
	GtkImage* _tmp91_;
	GtkStyleContext* _tmp92_;
	GtkImage* _tmp93_;
	GtkLabel* settings_03_label = NULL;
	GtkLabel* _tmp94_;
	GtkSwitch* _tmp95_;
	GtkSwitch* _tmp96_;
	GtkStyleContext* _tmp97_;
	GtkSwitch* _tmp98_;
	GtkSwitch* _tmp99_;
	GSettings* _tmp100_;
	GtkBox* settings_03_box = NULL;
	GtkBox* _tmp101_;
	GtkBox* _tmp102_;
	GtkBox* _tmp103_;
	GtkBox* _tmp104_;
	GtkImage* _tmp105_;
	GtkBox* _tmp106_;
	GtkLabel* _tmp107_;
	GtkBox* _tmp108_;
	GtkSwitch* _tmp109_;
	GtkGrid* general_grid = NULL;
	GtkGrid* _tmp110_;
	GtkGrid* _tmp111_;
	GtkStyleContext* _tmp112_;
	GtkGrid* _tmp113_;
	GtkGrid* _tmp114_;
	GtkGrid* _tmp115_;
	GtkSeparator* _tmp116_;
	GtkSeparator* _tmp117_;
	GtkGrid* _tmp118_;
	GtkBox* _tmp119_;
	GtkGrid* _tmp120_;
	GtkSeparator* _tmp121_;
	GtkSeparator* _tmp122_;
	GtkGrid* _tmp123_;
	GtkBox* _tmp124_;
	GtkGrid* _tmp125_;
	GtkSeparator* _tmp126_;
	GtkSeparator* _tmp127_;
	GtkGrid* _tmp128_;
	GtkBox* _tmp129_;
	GtkGrid* _tmp130_;
	GtkSeparator* _tmp131_;
	GtkSeparator* _tmp132_;
	GtkLabel* library_label = NULL;
	GtkLabel* _tmp133_;
	GtkLabel* _tmp134_;
	GtkLabel* _tmp135_;
	GtkStyleContext* _tmp136_;
	GtkLabel* _tmp137_;
	GtkStyleContext* _tmp138_;
	GtkLabel* _tmp139_;
	GtkImage* settings_04_icon = NULL;
	GtkImage* _tmp140_;
	GtkImage* _tmp141_;
	GThemedIcon* _tmp142_;
	GThemedIcon* _tmp143_;
	GtkImage* _tmp144_;
	GtkImage* _tmp145_;
	GtkStyleContext* _tmp146_;
	GtkImage* _tmp147_;
	GtkLabel* settings_04_label = NULL;
	GtkLabel* _tmp148_;
	GtkFileChooserButton* _tmp149_;
	GtkFileChooserButton* _tmp150_;
	GFile* library_path = NULL;
	GSettings* _tmp151_;
	gchar* _tmp152_;
	gchar* _tmp153_;
	GFile* _tmp154_;
	GFile* _tmp155_;
	GtkFileChooserButton* _tmp156_;
	GFile* _tmp157_;
	gchar* _tmp158_;
	gchar* _tmp159_;
	GtkBox* settings_04_box = NULL;
	GtkBox* _tmp160_;
	GtkBox* _tmp161_;
	GtkBox* _tmp162_;
	GtkBox* _tmp163_;
	GtkImage* _tmp164_;
	GtkBox* _tmp165_;
	GtkLabel* _tmp166_;
	GtkBox* _tmp167_;
	GtkFileChooserButton* _tmp168_;
	GtkImage* settings_05_icon = NULL;
	GtkImage* _tmp169_;
	GtkImage* _tmp170_;
	GThemedIcon* _tmp171_;
	GThemedIcon* _tmp172_;
	GtkImage* _tmp173_;
	GtkImage* _tmp174_;
	GtkStyleContext* _tmp175_;
	GtkImage* _tmp176_;
	GtkLabel* settings_05_label = NULL;
	GtkLabel* _tmp177_;
	GtkSwitch* _tmp178_;
	GtkSwitch* _tmp179_;
	GtkStyleContext* _tmp180_;
	GtkSwitch* _tmp181_;
	GtkSwitch* _tmp182_;
	GSettings* _tmp183_;
	GtkBox* settings_05_box = NULL;
	GtkBox* _tmp184_;
	GtkBox* _tmp185_;
	GtkBox* _tmp186_;
	GtkBox* _tmp187_;
	GtkImage* _tmp188_;
	GtkBox* _tmp189_;
	GtkLabel* _tmp190_;
	GtkBox* _tmp191_;
	GtkSwitch* _tmp192_;
	GtkImage* settings_06_icon = NULL;
	GtkImage* _tmp193_;
	GtkImage* _tmp194_;
	GThemedIcon* _tmp195_;
	GThemedIcon* _tmp196_;
	GtkImage* _tmp197_;
	GtkImage* _tmp198_;
	GtkStyleContext* _tmp199_;
	GtkImage* _tmp200_;
	GtkLabel* settings_06_label = NULL;
	GtkLabel* _tmp201_;
	GtkSwitch* _tmp202_;
	GtkSwitch* _tmp203_;
	GtkStyleContext* _tmp204_;
	GtkSwitch* _tmp205_;
	GtkSwitch* _tmp206_;
	GSettings* _tmp207_;
	GtkBox* settings_06_box = NULL;
	GtkBox* _tmp208_;
	GtkBox* _tmp209_;
	GtkBox* _tmp210_;
	GtkBox* _tmp211_;
	GtkImage* _tmp212_;
	GtkBox* _tmp213_;
	GtkLabel* _tmp214_;
	GtkBox* _tmp215_;
	GtkSwitch* _tmp216_;
	GtkImage* settings_07_icon = NULL;
	GtkImage* _tmp217_;
	GtkImage* _tmp218_;
	GThemedIcon* _tmp219_;
	GThemedIcon* _tmp220_;
	GtkImage* _tmp221_;
	GtkImage* _tmp222_;
	GtkStyleContext* _tmp223_;
	GtkImage* _tmp224_;
	GtkLabel* settings_07_label = NULL;
	GtkLabel* _tmp225_;
	GtkSwitch* _tmp226_;
	GtkSwitch* _tmp227_;
	GtkStyleContext* _tmp228_;
	GtkSwitch* _tmp229_;
	GtkSwitch* _tmp230_;
	GSettings* _tmp231_;
	GtkBox* settings_07_box = NULL;
	GtkBox* _tmp232_;
	GtkBox* _tmp233_;
	GtkBox* _tmp234_;
	GtkBox* _tmp235_;
	GtkImage* _tmp236_;
	GtkBox* _tmp237_;
	GtkLabel* _tmp238_;
	GtkBox* _tmp239_;
	GtkSwitch* _tmp240_;
	GtkGrid* library_grid = NULL;
	GtkGrid* _tmp241_;
	GtkGrid* _tmp242_;
	GtkStyleContext* _tmp243_;
	GtkGrid* _tmp244_;
	GtkGrid* _tmp245_;
	GtkGrid* _tmp246_;
	GtkSeparator* _tmp247_;
	GtkSeparator* _tmp248_;
	GtkGrid* _tmp249_;
	GtkBox* _tmp250_;
	GtkGrid* _tmp251_;
	GtkSeparator* _tmp252_;
	GtkSeparator* _tmp253_;
	GtkGrid* _tmp254_;
	GtkBox* _tmp255_;
	GtkGrid* _tmp256_;
	GtkSeparator* _tmp257_;
	GtkSeparator* _tmp258_;
	GtkGrid* _tmp259_;
	GtkBox* _tmp260_;
	GtkGrid* _tmp261_;
	GtkSeparator* _tmp262_;
	GtkSeparator* _tmp263_;
	GtkImage* settings_08_icon = NULL;
	GtkImage* _tmp264_;
	GtkImage* _tmp265_;
	GThemedIcon* _tmp266_;
	GThemedIcon* _tmp267_;
	GtkImage* _tmp268_;
	GtkImage* _tmp269_;
	GtkStyleContext* _tmp270_;
	GtkImage* _tmp271_;
	GtkLabel* settings_08_label = NULL;
	GtkLabel* _tmp272_;
	GtkButton* settings_08_button = NULL;
	GtkButton* _tmp273_;
	GtkButton* _tmp274_;
	GtkBox* settings_08_box = NULL;
	GtkBox* _tmp275_;
	GtkBox* _tmp276_;
	GtkBox* _tmp277_;
	GtkBox* _tmp278_;
	GtkBox* _tmp279_;
	GtkBox* _tmp280_;
	GtkImage* _tmp281_;
	GtkBox* _tmp282_;
	GtkLabel* _tmp283_;
	GtkBox* _tmp284_;
	GtkButton* _tmp285_;
	GtkGrid* settings_08_grid = NULL;
	GtkGrid* _tmp286_;
	GtkGrid* _tmp287_;
	GtkGrid* _tmp288_;
	GtkGrid* _tmp289_;
	GtkStyleContext* _tmp290_;
	GtkGrid* _tmp291_;
	GtkGrid* _tmp292_;
	GtkGrid* _tmp293_;
	GtkSeparator* _tmp294_;
	GtkSeparator* _tmp295_;
	GtkGrid* _tmp296_;
	GtkBox* _tmp297_;
	GtkGrid* _tmp298_;
	GtkSeparator* _tmp299_;
	GtkSeparator* _tmp300_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp301_;
	GtkGrid* _tmp302_;
	GtkLabel* _tmp303_;
	GtkGrid* _tmp304_;
	GtkGrid* _tmp305_;
	GtkGrid* _tmp306_;
	GtkLabel* _tmp307_;
	GtkGrid* _tmp308_;
	GtkGrid* _tmp309_;
	GtkGrid* _tmp310_;
	GtkGrid* _tmp311_;
	GtkBox* _tmp312_;
	GtkGrid* _tmp313_;
	GtkWidget* _tmp314_;
	GtkWidget* _tmp315_;
	GtkSwitch* _tmp316_;
	GtkSwitch* _tmp317_;
	GtkSwitch* _tmp318_;
	GtkSwitch* _tmp319_;
	GtkSwitch* _tmp320_;
	GtkFileChooserButton* _tmp321_;
	GtkButton* _tmp322_;
	GtkRadioButton* _tmp323_;
	GtkRadioButton* _tmp324_;
	GtkRadioButton* _tmp325_;
	parent_class = G_OBJECT_CLASS (dialogs_settings_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_TYPE_SETTINGS, DialogsSettings);
	_data64_ = g_slice_new0 (Block64Data);
	_data64_->_ref_count_ = 1;
	_data64_->self = g_object_ref (self);
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
	gtk_style_context_add_class (_tmp0_, "editor-titlebar");
	gtk_widget_set_size_request ((GtkWidget*) self, 550, -1);
	g_object_set ((GtkDialog*) self, "use-header-bar", 1, NULL);
	_tmp1_ = gtk_dialog_get_header_bar ((GtkDialog*) self);
	_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, gtk_header_bar_get_type (), GtkHeaderBar));
	header_bar = _tmp2_;
	_tmp3_ = header_bar;
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
	gtk_style_context_add_class (_tmp4_, GTK_STYLE_CLASS_FLAT);
	_tmp5_ = header_bar;
	_tmp6_ = gtk_widget_get_style_context ((GtkWidget*) _tmp5_);
	gtk_style_context_add_class (_tmp6_, "oauth-dialog");
	_tmp7_ = (GtkLabel*) gtk_label_new (_ ("General"));
	g_object_ref_sink (_tmp7_);
	general_label = _tmp7_;
	_tmp8_ = general_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp8_, GTK_ALIGN_START);
	_tmp9_ = general_label;
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
	gtk_style_context_add_class (_tmp10_, "h3");
	_tmp11_ = general_label;
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
	gtk_style_context_add_class (_tmp12_, "font-bold");
	_tmp13_ = general_label;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp13_, 6);
	_tmp14_ = general_label;
	gtk_widget_set_margin_start ((GtkWidget*) _tmp14_, 6);
	_tmp15_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp15_);
	settings_01_icon = _tmp15_;
	_tmp16_ = settings_01_icon;
	_tmp17_ = (GThemedIcon*) g_themed_icon_new ("applications-graphics-symbolic");
	_tmp18_ = _tmp17_;
	g_object_set (_tmp16_, "gicon", (GIcon*) _tmp18_, NULL);
	_g_object_unref0 (_tmp18_);
	_tmp19_ = settings_01_icon;
	gtk_image_set_pixel_size (_tmp19_, 16);
	_tmp20_ = settings_01_icon;
	_tmp21_ = gtk_widget_get_style_context ((GtkWidget*) _tmp20_);
	gtk_style_context_add_class (_tmp21_, "settings-icon");
	_tmp22_ = settings_01_icon;
	gtk_widget_set_valign ((GtkWidget*) _tmp22_, GTK_ALIGN_CENTER);
	_tmp23_ = (GtkLabel*) gtk_label_new (_ ("Theme"));
	g_object_ref_sink (_tmp23_);
	settings_01_label = _tmp23_;
	_tmp24_ = (GtkRadioButton*) gtk_radio_button_new (NULL);
	g_object_ref_sink (_tmp24_);
	theme_01 = _tmp24_;
	_tmp25_ = theme_01;
	gtk_widget_set_valign ((GtkWidget*) _tmp25_, GTK_ALIGN_START);
	_tmp26_ = theme_01;
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_START);
	_tmp27_ = theme_01;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp27_, _ ("Byte"));
	_tmp28_ = theme_01;
	dialogs_settings_apply_styles (self, "01", "#fe2851", _tmp28_);
	_tmp29_ = theme_01;
	_tmp30_ = (GtkRadioButton*) gtk_radio_button_new_from_widget (_tmp29_);
	g_object_ref_sink (_tmp30_);
	theme_02 = _tmp30_;
	_tmp31_ = theme_02;
	gtk_widget_set_valign ((GtkWidget*) _tmp31_, GTK_ALIGN_START);
	_tmp32_ = theme_02;
	gtk_widget_set_halign ((GtkWidget*) _tmp32_, GTK_ALIGN_START);
	_tmp33_ = theme_02;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp33_, _ ("Black"));
	_tmp34_ = theme_02;
	dialogs_settings_apply_styles (self, "02", "#333333", _tmp34_);
	_tmp35_ = theme_01;
	_tmp36_ = (GtkRadioButton*) gtk_radio_button_new_from_widget (_tmp35_);
	g_object_ref_sink (_tmp36_);
	theme_03 = _tmp36_;
	_tmp37_ = theme_03;
	gtk_widget_set_valign ((GtkWidget*) _tmp37_, GTK_ALIGN_START);
	_tmp38_ = theme_03;
	gtk_widget_set_halign ((GtkWidget*) _tmp38_, GTK_ALIGN_START);
	_tmp39_ = theme_03;
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp39_, _ ("Turquoise"));
	_tmp40_ = theme_03;
	dialogs_settings_apply_styles (self, "04", "#36E683", _tmp40_);
	_tmp41_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp41_);
	theme_box = _tmp41_;
	_tmp42_ = theme_box;
	_tmp43_ = theme_01;
	gtk_box_pack_start (_tmp42_, (GtkWidget*) _tmp43_, FALSE, FALSE, (guint) 6);
	_tmp44_ = theme_box;
	_tmp45_ = theme_02;
	gtk_box_pack_start (_tmp44_, (GtkWidget*) _tmp45_, FALSE, FALSE, (guint) 6);
	_tmp46_ = theme_box;
	_tmp47_ = theme_03;
	gtk_box_pack_start (_tmp46_, (GtkWidget*) _tmp47_, FALSE, FALSE, (guint) 6);
	_tmp48_ = byte_settings;
	switch (g_settings_get_enum (_tmp48_, "theme")) {
		case 1:
		{
			GtkRadioButton* _tmp49_;
			_tmp49_ = theme_01;
			gtk_toggle_button_set_active ((GtkToggleButton*) _tmp49_, TRUE);
			break;
		}
		case 2:
		{
			GtkRadioButton* _tmp50_;
			_tmp50_ = theme_02;
			gtk_toggle_button_set_active ((GtkToggleButton*) _tmp50_, TRUE);
			break;
		}
		case 3:
		{
			GtkRadioButton* _tmp51_;
			_tmp51_ = theme_03;
			gtk_toggle_button_set_active ((GtkToggleButton*) _tmp51_, TRUE);
			break;
		}
		default:
		break;
	}
	_tmp52_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp52_);
	settings_01_box = _tmp52_;
	_tmp53_ = settings_01_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp53_, TRUE);
	_tmp54_ = settings_01_box;
	g_object_set ((GtkWidget*) _tmp54_, "margin", 6, NULL);
	_tmp55_ = settings_01_box;
	gtk_widget_set_margin_end ((GtkWidget*) _tmp55_, 0);
	_tmp56_ = settings_01_box;
	_tmp57_ = settings_01_icon;
	gtk_box_pack_start (_tmp56_, (GtkWidget*) _tmp57_, FALSE, FALSE, (guint) 0);
	_tmp58_ = settings_01_box;
	_tmp59_ = settings_01_label;
	gtk_box_pack_start (_tmp58_, (GtkWidget*) _tmp59_, FALSE, FALSE, (guint) 6);
	_tmp60_ = settings_01_box;
	_tmp61_ = theme_box;
	gtk_box_pack_end (_tmp60_, (GtkWidget*) _tmp61_, FALSE, FALSE, (guint) 0);
	_tmp62_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp62_);
	settings_02_icon = _tmp62_;
	_tmp63_ = settings_02_icon;
	_tmp64_ = (GThemedIcon*) g_themed_icon_new ("preferences-system-notifications-symbolic");
	_tmp65_ = _tmp64_;
	g_object_set (_tmp63_, "gicon", (GIcon*) _tmp65_, NULL);
	_g_object_unref0 (_tmp65_);
	_tmp66_ = settings_02_icon;
	gtk_image_set_pixel_size (_tmp66_, 16);
	_tmp67_ = settings_02_icon;
	_tmp68_ = gtk_widget_get_style_context ((GtkWidget*) _tmp67_);
	gtk_style_context_add_class (_tmp68_, "settings-icon");
	_tmp69_ = settings_02_icon;
	gtk_widget_set_valign ((GtkWidget*) _tmp69_, GTK_ALIGN_CENTER);
	_tmp70_ = (GtkLabel*) gtk_label_new (_ ("Notifications"));
	g_object_ref_sink (_tmp70_);
	settings_02_label = _tmp70_;
	_tmp71_ = (GtkSwitch*) gtk_switch_new ();
	g_object_ref_sink (_tmp71_);
	_data64_->settings_02_switch = _tmp71_;
	_tmp72_ = _data64_->settings_02_switch;
	_tmp73_ = gtk_widget_get_style_context ((GtkWidget*) _tmp72_);
	gtk_style_context_add_class (_tmp73_, "active-switch");
	_tmp74_ = _data64_->settings_02_switch;
	gtk_widget_set_valign ((GtkWidget*) _tmp74_, GTK_ALIGN_CENTER);
	_tmp75_ = _data64_->settings_02_switch;
	_tmp76_ = byte_settings;
	gtk_switch_set_active (_tmp75_, g_settings_get_boolean (_tmp76_, "notifications-enabled"));
	_tmp77_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp77_);
	settings_02_box = _tmp77_;
	_tmp78_ = settings_02_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp78_, TRUE);
	_tmp79_ = settings_02_box;
	g_object_set ((GtkWidget*) _tmp79_, "margin", 6, NULL);
	_tmp80_ = settings_02_box;
	_tmp81_ = settings_02_icon;
	gtk_box_pack_start (_tmp80_, (GtkWidget*) _tmp81_, FALSE, FALSE, (guint) 0);
	_tmp82_ = settings_02_box;
	_tmp83_ = settings_02_label;
	gtk_box_pack_start (_tmp82_, (GtkWidget*) _tmp83_, FALSE, FALSE, (guint) 6);
	_tmp84_ = settings_02_box;
	_tmp85_ = _data64_->settings_02_switch;
	gtk_box_pack_end (_tmp84_, (GtkWidget*) _tmp85_, FALSE, FALSE, (guint) 0);
	_tmp86_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp86_);
	settings_03_icon = _tmp86_;
	_tmp87_ = settings_03_icon;
	_tmp88_ = (GThemedIcon*) g_themed_icon_new ("applications-system-symbolic");
	_tmp89_ = _tmp88_;
	g_object_set (_tmp87_, "gicon", (GIcon*) _tmp89_, NULL);
	_g_object_unref0 (_tmp89_);
	_tmp90_ = settings_03_icon;
	gtk_image_set_pixel_size (_tmp90_, 16);
	_tmp91_ = settings_03_icon;
	_tmp92_ = gtk_widget_get_style_context ((GtkWidget*) _tmp91_);
	gtk_style_context_add_class (_tmp92_, "settings-icon");
	_tmp93_ = settings_03_icon;
	gtk_widget_set_valign ((GtkWidget*) _tmp93_, GTK_ALIGN_CENTER);
	_tmp94_ = (GtkLabel*) gtk_label_new (_ ("Play in background if closed"));
	g_object_ref_sink (_tmp94_);
	settings_03_label = _tmp94_;
	_tmp95_ = (GtkSwitch*) gtk_switch_new ();
	g_object_ref_sink (_tmp95_);
	_data64_->settings_03_switch = _tmp95_;
	_tmp96_ = _data64_->settings_03_switch;
	_tmp97_ = gtk_widget_get_style_context ((GtkWidget*) _tmp96_);
	gtk_style_context_add_class (_tmp97_, "active-switch");
	_tmp98_ = _data64_->settings_03_switch;
	gtk_widget_set_valign ((GtkWidget*) _tmp98_, GTK_ALIGN_CENTER);
	_tmp99_ = _data64_->settings_03_switch;
	_tmp100_ = byte_settings;
	gtk_switch_set_active (_tmp99_, g_settings_get_boolean (_tmp100_, "play-in-background"));
	_tmp101_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp101_);
	settings_03_box = _tmp101_;
	_tmp102_ = settings_03_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp102_, TRUE);
	_tmp103_ = settings_03_box;
	g_object_set ((GtkWidget*) _tmp103_, "margin", 6, NULL);
	_tmp104_ = settings_03_box;
	_tmp105_ = settings_03_icon;
	gtk_box_pack_start (_tmp104_, (GtkWidget*) _tmp105_, FALSE, FALSE, (guint) 0);
	_tmp106_ = settings_03_box;
	_tmp107_ = settings_03_label;
	gtk_box_pack_start (_tmp106_, (GtkWidget*) _tmp107_, FALSE, FALSE, (guint) 6);
	_tmp108_ = settings_03_box;
	_tmp109_ = _data64_->settings_03_switch;
	gtk_box_pack_end (_tmp108_, (GtkWidget*) _tmp109_, FALSE, FALSE, (guint) 0);
	_tmp110_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp110_);
	general_grid = _tmp110_;
	_tmp111_ = general_grid;
	_tmp112_ = gtk_widget_get_style_context ((GtkWidget*) _tmp111_);
	gtk_style_context_add_class (_tmp112_, "view");
	_tmp113_ = general_grid;
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp113_, GTK_ORIENTATION_VERTICAL);
	_tmp114_ = general_grid;
	gtk_grid_set_row_spacing (_tmp114_, 3);
	_tmp115_ = general_grid;
	_tmp116_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp116_);
	_tmp117_ = _tmp116_;
	gtk_container_add ((GtkContainer*) _tmp115_, (GtkWidget*) _tmp117_);
	_g_object_unref0 (_tmp117_);
	_tmp118_ = general_grid;
	_tmp119_ = settings_01_box;
	gtk_container_add ((GtkContainer*) _tmp118_, (GtkWidget*) _tmp119_);
	_tmp120_ = general_grid;
	_tmp121_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp121_);
	_tmp122_ = _tmp121_;
	gtk_container_add ((GtkContainer*) _tmp120_, (GtkWidget*) _tmp122_);
	_g_object_unref0 (_tmp122_);
	_tmp123_ = general_grid;
	_tmp124_ = settings_02_box;
	gtk_container_add ((GtkContainer*) _tmp123_, (GtkWidget*) _tmp124_);
	_tmp125_ = general_grid;
	_tmp126_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp126_);
	_tmp127_ = _tmp126_;
	gtk_container_add ((GtkContainer*) _tmp125_, (GtkWidget*) _tmp127_);
	_g_object_unref0 (_tmp127_);
	_tmp128_ = general_grid;
	_tmp129_ = settings_03_box;
	gtk_container_add ((GtkContainer*) _tmp128_, (GtkWidget*) _tmp129_);
	_tmp130_ = general_grid;
	_tmp131_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp131_);
	_tmp132_ = _tmp131_;
	gtk_container_add ((GtkContainer*) _tmp130_, (GtkWidget*) _tmp132_);
	_g_object_unref0 (_tmp132_);
	_tmp133_ = (GtkLabel*) gtk_label_new (_ ("Library"));
	g_object_ref_sink (_tmp133_);
	library_label = _tmp133_;
	_tmp134_ = library_label;
	gtk_widget_set_halign ((GtkWidget*) _tmp134_, GTK_ALIGN_START);
	_tmp135_ = library_label;
	_tmp136_ = gtk_widget_get_style_context ((GtkWidget*) _tmp135_);
	gtk_style_context_add_class (_tmp136_, "h3");
	_tmp137_ = library_label;
	_tmp138_ = gtk_widget_get_style_context ((GtkWidget*) _tmp137_);
	gtk_style_context_add_class (_tmp138_, "font-bold");
	_tmp139_ = library_label;
	g_object_set ((GtkWidget*) _tmp139_, "margin", 6, NULL);
	_tmp140_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp140_);
	settings_04_icon = _tmp140_;
	_tmp141_ = settings_04_icon;
	_tmp142_ = (GThemedIcon*) g_themed_icon_new ("folder-music-symbolic");
	_tmp143_ = _tmp142_;
	g_object_set (_tmp141_, "gicon", (GIcon*) _tmp143_, NULL);
	_g_object_unref0 (_tmp143_);
	_tmp144_ = settings_04_icon;
	gtk_image_set_pixel_size (_tmp144_, 16);
	_tmp145_ = settings_04_icon;
	_tmp146_ = gtk_widget_get_style_context ((GtkWidget*) _tmp145_);
	gtk_style_context_add_class (_tmp146_, "settings-icon");
	_tmp147_ = settings_04_icon;
	gtk_widget_set_valign ((GtkWidget*) _tmp147_, GTK_ALIGN_CENTER);
	_tmp148_ = (GtkLabel*) gtk_label_new (_ ("Music folder location"));
	g_object_ref_sink (_tmp148_);
	settings_04_label = _tmp148_;
	_tmp149_ = (GtkFileChooserButton*) gtk_file_chooser_button_new (_ ("Select Music Folder…"), GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER);
	g_object_ref_sink (_tmp149_);
	_data64_->library_filechooser = _tmp149_;
	_tmp150_ = _data64_->library_filechooser;
	gtk_widget_set_valign ((GtkWidget*) _tmp150_, GTK_ALIGN_CENTER);
	_tmp151_ = byte_settings;
	_tmp152_ = g_settings_get_string (_tmp151_, "library-location");
	_tmp153_ = _tmp152_;
	_tmp154_ = g_file_new_for_uri (_tmp153_);
	_tmp155_ = _tmp154_;
	_g_free0 (_tmp153_);
	library_path = _tmp155_;
	_tmp156_ = _data64_->library_filechooser;
	_tmp157_ = library_path;
	_tmp158_ = g_file_get_path (_tmp157_);
	_tmp159_ = _tmp158_;
	gtk_file_chooser_set_current_folder ((GtkFileChooser*) _tmp156_, _tmp159_);
	_g_free0 (_tmp159_);
	_tmp160_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp160_);
	settings_04_box = _tmp160_;
	_tmp161_ = settings_04_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp161_, TRUE);
	_tmp162_ = settings_04_box;
	g_object_set ((GtkWidget*) _tmp162_, "margin", 6, NULL);
	_tmp163_ = settings_04_box;
	_tmp164_ = settings_04_icon;
	gtk_box_pack_start (_tmp163_, (GtkWidget*) _tmp164_, FALSE, FALSE, (guint) 0);
	_tmp165_ = settings_04_box;
	_tmp166_ = settings_04_label;
	gtk_box_pack_start (_tmp165_, (GtkWidget*) _tmp166_, FALSE, FALSE, (guint) 6);
	_tmp167_ = settings_04_box;
	_tmp168_ = _data64_->library_filechooser;
	gtk_box_pack_end (_tmp167_, (GtkWidget*) _tmp168_, FALSE, FALSE, (guint) 0);
	_tmp169_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp169_);
	settings_05_icon = _tmp169_;
	_tmp170_ = settings_05_icon;
	_tmp171_ = (GThemedIcon*) g_themed_icon_new ("emblem-synchronizing-symbolic");
	_tmp172_ = _tmp171_;
	g_object_set (_tmp170_, "gicon", (GIcon*) _tmp172_, NULL);
	_g_object_unref0 (_tmp172_);
	_tmp173_ = settings_05_icon;
	gtk_image_set_pixel_size (_tmp173_, 16);
	_tmp174_ = settings_05_icon;
	_tmp175_ = gtk_widget_get_style_context ((GtkWidget*) _tmp174_);
	gtk_style_context_add_class (_tmp175_, "settings-icon");
	_tmp176_ = settings_05_icon;
	gtk_widget_set_valign ((GtkWidget*) _tmp176_, GTK_ALIGN_CENTER);
	_tmp177_ = (GtkLabel*) gtk_label_new (_ ("Sync library on start up"));
	g_object_ref_sink (_tmp177_);
	settings_05_label = _tmp177_;
	_tmp178_ = (GtkSwitch*) gtk_switch_new ();
	g_object_ref_sink (_tmp178_);
	_data64_->settings_05_switch = _tmp178_;
	_tmp179_ = _data64_->settings_05_switch;
	_tmp180_ = gtk_widget_get_style_context ((GtkWidget*) _tmp179_);
	gtk_style_context_add_class (_tmp180_, "active-switch");
	_tmp181_ = _data64_->settings_05_switch;
	gtk_widget_set_valign ((GtkWidget*) _tmp181_, GTK_ALIGN_CENTER);
	_tmp182_ = _data64_->settings_05_switch;
	_tmp183_ = byte_settings;
	gtk_switch_set_active (_tmp182_, g_settings_get_boolean (_tmp183_, "sync-files"));
	_tmp184_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp184_);
	settings_05_box = _tmp184_;
	_tmp185_ = settings_05_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp185_, TRUE);
	_tmp186_ = settings_05_box;
	g_object_set ((GtkWidget*) _tmp186_, "margin", 6, NULL);
	_tmp187_ = settings_05_box;
	_tmp188_ = settings_05_icon;
	gtk_box_pack_start (_tmp187_, (GtkWidget*) _tmp188_, FALSE, FALSE, (guint) 0);
	_tmp189_ = settings_05_box;
	_tmp190_ = settings_05_label;
	gtk_box_pack_start (_tmp189_, (GtkWidget*) _tmp190_, FALSE, FALSE, (guint) 6);
	_tmp191_ = settings_05_box;
	_tmp192_ = _data64_->settings_05_switch;
	gtk_box_pack_end (_tmp191_, (GtkWidget*) _tmp192_, FALSE, FALSE, (guint) 0);
	_tmp193_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp193_);
	settings_06_icon = _tmp193_;
	_tmp194_ = settings_06_icon;
	_tmp195_ = (GThemedIcon*) g_themed_icon_new ("folder-download-symbolic");
	_tmp196_ = _tmp195_;
	g_object_set (_tmp194_, "gicon", (GIcon*) _tmp196_, NULL);
	_g_object_unref0 (_tmp196_);
	_tmp197_ = settings_06_icon;
	gtk_image_set_pixel_size (_tmp197_, 16);
	_tmp198_ = settings_06_icon;
	_tmp199_ = gtk_widget_get_style_context ((GtkWidget*) _tmp198_);
	gtk_style_context_add_class (_tmp199_, "settings-icon");
	_tmp200_ = settings_06_icon;
	gtk_widget_set_valign ((GtkWidget*) _tmp200_, GTK_ALIGN_CENTER);
	_tmp201_ = (GtkLabel*) gtk_label_new (_ ("Automatically download covers"));
	g_object_ref_sink (_tmp201_);
	settings_06_label = _tmp201_;
	_tmp202_ = (GtkSwitch*) gtk_switch_new ();
	g_object_ref_sink (_tmp202_);
	_data64_->settings_06_switch = _tmp202_;
	_tmp203_ = _data64_->settings_06_switch;
	_tmp204_ = gtk_widget_get_style_context ((GtkWidget*) _tmp203_);
	gtk_style_context_add_class (_tmp204_, "active-switch");
	_tmp205_ = _data64_->settings_06_switch;
	gtk_widget_set_valign ((GtkWidget*) _tmp205_, GTK_ALIGN_CENTER);
	_tmp206_ = _data64_->settings_06_switch;
	_tmp207_ = byte_settings;
	gtk_switch_set_active (_tmp206_, g_settings_get_boolean (_tmp207_, "auto-download-covers"));
	_tmp208_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp208_);
	settings_06_box = _tmp208_;
	_tmp209_ = settings_06_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp209_, TRUE);
	_tmp210_ = settings_06_box;
	g_object_set ((GtkWidget*) _tmp210_, "margin", 6, NULL);
	_tmp211_ = settings_06_box;
	_tmp212_ = settings_06_icon;
	gtk_box_pack_start (_tmp211_, (GtkWidget*) _tmp212_, FALSE, FALSE, (guint) 0);
	_tmp213_ = settings_06_box;
	_tmp214_ = settings_06_label;
	gtk_box_pack_start (_tmp213_, (GtkWidget*) _tmp214_, FALSE, FALSE, (guint) 6);
	_tmp215_ = settings_06_box;
	_tmp216_ = _data64_->settings_06_switch;
	gtk_box_pack_end (_tmp215_, (GtkWidget*) _tmp216_, FALSE, FALSE, (guint) 0);
	_tmp217_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp217_);
	settings_07_icon = _tmp217_;
	_tmp218_ = settings_07_icon;
	_tmp219_ = (GThemedIcon*) g_themed_icon_new ("text-x-generic-symbolic");
	_tmp220_ = _tmp219_;
	g_object_set (_tmp218_, "gicon", (GIcon*) _tmp220_, NULL);
	_g_object_unref0 (_tmp220_);
	_tmp221_ = settings_07_icon;
	gtk_image_set_pixel_size (_tmp221_, 16);
	_tmp222_ = settings_07_icon;
	_tmp223_ = gtk_widget_get_style_context ((GtkWidget*) _tmp222_);
	gtk_style_context_add_class (_tmp223_, "settings-icon");
	_tmp224_ = settings_07_icon;
	gtk_widget_set_valign ((GtkWidget*) _tmp224_, GTK_ALIGN_CENTER);
	_tmp225_ = (GtkLabel*) gtk_label_new (_ ("Save changes into ID3-Tag"));
	g_object_ref_sink (_tmp225_);
	settings_07_label = _tmp225_;
	_tmp226_ = (GtkSwitch*) gtk_switch_new ();
	g_object_ref_sink (_tmp226_);
	_data64_->settings_07_switch = _tmp226_;
	_tmp227_ = _data64_->settings_07_switch;
	_tmp228_ = gtk_widget_get_style_context ((GtkWidget*) _tmp227_);
	gtk_style_context_add_class (_tmp228_, "active-switch");
	_tmp229_ = _data64_->settings_07_switch;
	gtk_widget_set_valign ((GtkWidget*) _tmp229_, GTK_ALIGN_CENTER);
	_tmp230_ = _data64_->settings_07_switch;
	_tmp231_ = byte_settings;
	gtk_switch_set_active (_tmp230_, g_settings_get_boolean (_tmp231_, "save-id3-tags"));
	_tmp232_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp232_);
	settings_07_box = _tmp232_;
	_tmp233_ = settings_07_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp233_, TRUE);
	_tmp234_ = settings_07_box;
	g_object_set ((GtkWidget*) _tmp234_, "margin", 6, NULL);
	_tmp235_ = settings_07_box;
	_tmp236_ = settings_07_icon;
	gtk_box_pack_start (_tmp235_, (GtkWidget*) _tmp236_, FALSE, FALSE, (guint) 0);
	_tmp237_ = settings_07_box;
	_tmp238_ = settings_07_label;
	gtk_box_pack_start (_tmp237_, (GtkWidget*) _tmp238_, FALSE, FALSE, (guint) 6);
	_tmp239_ = settings_07_box;
	_tmp240_ = _data64_->settings_07_switch;
	gtk_box_pack_end (_tmp239_, (GtkWidget*) _tmp240_, FALSE, FALSE, (guint) 0);
	_tmp241_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp241_);
	library_grid = _tmp241_;
	_tmp242_ = library_grid;
	_tmp243_ = gtk_widget_get_style_context ((GtkWidget*) _tmp242_);
	gtk_style_context_add_class (_tmp243_, "view");
	_tmp244_ = library_grid;
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp244_, GTK_ORIENTATION_VERTICAL);
	_tmp245_ = library_grid;
	gtk_grid_set_row_spacing (_tmp245_, 3);
	_tmp246_ = library_grid;
	_tmp247_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp247_);
	_tmp248_ = _tmp247_;
	gtk_container_add ((GtkContainer*) _tmp246_, (GtkWidget*) _tmp248_);
	_g_object_unref0 (_tmp248_);
	_tmp249_ = library_grid;
	_tmp250_ = settings_04_box;
	gtk_container_add ((GtkContainer*) _tmp249_, (GtkWidget*) _tmp250_);
	_tmp251_ = library_grid;
	_tmp252_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp252_);
	_tmp253_ = _tmp252_;
	gtk_container_add ((GtkContainer*) _tmp251_, (GtkWidget*) _tmp253_);
	_g_object_unref0 (_tmp253_);
	_tmp254_ = library_grid;
	_tmp255_ = settings_05_box;
	gtk_container_add ((GtkContainer*) _tmp254_, (GtkWidget*) _tmp255_);
	_tmp256_ = library_grid;
	_tmp257_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp257_);
	_tmp258_ = _tmp257_;
	gtk_container_add ((GtkContainer*) _tmp256_, (GtkWidget*) _tmp258_);
	_g_object_unref0 (_tmp258_);
	_tmp259_ = library_grid;
	_tmp260_ = settings_06_box;
	gtk_container_add ((GtkContainer*) _tmp259_, (GtkWidget*) _tmp260_);
	_tmp261_ = library_grid;
	_tmp262_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp262_);
	_tmp263_ = _tmp262_;
	gtk_container_add ((GtkContainer*) _tmp261_, (GtkWidget*) _tmp263_);
	_g_object_unref0 (_tmp263_);
	_tmp264_ = (GtkImage*) gtk_image_new ();
	g_object_ref_sink (_tmp264_);
	settings_08_icon = _tmp264_;
	_tmp265_ = settings_08_icon;
	_tmp266_ = (GThemedIcon*) g_themed_icon_new ("user-trash-symbolic");
	_tmp267_ = _tmp266_;
	g_object_set (_tmp265_, "gicon", (GIcon*) _tmp267_, NULL);
	_g_object_unref0 (_tmp267_);
	_tmp268_ = settings_08_icon;
	gtk_image_set_pixel_size (_tmp268_, 16);
	_tmp269_ = settings_08_icon;
	_tmp270_ = gtk_widget_get_style_context ((GtkWidget*) _tmp269_);
	gtk_style_context_add_class (_tmp270_, "settings-icon");
	_tmp271_ = settings_08_icon;
	gtk_widget_set_valign ((GtkWidget*) _tmp271_, GTK_ALIGN_CENTER);
	_tmp272_ = (GtkLabel*) gtk_label_new (_ ("Reset all library"));
	g_object_ref_sink (_tmp272_);
	settings_08_label = _tmp272_;
	_tmp273_ = (GtkButton*) gtk_button_new_with_label (_ ("Reset"));
	g_object_ref_sink (_tmp273_);
	settings_08_button = _tmp273_;
	_tmp274_ = settings_08_button;
	gtk_widget_set_valign ((GtkWidget*) _tmp274_, GTK_ALIGN_CENTER);
	_tmp275_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp275_);
	settings_08_box = _tmp275_;
	_tmp276_ = settings_08_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp276_, TRUE);
	_tmp277_ = settings_08_box;
	g_object_set ((GtkWidget*) _tmp277_, "margin", 6, NULL);
	_tmp278_ = settings_08_box;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp278_, 3);
	_tmp279_ = settings_08_box;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp279_, 3);
	_tmp280_ = settings_08_box;
	_tmp281_ = settings_08_icon;
	gtk_box_pack_start (_tmp280_, (GtkWidget*) _tmp281_, FALSE, FALSE, (guint) 0);
	_tmp282_ = settings_08_box;
	_tmp283_ = settings_08_label;
	gtk_box_pack_start (_tmp282_, (GtkWidget*) _tmp283_, FALSE, FALSE, (guint) 6);
	_tmp284_ = settings_08_box;
	_tmp285_ = settings_08_button;
	gtk_box_pack_end (_tmp284_, (GtkWidget*) _tmp285_, FALSE, FALSE, (guint) 0);
	_tmp286_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp286_);
	settings_08_grid = _tmp286_;
	_tmp287_ = settings_08_grid;
	gtk_widget_set_margin_top ((GtkWidget*) _tmp287_, 12);
	_tmp288_ = settings_08_grid;
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp288_, 12);
	_tmp289_ = settings_08_grid;
	_tmp290_ = gtk_widget_get_style_context ((GtkWidget*) _tmp289_);
	gtk_style_context_add_class (_tmp290_, "view");
	_tmp291_ = settings_08_grid;
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp291_, GTK_ORIENTATION_VERTICAL);
	_tmp292_ = settings_08_grid;
	gtk_grid_set_row_spacing (_tmp292_, 3);
	_tmp293_ = settings_08_grid;
	_tmp294_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp294_);
	_tmp295_ = _tmp294_;
	gtk_container_add ((GtkContainer*) _tmp293_, (GtkWidget*) _tmp295_);
	_g_object_unref0 (_tmp295_);
	_tmp296_ = settings_08_grid;
	_tmp297_ = settings_08_box;
	gtk_container_add ((GtkContainer*) _tmp296_, (GtkWidget*) _tmp297_);
	_tmp298_ = settings_08_grid;
	_tmp299_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
	g_object_ref_sink (_tmp299_);
	_tmp300_ = _tmp299_;
	gtk_container_add ((GtkContainer*) _tmp298_, (GtkWidget*) _tmp300_);
	_g_object_unref0 (_tmp300_);
	_tmp301_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp301_);
	main_grid = _tmp301_;
	_tmp302_ = main_grid;
	_tmp303_ = general_label;
	gtk_grid_attach (_tmp302_, (GtkWidget*) _tmp303_, 0, 0, 1, 1);
	_tmp304_ = main_grid;
	_tmp305_ = general_grid;
	gtk_grid_attach (_tmp304_, (GtkWidget*) _tmp305_, 0, 1, 1, 1);
	_tmp306_ = main_grid;
	_tmp307_ = library_label;
	gtk_grid_attach (_tmp306_, (GtkWidget*) _tmp307_, 0, 2, 1, 1);
	_tmp308_ = main_grid;
	_tmp309_ = library_grid;
	gtk_grid_attach (_tmp308_, (GtkWidget*) _tmp309_, 0, 3, 1, 1);
	_tmp310_ = main_grid;
	_tmp311_ = settings_08_grid;
	gtk_grid_attach (_tmp310_, (GtkWidget*) _tmp311_, 0, 4, 1, 1);
	_tmp312_ = gtk_dialog_get_content_area ((GtkDialog*) self);
	_tmp313_ = main_grid;
	gtk_container_add ((GtkContainer*) _tmp312_, (GtkWidget*) _tmp313_);
	_tmp314_ = gtk_dialog_get_action_area ((GtkDialog*) self);
	gtk_widget_set_visible (_tmp314_, FALSE);
	_tmp315_ = gtk_dialog_get_action_area ((GtkDialog*) self);
	gtk_widget_set_no_show_all (_tmp315_, TRUE);
	_tmp316_ = _data64_->settings_02_switch;
	g_signal_connect_data ((GObject*) _tmp316_, "notify::active", (GCallback) __dialogs_settings___lambda28__g_object_notify, block64_data_ref (_data64_), (GClosureNotify) block64_data_unref, 0);
	_tmp317_ = _data64_->settings_03_switch;
	g_signal_connect_data ((GObject*) _tmp317_, "notify::active", (GCallback) __dialogs_settings___lambda29__g_object_notify, block64_data_ref (_data64_), (GClosureNotify) block64_data_unref, 0);
	_tmp318_ = _data64_->settings_05_switch;
	g_signal_connect_data ((GObject*) _tmp318_, "notify::active", (GCallback) __dialogs_settings___lambda30__g_object_notify, block64_data_ref (_data64_), (GClosureNotify) block64_data_unref, 0);
	_tmp319_ = _data64_->settings_06_switch;
	g_signal_connect_data ((GObject*) _tmp319_, "notify::active", (GCallback) __dialogs_settings___lambda31__g_object_notify, block64_data_ref (_data64_), (GClosureNotify) block64_data_unref, 0);
	_tmp320_ = _data64_->settings_07_switch;
	g_signal_connect_data ((GObject*) _tmp320_, "notify::active", (GCallback) __dialogs_settings___lambda32__g_object_notify, block64_data_ref (_data64_), (GClosureNotify) block64_data_unref, 0);
	_tmp321_ = _data64_->library_filechooser;
	g_signal_connect_data (_tmp321_, "file-set", (GCallback) __dialogs_settings___lambda33__gtk_file_chooser_button_file_set, block64_data_ref (_data64_), (GClosureNotify) block64_data_unref, 0);
	_tmp322_ = settings_08_button;
	g_signal_connect_object (_tmp322_, "clicked", (GCallback) __dialogs_settings___lambda34__gtk_button_clicked, self, 0);
	_tmp323_ = theme_01;
	g_signal_connect_object ((GtkToggleButton*) _tmp323_, "toggled", (GCallback) __dialogs_settings___lambda35__gtk_toggle_button_toggled, self, 0);
	_tmp324_ = theme_02;
	g_signal_connect_object ((GtkToggleButton*) _tmp324_, "toggled", (GCallback) __dialogs_settings___lambda36__gtk_toggle_button_toggled, self, 0);
	_tmp325_ = theme_03;
	g_signal_connect_object ((GtkToggleButton*) _tmp325_, "toggled", (GCallback) __dialogs_settings___lambda37__gtk_toggle_button_toggled, self, 0);
	_g_object_unref0 (main_grid);
	_g_object_unref0 (settings_08_grid);
	_g_object_unref0 (settings_08_box);
	_g_object_unref0 (settings_08_button);
	_g_object_unref0 (settings_08_label);
	_g_object_unref0 (settings_08_icon);
	_g_object_unref0 (library_grid);
	_g_object_unref0 (settings_07_box);
	_g_object_unref0 (settings_07_label);
	_g_object_unref0 (settings_07_icon);
	_g_object_unref0 (settings_06_box);
	_g_object_unref0 (settings_06_label);
	_g_object_unref0 (settings_06_icon);
	_g_object_unref0 (settings_05_box);
	_g_object_unref0 (settings_05_label);
	_g_object_unref0 (settings_05_icon);
	_g_object_unref0 (settings_04_box);
	_g_object_unref0 (library_path);
	_g_object_unref0 (settings_04_label);
	_g_object_unref0 (settings_04_icon);
	_g_object_unref0 (library_label);
	_g_object_unref0 (general_grid);
	_g_object_unref0 (settings_03_box);
	_g_object_unref0 (settings_03_label);
	_g_object_unref0 (settings_03_icon);
	_g_object_unref0 (settings_02_box);
	_g_object_unref0 (settings_02_label);
	_g_object_unref0 (settings_02_icon);
	_g_object_unref0 (settings_01_box);
	_g_object_unref0 (theme_box);
	_g_object_unref0 (theme_03);
	_g_object_unref0 (theme_02);
	_g_object_unref0 (theme_01);
	_g_object_unref0 (settings_01_label);
	_g_object_unref0 (settings_01_icon);
	_g_object_unref0 (general_label);
	_g_object_unref0 (header_bar);
	block64_data_unref (_data64_);
	_data64_ = NULL;
	return obj;
}


static void
dialogs_settings_class_init (DialogsSettingsClass * klass)
{
	dialogs_settings_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->constructor = dialogs_settings_constructor;
}


static void
dialogs_settings_instance_init (DialogsSettings * self)
{
}


GType
dialogs_settings_get_type (void)
{
	static volatile gsize dialogs_settings_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_settings_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (DialogsSettingsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_settings_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsSettings), 0, (GInstanceInitFunc) dialogs_settings_instance_init, NULL };
		GType dialogs_settings_type_id;
		dialogs_settings_type_id = g_type_register_static (gtk_dialog_get_type (), "DialogsSettings", &g_define_type_info, 0);
		g_once_init_leave (&dialogs_settings_type_id__volatile, dialogs_settings_type_id);
	}
	return dialogs_settings_type_id__volatile;
}



