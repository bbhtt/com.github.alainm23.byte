/* Cover.c generated by valac 0.40.11, the Vala compiler
 * generated from Cover.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <cairo.h>
#include <gdk/gdk.h>
#include <gio/gio.h>
#include <stdio.h>
#include <granite.h>
#include <float.h>
#include <math.h>


#define WIDGETS_TYPE_COVER (widgets_cover_get_type ())
#define WIDGETS_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COVER, WidgetsCover))
#define WIDGETS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COVER, WidgetsCoverClass))
#define WIDGETS_IS_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COVER))
#define WIDGETS_IS_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COVER))
#define WIDGETS_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COVER, WidgetsCoverClass))

typedef struct _WidgetsCover WidgetsCover;
typedef struct _WidgetsCoverClass WidgetsCoverClass;
typedef struct _WidgetsCoverPrivate WidgetsCoverPrivate;
enum  {
	WIDGETS_COVER_0_PROPERTY,
	WIDGETS_COVER_PIXBUF_PROPERTY,
	WIDGETS_COVER_NUM_PROPERTIES
};
static GParamSpec* widgets_cover_properties[WIDGETS_COVER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _WidgetsCoverSetFromFileAsyncData WidgetsCoverSetFromFileAsyncData;

struct _WidgetsCover {
	GtkEventBox parent_instance;
	WidgetsCoverPrivate * priv;
};

struct _WidgetsCoverClass {
	GtkEventBoxClass parent_class;
};

struct _WidgetsCoverPrivate {
	gchar* DEFAULT_ICON;
	gboolean draw_theme_background;
	gboolean is_default;
	gchar* orig_filename;
	gint* orig_pixel_size;
	gchar* orig_type;
	GdkPixbuf* _pixbuf;
};

struct _WidgetsCoverSetFromFileAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	WidgetsCover* self;
	GFile* file;
	gint pixel_size;
	gboolean preserve_aspect_ratio;
	GCancellable* cancellable;
	GFileInputStream* stream;
	GFileInputStream* _tmp0_;
	GdkPixbuf* _tmp1_;
	GFileInputStream* _tmp2_;
	GdkPixbuf* _tmp3_;
	GError* e;
	GError* _tmp4_;
	GError* _tmp5_;
	GError * _inner_error_;
};


static gpointer widgets_cover_parent_class = NULL;

GType widgets_cover_get_type (void) G_GNUC_CONST;
#define WIDGETS_COVER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_COVER, WidgetsCoverPrivate))
static void widgets_cover_refresh_size_request (WidgetsCover* self);
static void _widgets_cover_refresh_size_request_g_object_notify (GObject* _sender,
                                                          GParamSpec* pspec,
                                                          gpointer self);
static void widgets_cover_dpi_change (WidgetsCover* self);
static void _widgets_cover_dpi_change_gdk_screen_monitors_changed (GdkScreen* _sender,
                                                            gpointer self);
#define WIDGETS_COVER_EXTRA_MARGIN 4
WidgetsCover* widgets_cover_new (void);
WidgetsCover* widgets_cover_construct (GType object_type);
WidgetsCover* widgets_cover_new_from_pixbuf (GdkPixbuf* pixbuf);
WidgetsCover* widgets_cover_construct_from_pixbuf (GType object_type,
                                                   GdkPixbuf* pixbuf);
WidgetsCover* widgets_cover_new_from_file (const gchar* filepath,
                                           gint pixel_size,
                                           const gchar* type);
WidgetsCover* widgets_cover_construct_from_file (GType object_type,
                                                 const gchar* filepath,
                                                 gint pixel_size,
                                                 const gchar* type);
static void widgets_cover_set_default (WidgetsCover* self,
                                const gchar* type);
static void widgets_cover_load_image (WidgetsCover* self,
                               const gchar* filepath,
                               gint pixel_size);
static gint* _int_dup (gint* self);
void widgets_cover_set_from_file (WidgetsCover* self,
                                  const gchar* filepath,
                                  gint pixel_size,
                                  const gchar* type);
WidgetsCover* widgets_cover_new_from_url_async (const gchar* uri,
                                                gint pixel_size,
                                                gboolean preserve_aspect_ratio,
                                                const gchar* type,
                                                GCancellable* cancellable);
WidgetsCover* widgets_cover_construct_from_url_async (GType object_type,
                                                      const gchar* uri,
                                                      gint pixel_size,
                                                      gboolean preserve_aspect_ratio,
                                                      const gchar* type,
                                                      GCancellable* cancellable);
void widgets_cover_show_default (WidgetsCover* self,
                                 gint pixel_size);
static void widgets_cover_set_from_file_async (WidgetsCover* self,
                                        GFile* file,
                                        gint pixel_size,
                                        gboolean preserve_aspect_ratio,
                                        GCancellable* cancellable,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_);
static void widgets_cover_set_from_file_finish (WidgetsCover* self,
                                         GAsyncResult* _res_,
                                         GError** error);
void widgets_cover_set_from_url_async (WidgetsCover* self,
                                       const gchar* uri,
                                       gint pixel_size,
                                       gboolean preserve_aspect_ratio,
                                       const gchar* type,
                                       GCancellable* cancellable);
static void widgets_cover_set_from_file_async_data_free (gpointer _data);
static void widgets_cover_set_from_file_async_async_ready_wrapper (GObject *source_object,
                                                            GAsyncResult *res,
                                                            void *user_data);
static gboolean widgets_cover_set_from_file_async_co (WidgetsCoverSetFromFileAsyncData* _data_);
static void widgets_cover_set_from_file_async_ready (GObject* source_object,
                                              GAsyncResult* _res_,
                                              gpointer _user_data_);
void widgets_cover_set_pixbuf (WidgetsCover* self,
                               GdkPixbuf* value);
WidgetsCover* widgets_cover_new_with_default_icon (gint pixel_size,
                                                   const gchar* type);
WidgetsCover* widgets_cover_construct_with_default_icon (GType object_type,
                                                         gint pixel_size,
                                                         const gchar* type);
void widgets_cover_set_with_default_icon (WidgetsCover* self,
                                          gint pixel_size,
                                          const gchar* type);
GdkPixbuf* widgets_cover_get_pixbuf (WidgetsCover* self);
static gboolean widgets_cover_real_draw (GtkWidget* base,
                                  cairo_t* cr);
static GObject * widgets_cover_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
static void widgets_cover_finalize (GObject * obj);
static void _vala_widgets_cover_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_widgets_cover_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);


static void
_widgets_cover_refresh_size_request_g_object_notify (GObject* _sender,
                                                     GParamSpec* pspec,
                                                     gpointer self)
{
	widgets_cover_refresh_size_request ((WidgetsCover*) self);
}


static void
_widgets_cover_dpi_change_gdk_screen_monitors_changed (GdkScreen* _sender,
                                                       gpointer self)
{
	widgets_cover_dpi_change ((WidgetsCover*) self);
}


WidgetsCover*
widgets_cover_construct (GType object_type)
{
	WidgetsCover * self = NULL;
	self = (WidgetsCover*) g_object_new (object_type, NULL);
	return self;
}


WidgetsCover*
widgets_cover_new (void)
{
	return widgets_cover_construct (WIDGETS_TYPE_COVER);
}


WidgetsCover*
widgets_cover_construct_from_pixbuf (GType object_type,
                                     GdkPixbuf* pixbuf)
{
	WidgetsCover * self = NULL;
	g_return_val_if_fail (pixbuf != NULL, NULL);
	self = (WidgetsCover*) g_object_new (object_type, "pixbuf", pixbuf, NULL);
	return self;
}


WidgetsCover*
widgets_cover_new_from_pixbuf (GdkPixbuf* pixbuf)
{
	return widgets_cover_construct_from_pixbuf (WIDGETS_TYPE_COVER, pixbuf);
}


static gint*
_int_dup (gint* self)
{
	gint* dup;
	dup = g_new0 (gint, 1);
	memcpy (dup, self, sizeof (gint));
	return dup;
}


static gpointer
__int_dup0 (gpointer self)
{
	return self ? _int_dup (self) : NULL;
}


WidgetsCover*
widgets_cover_construct_from_file (GType object_type,
                                   const gchar* filepath,
                                   gint pixel_size,
                                   const gchar* type)
{
	WidgetsCover * self = NULL;
	gchar* _tmp0_;
	gint* _tmp1_;
	gchar* _tmp2_;
	g_return_val_if_fail (filepath != NULL, NULL);
	g_return_val_if_fail (type != NULL, NULL);
	self = (WidgetsCover*) g_object_new (object_type, NULL);
	widgets_cover_set_default (self, type);
	widgets_cover_load_image (self, filepath, pixel_size);
	_tmp0_ = g_strdup (filepath);
	_g_free0 (self->priv->orig_filename);
	self->priv->orig_filename = _tmp0_;
	_tmp1_ = __int_dup0 (&pixel_size);
	_g_free0 (self->priv->orig_pixel_size);
	self->priv->orig_pixel_size = _tmp1_;
	_tmp2_ = g_strdup (type);
	_g_free0 (self->priv->orig_type);
	self->priv->orig_type = _tmp2_;
	return self;
}


WidgetsCover*
widgets_cover_new_from_file (const gchar* filepath,
                             gint pixel_size,
                             const gchar* type)
{
	return widgets_cover_construct_from_file (WIDGETS_TYPE_COVER, filepath, pixel_size, type);
}


void
widgets_cover_set_from_file (WidgetsCover* self,
                             const gchar* filepath,
                             gint pixel_size,
                             const gchar* type)
{
	gchar* _tmp0_;
	gint* _tmp1_;
	gchar* _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (filepath != NULL);
	g_return_if_fail (type != NULL);
	widgets_cover_set_default (self, type);
	widgets_cover_load_image (self, filepath, pixel_size);
	_tmp0_ = g_strdup (filepath);
	_g_free0 (self->priv->orig_filename);
	self->priv->orig_filename = _tmp0_;
	_tmp1_ = __int_dup0 (&pixel_size);
	_g_free0 (self->priv->orig_pixel_size);
	self->priv->orig_pixel_size = _tmp1_;
	_tmp2_ = g_strdup (type);
	_g_free0 (self->priv->orig_type);
	self->priv->orig_type = _tmp2_;
}


WidgetsCover*
widgets_cover_construct_from_url_async (GType object_type,
                                        const gchar* uri,
                                        gint pixel_size,
                                        gboolean preserve_aspect_ratio,
                                        const gchar* type,
                                        GCancellable* cancellable)
{
	WidgetsCover * self = NULL;
	GFile* file = NULL;
	GFile* _tmp0_;
	gchar* _tmp1_;
	gint* _tmp2_;
	gchar* _tmp3_;
	g_return_val_if_fail (uri != NULL, NULL);
	g_return_val_if_fail (type != NULL, NULL);
	self = (WidgetsCover*) g_object_new (object_type, NULL);
	widgets_cover_set_default (self, type);
	widgets_cover_show_default (self, pixel_size);
	_tmp0_ = g_file_new_for_uri (uri);
	file = _tmp0_;
	widgets_cover_set_from_file_async (self, file, pixel_size, preserve_aspect_ratio, NULL, NULL, NULL);
	_tmp1_ = g_strdup (uri);
	_g_free0 (self->priv->orig_filename);
	self->priv->orig_filename = _tmp1_;
	_tmp2_ = __int_dup0 (&pixel_size);
	_g_free0 (self->priv->orig_pixel_size);
	self->priv->orig_pixel_size = _tmp2_;
	_tmp3_ = g_strdup (type);
	_g_free0 (self->priv->orig_type);
	self->priv->orig_type = _tmp3_;
	_g_object_unref0 (file);
	return self;
}


WidgetsCover*
widgets_cover_new_from_url_async (const gchar* uri,
                                  gint pixel_size,
                                  gboolean preserve_aspect_ratio,
                                  const gchar* type,
                                  GCancellable* cancellable)
{
	return widgets_cover_construct_from_url_async (WIDGETS_TYPE_COVER, uri, pixel_size, preserve_aspect_ratio, type, cancellable);
}


void
widgets_cover_set_from_url_async (WidgetsCover* self,
                                  const gchar* uri,
                                  gint pixel_size,
                                  gboolean preserve_aspect_ratio,
                                  const gchar* type,
                                  GCancellable* cancellable)
{
	GFile* file = NULL;
	GFile* _tmp0_;
	gchar* _tmp1_;
	gint* _tmp2_;
	gchar* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (uri != NULL);
	g_return_if_fail (type != NULL);
	widgets_cover_set_default (self, type);
	widgets_cover_show_default (self, pixel_size);
	_tmp0_ = g_file_new_for_uri (uri);
	file = _tmp0_;
	widgets_cover_set_from_file_async (self, file, pixel_size, preserve_aspect_ratio, NULL, NULL, NULL);
	_tmp1_ = g_strdup (uri);
	_g_free0 (self->priv->orig_filename);
	self->priv->orig_filename = _tmp1_;
	_tmp2_ = __int_dup0 (&pixel_size);
	_g_free0 (self->priv->orig_pixel_size);
	self->priv->orig_pixel_size = _tmp2_;
	_tmp3_ = g_strdup (type);
	_g_free0 (self->priv->orig_type);
	self->priv->orig_type = _tmp3_;
	_g_object_unref0 (file);
}


static void
widgets_cover_set_from_file_async_data_free (gpointer _data)
{
	WidgetsCoverSetFromFileAsyncData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->file);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->self);
	g_slice_free (WidgetsCoverSetFromFileAsyncData, _data_);
}


static void
widgets_cover_set_from_file_async_async_ready_wrapper (GObject *source_object,
                                                       GAsyncResult *res,
                                                       void *user_data)
{
	WidgetsCoverSetFromFileAsyncData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
widgets_cover_set_from_file_async (WidgetsCover* self,
                                   GFile* file,
                                   gint pixel_size,
                                   gboolean preserve_aspect_ratio,
                                   GCancellable* cancellable,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_)
{
	WidgetsCoverSetFromFileAsyncData* _data_;
	WidgetsCover* _tmp0_;
	GFile* _tmp1_;
	GCancellable* _tmp2_;
	_data_ = g_slice_new0 (WidgetsCoverSetFromFileAsyncData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, widgets_cover_set_from_file_async_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, widgets_cover_set_from_file_async_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = _g_object_ref0 (file);
	_g_object_unref0 (_data_->file);
	_data_->file = _tmp1_;
	_data_->pixel_size = pixel_size;
	_data_->preserve_aspect_ratio = preserve_aspect_ratio;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	widgets_cover_set_from_file_async_co (_data_);
}


static void
widgets_cover_set_from_file_finish (WidgetsCover* self,
                                    GAsyncResult* _res_,
                                    GError** error)
{
	WidgetsCoverSetFromFileAsyncData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static void
widgets_cover_set_from_file_async_ready (GObject* source_object,
                                         GAsyncResult* _res_,
                                         gpointer _user_data_)
{
	WidgetsCoverSetFromFileAsyncData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	widgets_cover_set_from_file_async_co (_data_);
}


static gpointer
_g_error_copy0 (gpointer self)
{
	return self ? g_error_copy (self) : NULL;
}


static gboolean
widgets_cover_set_from_file_async_co (WidgetsCoverSetFromFileAsyncData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	{
		_data_->_state_ = 1;
		g_file_read_async (_data_->file, G_PRIORITY_DEFAULT, NULL, widgets_cover_set_from_file_async_ready, _data_);
		return FALSE;
		_state_1:
		_data_->_tmp0_ = g_file_read_finish (_data_->file, _data_->_res_, &_data_->_inner_error_);
		_data_->stream = _data_->_tmp0_;
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			goto __catch34_g_error;
		}
		_data_->_tmp2_ = _data_->stream;
		_data_->_state_ = 2;
		gdk_pixbuf_new_from_stream_at_scale_async ((GInputStream*) _data_->_tmp2_, _data_->pixel_size * gtk_widget_get_scale_factor ((GtkWidget*) _data_->self), _data_->pixel_size * gtk_widget_get_scale_factor ((GtkWidget*) _data_->self), _data_->preserve_aspect_ratio, _data_->cancellable, widgets_cover_set_from_file_async_ready, _data_);
		return FALSE;
		_state_2:
		_data_->_tmp3_ = (GdkPixbuf*) gdk_pixbuf_new_from_stream_finish (_data_->_res_, &_data_->_inner_error_);
		_data_->_tmp1_ = _data_->_tmp3_;
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			_g_object_unref0 (_data_->stream);
			goto __catch34_g_error;
		}
		widgets_cover_set_pixbuf (_data_->self, _data_->_tmp1_);
		_g_object_unref0 (_data_->_tmp1_);
		_g_object_unref0 (_data_->stream);
	}
	goto __finally34;
	__catch34_g_error:
	{
		_data_->e = _data_->_inner_error_;
		_data_->_inner_error_ = NULL;
		widgets_cover_show_default (_data_->self, _data_->pixel_size);
		_data_->_tmp4_ = _data_->e;
		_data_->_tmp5_ = _g_error_copy0 (_data_->_tmp4_);
		_data_->_inner_error_ = _data_->_tmp5_;
		_g_error_free0 (_data_->e);
		goto __finally34;
	}
	__finally34:
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
widgets_cover_load_image (WidgetsCover* self,
                          const gchar* filepath,
                          gint pixel_size)
{
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (filepath != NULL);
	{
		gint size = 0;
		GdkPixbuf* _tmp0_ = NULL;
		GdkPixbuf* _tmp1_;
		size = pixel_size * gtk_widget_get_scale_factor ((GtkWidget*) self);
		_tmp1_ = gdk_pixbuf_new_from_file_at_size (filepath, size, size, &_inner_error_);
		_tmp0_ = _tmp1_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch35_g_error;
		}
		widgets_cover_set_pixbuf (self, _tmp0_);
		_g_object_unref0 (_tmp0_);
	}
	goto __finally35;
	__catch35_g_error:
	{
		GError* e = NULL;
		e = _inner_error_;
		_inner_error_ = NULL;
		widgets_cover_show_default (self, pixel_size);
		_g_error_free0 (e);
	}
	__finally35:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


WidgetsCover*
widgets_cover_construct_with_default_icon (GType object_type,
                                           gint pixel_size,
                                           const gchar* type)
{
	WidgetsCover * self = NULL;
	gint* _tmp0_;
	g_return_val_if_fail (type != NULL, NULL);
	self = (WidgetsCover*) g_object_new (object_type, NULL);
	widgets_cover_set_default (self, type);
	widgets_cover_show_default (self, pixel_size);
	_tmp0_ = __int_dup0 (&pixel_size);
	_g_free0 (self->priv->orig_pixel_size);
	self->priv->orig_pixel_size = _tmp0_;
	return self;
}


WidgetsCover*
widgets_cover_new_with_default_icon (gint pixel_size,
                                     const gchar* type)
{
	return widgets_cover_construct_with_default_icon (WIDGETS_TYPE_COVER, pixel_size, type);
}


void
widgets_cover_set_with_default_icon (WidgetsCover* self,
                                     gint pixel_size,
                                     const gchar* type)
{
	gint* _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (type != NULL);
	widgets_cover_set_default (self, type);
	widgets_cover_show_default (self, pixel_size);
	_tmp0_ = __int_dup0 (&pixel_size);
	_g_free0 (self->priv->orig_pixel_size);
	self->priv->orig_pixel_size = _tmp0_;
}


static void
widgets_cover_refresh_size_request (WidgetsCover* self)
{
	GdkPixbuf* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_pixbuf;
	if (_tmp0_ != NULL) {
		gint scale_factor = 0;
		GdkPixbuf* _tmp1_;
		gint _tmp2_;
		gint _tmp3_;
		gint _tmp4_;
		GdkPixbuf* _tmp5_;
		gint _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		scale_factor = gtk_widget_get_scale_factor ((GtkWidget*) self);
		_tmp1_ = self->priv->_pixbuf;
		_tmp2_ = gdk_pixbuf_get_width (_tmp1_);
		_tmp3_ = _tmp2_;
		_tmp4_ = scale_factor;
		_tmp5_ = self->priv->_pixbuf;
		_tmp6_ = gdk_pixbuf_get_height (_tmp5_);
		_tmp7_ = _tmp6_;
		_tmp8_ = scale_factor;
		gtk_widget_set_size_request ((GtkWidget*) self, (_tmp3_ / _tmp4_) + (WIDGETS_COVER_EXTRA_MARGIN * 2), (_tmp7_ / _tmp8_) + (WIDGETS_COVER_EXTRA_MARGIN * 2));
		self->priv->draw_theme_background = TRUE;
	} else {
		gtk_widget_set_size_request ((GtkWidget*) self, 0, 0);
	}
	gtk_widget_queue_draw ((GtkWidget*) self);
}


static void
widgets_cover_dpi_change (WidgetsCover* self)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp1_ = self->priv->is_default;
	if (_tmp1_) {
		gint* _tmp2_;
		_tmp2_ = self->priv->orig_pixel_size;
		_tmp0_ = _tmp2_ != NULL;
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		gint* _tmp3_;
		_tmp3_ = self->priv->orig_pixel_size;
		widgets_cover_show_default (self, *_tmp3_);
	} else {
		gboolean _tmp4_ = FALSE;
		const gchar* _tmp5_;
		_tmp5_ = self->priv->orig_filename;
		if (_tmp5_ != NULL) {
			gint* _tmp6_;
			_tmp6_ = self->priv->orig_pixel_size;
			_tmp4_ = _tmp6_ != NULL;
		} else {
			_tmp4_ = FALSE;
		}
		if (_tmp4_) {
			const gchar* _tmp7_;
			gint* _tmp8_;
			_tmp7_ = self->priv->orig_filename;
			_tmp8_ = self->priv->orig_pixel_size;
			widgets_cover_load_image (self, _tmp7_, *_tmp8_);
		}
	}
}


static void
widgets_cover_set_default (WidgetsCover* self,
                           const gchar* type)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (type != NULL);
	if (g_strcmp0 (type, "album") == 0) {
		gchar* _tmp0_;
		GtkStyleContext* _tmp1_;
		_tmp0_ = g_strdup ("/usr/share/com.github.alainm23.byte/album-default-cover.svg");
		_g_free0 (self->priv->DEFAULT_ICON);
		self->priv->DEFAULT_ICON = _tmp0_;
		_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
		gtk_style_context_add_class (_tmp1_, "album-cover");
	} else {
		if (g_strcmp0 (type, "artist") == 0) {
			gchar* _tmp2_;
			GtkStyleContext* _tmp3_;
			_tmp2_ = g_strdup ("/usr/share/com.github.alainm23.byte/artist-default-cover.svg");
			_g_free0 (self->priv->DEFAULT_ICON);
			self->priv->DEFAULT_ICON = _tmp2_;
			_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) self);
			gtk_style_context_add_class (_tmp3_, "artist-cover");
		} else {
			if (g_strcmp0 (type, "radio") == 0) {
				gchar* _tmp4_;
				GtkStyleContext* _tmp5_;
				_tmp4_ = g_strdup ("/usr/share/com.github.alainm23.byte/radio-default-cover.svg");
				_g_free0 (self->priv->DEFAULT_ICON);
				self->priv->DEFAULT_ICON = _tmp4_;
				_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) self);
				gtk_style_context_add_class (_tmp5_, "playlist-cover");
			} else {
				if (g_strcmp0 (type, "track") == 0) {
					gchar* _tmp6_;
					GtkStyleContext* _tmp7_;
					_tmp6_ = g_strdup ("/usr/share/com.github.alainm23.byte/track-default-cover.svg");
					_g_free0 (self->priv->DEFAULT_ICON);
					self->priv->DEFAULT_ICON = _tmp6_;
					_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) self);
					gtk_style_context_add_class (_tmp7_, "track-cover");
				} else {
					gchar* _tmp8_;
					GtkStyleContext* _tmp9_;
					_tmp8_ = g_strdup ("/usr/share/com.github.alainm23.byte/playlist-default-cover.svg");
					_g_free0 (self->priv->DEFAULT_ICON);
					self->priv->DEFAULT_ICON = _tmp8_;
					_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) self);
					gtk_style_context_add_class (_tmp9_, "playlist-cover");
				}
			}
		}
	}
}


void
widgets_cover_show_default (WidgetsCover* self,
                            gint pixel_size)
{
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	{
		gint size = 0;
		GdkPixbuf* _tmp0_ = NULL;
		const gchar* _tmp1_;
		GdkPixbuf* _tmp2_;
		size = pixel_size * gtk_widget_get_scale_factor ((GtkWidget*) self);
		_tmp1_ = self->priv->DEFAULT_ICON;
		_tmp2_ = gdk_pixbuf_new_from_file_at_size (_tmp1_, size, size, &_inner_error_);
		_tmp0_ = _tmp2_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch36_g_error;
		}
		widgets_cover_set_pixbuf (self, _tmp0_);
		_g_object_unref0 (_tmp0_);
	}
	goto __finally36;
	__catch36_g_error:
	{
		GError* e = NULL;
		FILE* _tmp3_;
		GError* _tmp4_;
		const gchar* _tmp5_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp3_ = stderr;
		_tmp4_ = e;
		_tmp5_ = _tmp4_->message;
		fprintf (_tmp3_, "Error setting default avatar icon: %s ", _tmp5_);
		_g_error_free0 (e);
	}
	__finally36:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static gboolean
widgets_cover_real_draw (GtkWidget* base,
                         cairo_t* cr)
{
	WidgetsCover * self;
	gboolean result = FALSE;
	GdkPixbuf* _tmp0_;
	GtkStyleContext* style_context = NULL;
	GtkStyleContext* _tmp1_;
	gint width = 0;
	gint height = 0;
	gint scale_factor = 0;
	gboolean _tmp2_;
	self = (WidgetsCover*) base;
	g_return_val_if_fail (cr != NULL, FALSE);
	_tmp0_ = self->priv->_pixbuf;
	if (_tmp0_ == NULL) {
		result = GTK_WIDGET_CLASS (widgets_cover_parent_class)->draw ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_event_box_get_type (), GtkEventBox), cr);
		return result;
	}
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
	style_context = _tmp1_;
	width = gtk_widget_get_allocated_width ((GtkWidget*) self) - (WIDGETS_COVER_EXTRA_MARGIN * 2);
	height = gtk_widget_get_allocated_height ((GtkWidget*) self) - (WIDGETS_COVER_EXTRA_MARGIN * 2);
	scale_factor = gtk_widget_get_scale_factor ((GtkWidget*) self);
	_tmp2_ = self->priv->draw_theme_background;
	if (_tmp2_) {
		gint border_radius = 0;
		GtkStyleContext* _tmp3_;
		GtkStyleContext* _tmp4_;
		GValue _tmp5_ = {0};
		GValue _tmp6_;
		gint _tmp7_;
		gint crop_radius = 0;
		gint _tmp8_;
		gint _tmp9_;
		gint _tmp10_;
		gint _tmp11_;
		gint _tmp12_;
		gint _tmp13_;
		gint _tmp14_;
		gint _tmp15_;
		GdkPixbuf* _tmp16_;
		gint _tmp17_;
		gint _tmp18_;
		GtkStyleContext* _tmp19_;
		gint _tmp20_;
		gint _tmp21_;
		GtkStyleContext* _tmp22_;
		gint _tmp23_;
		gint _tmp24_;
		_tmp3_ = style_context;
		_tmp4_ = style_context;
		gtk_style_context_get_property (_tmp3_, GTK_STYLE_PROPERTY_BORDER_RADIUS, gtk_style_context_get_state (_tmp4_), &_tmp5_);
		_tmp6_ = _tmp5_;
		_tmp7_ = g_value_get_int (&_tmp6_);
		G_IS_VALUE (&_tmp6_) ? (g_value_unset (&_tmp6_), NULL) : NULL;
		border_radius = _tmp7_;
		_tmp8_ = width;
		_tmp9_ = border_radius;
		_tmp10_ = width;
		crop_radius = MIN (_tmp8_ / 2, (_tmp9_ * _tmp10_) / 100);
		_tmp11_ = width;
		_tmp12_ = height;
		_tmp13_ = crop_radius;
		granite_drawing_utilities_cairo_rounded_rectangle (cr, (gdouble) WIDGETS_COVER_EXTRA_MARGIN, (gdouble) WIDGETS_COVER_EXTRA_MARGIN, (gdouble) _tmp11_, (gdouble) _tmp12_, (gdouble) _tmp13_);
		cairo_save (cr);
		_tmp14_ = scale_factor;
		_tmp15_ = scale_factor;
		cairo_scale (cr, 1.0 / _tmp14_, 1.0 / _tmp15_);
		_tmp16_ = self->priv->_pixbuf;
		_tmp17_ = scale_factor;
		_tmp18_ = scale_factor;
		gdk_cairo_set_source_pixbuf (cr, _tmp16_, (gdouble) (WIDGETS_COVER_EXTRA_MARGIN * _tmp17_), (gdouble) (WIDGETS_COVER_EXTRA_MARGIN * _tmp18_));
		cairo_fill_preserve (cr);
		cairo_restore (cr);
		_tmp19_ = style_context;
		_tmp20_ = width;
		_tmp21_ = height;
		gtk_render_background (_tmp19_, cr, (gdouble) WIDGETS_COVER_EXTRA_MARGIN, (gdouble) WIDGETS_COVER_EXTRA_MARGIN, (gdouble) _tmp20_, (gdouble) _tmp21_);
		_tmp22_ = style_context;
		_tmp23_ = width;
		_tmp24_ = height;
		gtk_render_frame (_tmp22_, cr, (gdouble) WIDGETS_COVER_EXTRA_MARGIN, (gdouble) WIDGETS_COVER_EXTRA_MARGIN, (gdouble) _tmp23_, (gdouble) _tmp24_);
	} else {
		gint _tmp25_;
		gint _tmp26_;
		GtkStyleContext* _tmp27_;
		GdkPixbuf* _tmp28_;
		cairo_save (cr);
		_tmp25_ = scale_factor;
		_tmp26_ = scale_factor;
		cairo_scale (cr, 1.0 / _tmp25_, 1.0 / _tmp26_);
		_tmp27_ = style_context;
		_tmp28_ = self->priv->_pixbuf;
		gtk_render_icon (_tmp27_, cr, _tmp28_, (gdouble) WIDGETS_COVER_EXTRA_MARGIN, (gdouble) WIDGETS_COVER_EXTRA_MARGIN);
		cairo_restore (cr);
	}
	result = GDK_EVENT_STOP;
	return result;
}


GdkPixbuf*
widgets_cover_get_pixbuf (WidgetsCover* self)
{
	GdkPixbuf* result;
	GdkPixbuf* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_pixbuf;
	result = _tmp0_;
	return result;
}


void
widgets_cover_set_pixbuf (WidgetsCover* self,
                          GdkPixbuf* value)
{
	g_return_if_fail (self != NULL);
	if (widgets_cover_get_pixbuf (self) != value) {
		GdkPixbuf* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_pixbuf);
		self->priv->_pixbuf = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, widgets_cover_properties[WIDGETS_COVER_PIXBUF_PROPERTY]);
	}
}


static GObject *
widgets_cover_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsCover * self;
	GdkScreen* _tmp0_;
	parent_class = G_OBJECT_CLASS (widgets_cover_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_COVER, WidgetsCover);
	gtk_widget_set_valign ((GtkWidget*) self, GTK_ALIGN_CENTER);
	gtk_widget_set_halign ((GtkWidget*) self, GTK_ALIGN_CENTER);
	gtk_event_box_set_visible_window ((GtkEventBox*) self, FALSE);
	g_signal_connect_object ((GObject*) self, "notify::pixbuf", (GCallback) _widgets_cover_refresh_size_request_g_object_notify, self, 0);
	_tmp0_ = gdk_screen_get_default ();
	g_signal_connect_object (_tmp0_, "monitors-changed", (GCallback) _widgets_cover_dpi_change_gdk_screen_monitors_changed, self, 0);
	return obj;
}


static void
widgets_cover_class_init (WidgetsCoverClass * klass)
{
	widgets_cover_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (WidgetsCoverPrivate));
	((GtkWidgetClass *) klass)->draw = (gboolean (*) (GtkWidget *, cairo_t*)) widgets_cover_real_draw;
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_cover_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_cover_set_property;
	G_OBJECT_CLASS (klass)->constructor = widgets_cover_constructor;
	G_OBJECT_CLASS (klass)->finalize = widgets_cover_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_COVER_PIXBUF_PROPERTY, widgets_cover_properties[WIDGETS_COVER_PIXBUF_PROPERTY] = g_param_spec_object ("pixbuf", "pixbuf", "pixbuf", gdk_pixbuf_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
widgets_cover_instance_init (WidgetsCover * self)
{
	gchar* _tmp0_;
	self->priv = WIDGETS_COVER_GET_PRIVATE (self);
	_tmp0_ = g_strdup ("/usr/share/com.github.alainm23.byte/track-default-cover.svg");
	self->priv->DEFAULT_ICON = _tmp0_;
	self->priv->draw_theme_background = TRUE;
	self->priv->is_default = FALSE;
	self->priv->orig_filename = NULL;
	self->priv->orig_pixel_size = NULL;
	self->priv->orig_type = NULL;
}


static void
widgets_cover_finalize (GObject * obj)
{
	WidgetsCover * self;
	guint _tmp0_;
	GQuark _tmp1_;
	GdkScreen* _tmp2_;
	guint _tmp3_;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_COVER, WidgetsCover);
	g_signal_parse_name ("notify::pixbuf", G_TYPE_OBJECT, &_tmp0_, &_tmp1_, TRUE);
	g_signal_handlers_disconnect_matched ((GObject*) self, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, _tmp1_, NULL, (GCallback) _widgets_cover_refresh_size_request_g_object_notify, self);
	_tmp2_ = gdk_screen_get_default ();
	g_signal_parse_name ("monitors-changed", gdk_screen_get_type (), &_tmp3_, NULL, FALSE);
	g_signal_handlers_disconnect_matched (_tmp2_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp3_, 0, NULL, (GCallback) _widgets_cover_dpi_change_gdk_screen_monitors_changed, self);
	_g_free0 (self->priv->DEFAULT_ICON);
	_g_free0 (self->priv->orig_filename);
	_g_free0 (self->priv->orig_pixel_size);
	_g_free0 (self->priv->orig_type);
	_g_object_unref0 (self->priv->_pixbuf);
	G_OBJECT_CLASS (widgets_cover_parent_class)->finalize (obj);
}


GType
widgets_cover_get_type (void)
{
	static volatile gsize widgets_cover_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_cover_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsCoverClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_cover_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsCover), 0, (GInstanceInitFunc) widgets_cover_instance_init, NULL };
		GType widgets_cover_type_id;
		widgets_cover_type_id = g_type_register_static (gtk_event_box_get_type (), "WidgetsCover", &g_define_type_info, 0);
		g_once_init_leave (&widgets_cover_type_id__volatile, widgets_cover_type_id);
	}
	return widgets_cover_type_id__volatile;
}


static void
_vala_widgets_cover_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	WidgetsCover * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_COVER, WidgetsCover);
	switch (property_id) {
		case WIDGETS_COVER_PIXBUF_PROPERTY:
		g_value_set_object (value, widgets_cover_get_pixbuf (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_widgets_cover_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	WidgetsCover * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_COVER, WidgetsCover);
	switch (property_id) {
		case WIDGETS_COVER_PIXBUF_PROPERTY:
		widgets_cover_set_pixbuf (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



