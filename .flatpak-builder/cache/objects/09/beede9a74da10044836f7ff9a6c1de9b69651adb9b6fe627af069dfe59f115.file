/* Radio.c generated by valac 0.40.11, the Vala compiler
 * generated from Radio.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <libsoup/soup.h>


#define OBJECTS_TYPE_RADIO (objects_radio_get_type ())
#define OBJECTS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_RADIO, ObjectsRadio))
#define OBJECTS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_RADIO, ObjectsRadioClass))
#define OBJECTS_IS_RADIO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_RADIO))
#define OBJECTS_IS_RADIO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_RADIO))
#define OBJECTS_RADIO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_RADIO, ObjectsRadioClass))

typedef struct _ObjectsRadio ObjectsRadio;
typedef struct _ObjectsRadioClass ObjectsRadioClass;
typedef struct _ObjectsRadioPrivate ObjectsRadioPrivate;
enum  {
	OBJECTS_RADIO_0_PROPERTY,
	OBJECTS_RADIO_ID_PROPERTY,
	OBJECTS_RADIO_NAME_PROPERTY,
	OBJECTS_RADIO_URL_PROPERTY,
	OBJECTS_RADIO_HOMEPAGE_PROPERTY,
	OBJECTS_RADIO_TAGS_PROPERTY,
	OBJECTS_RADIO_FAVICON_PROPERTY,
	OBJECTS_RADIO_COUNTRY_PROPERTY,
	OBJECTS_RADIO_STATE_PROPERTY,
	OBJECTS_RADIO_VOTES_PROPERTY,
	OBJECTS_RADIO_FILE_PROPERTY,
	OBJECTS_RADIO_NUM_PROPERTIES
};
static GParamSpec* objects_radio_properties[OBJECTS_RADIO_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_key_file_unref0(var) ((var == NULL) ? NULL : (var = (g_key_file_unref (var), NULL)))

struct _ObjectsRadio {
	GObject parent_instance;
	ObjectsRadioPrivate * priv;
};

struct _ObjectsRadioClass {
	GObjectClass parent_class;
};

struct _ObjectsRadioPrivate {
	gint _id;
	gchar* _name;
	gchar* _url;
	gchar* _homepage;
	gchar* _tags;
	gchar* _favicon;
	gchar* _country;
	gchar* _state;
	gchar* _votes;
	gchar* _file;
};


static gpointer objects_radio_parent_class = NULL;

GType objects_radio_get_type (void) G_GNUC_CONST;
#define OBJECTS_RADIO_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), OBJECTS_TYPE_RADIO, ObjectsRadioPrivate))
ObjectsRadio* objects_radio_new (void);
ObjectsRadio* objects_radio_construct (GType object_type);
static gchar* objects_radio_get_stream_file (ObjectsRadio* self);
static gchar* objects_radio_get_stream_content (ObjectsRadio* self);
static gchar* objects_radio_get_file_from_m3u (ObjectsRadio* self,
                                        const gchar* content);
static gchar* objects_radio_get_file_from_pls (ObjectsRadio* self,
                                        const gchar* content);
const gchar* objects_radio_get_url (ObjectsRadio* self);
gint objects_radio_get_id (ObjectsRadio* self);
void objects_radio_set_id (ObjectsRadio* self,
                           gint value);
const gchar* objects_radio_get_name (ObjectsRadio* self);
void objects_radio_set_name (ObjectsRadio* self,
                             const gchar* value);
void objects_radio_set_url (ObjectsRadio* self,
                            const gchar* value);
const gchar* objects_radio_get_homepage (ObjectsRadio* self);
void objects_radio_set_homepage (ObjectsRadio* self,
                                 const gchar* value);
const gchar* objects_radio_get_tags (ObjectsRadio* self);
void objects_radio_set_tags (ObjectsRadio* self,
                             const gchar* value);
const gchar* objects_radio_get_favicon (ObjectsRadio* self);
void objects_radio_set_favicon (ObjectsRadio* self,
                                const gchar* value);
const gchar* objects_radio_get_country (ObjectsRadio* self);
void objects_radio_set_country (ObjectsRadio* self,
                                const gchar* value);
const gchar* objects_radio_get_state (ObjectsRadio* self);
void objects_radio_set_state (ObjectsRadio* self,
                              const gchar* value);
const gchar* objects_radio_get_votes (ObjectsRadio* self);
void objects_radio_set_votes (ObjectsRadio* self,
                              const gchar* value);
const gchar* objects_radio_get_file (ObjectsRadio* self);
static void objects_radio_finalize (GObject * obj);
static void _vala_objects_radio_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_objects_radio_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


ObjectsRadio*
objects_radio_construct (GType object_type)
{
	ObjectsRadio * self = NULL;
	self = (ObjectsRadio*) g_object_new (object_type, NULL);
	return self;
}


ObjectsRadio*
objects_radio_new (void)
{
	return objects_radio_construct (OBJECTS_TYPE_RADIO);
}


static gchar*
objects_radio_get_stream_file (ObjectsRadio* self)
{
	gchar* result = NULL;
	gchar* return_value = NULL;
	gchar* content = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	return_value = NULL;
	_tmp0_ = objects_radio_get_stream_content (self);
	content = _tmp0_;
	_tmp1_ = content;
	if (_tmp1_ != NULL) {
		const gchar* _tmp2_;
		gchar* _tmp3_;
		const gchar* _tmp4_;
		_tmp2_ = content;
		_tmp3_ = objects_radio_get_file_from_m3u (self, _tmp2_);
		_g_free0 (return_value);
		return_value = _tmp3_;
		_tmp4_ = return_value;
		if (_tmp4_ == NULL) {
			const gchar* _tmp5_;
			gchar* _tmp6_;
			_tmp5_ = content;
			_tmp6_ = objects_radio_get_file_from_pls (self, _tmp5_);
			_g_free0 (return_value);
			return_value = _tmp6_;
		}
	} else {
		const gchar* _tmp7_;
		gchar* _tmp8_;
		_tmp7_ = self->priv->_url;
		_tmp8_ = g_strdup (_tmp7_);
		_g_free0 (return_value);
		return_value = _tmp8_;
	}
	result = return_value;
	_g_free0 (content);
	return result;
}


static gchar*
objects_radio_get_stream_content (ObjectsRadio* self)
{
	gchar* result = NULL;
	gchar* return_value = NULL;
	SoupSession* session = NULL;
	SoupSession* _tmp0_;
	SoupMessage* msg = NULL;
	const gchar* _tmp1_;
	SoupMessage* _tmp2_;
	gchar* content_type = NULL;
	SoupMessage* _tmp9_;
	SoupMessageHeaders* _tmp10_;
	const gchar* _tmp11_;
	gchar* _tmp12_;
	gboolean _tmp13_ = FALSE;
	gboolean _tmp14_ = FALSE;
	const gchar* _tmp15_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	return_value = NULL;
	_tmp0_ = soup_session_new ();
	session = _tmp0_;
	_tmp1_ = self->priv->_url;
	_tmp2_ = soup_message_new ("GET", _tmp1_);
	msg = _tmp2_;
	{
		SoupSession* _tmp3_;
		SoupMessage* _tmp4_;
		GInputStream* _tmp5_;
		GInputStream* _tmp6_;
		_tmp3_ = session;
		_tmp4_ = msg;
		_tmp5_ = soup_session_send (_tmp3_, _tmp4_, NULL, &_inner_error_);
		_tmp6_ = _tmp5_;
		_g_object_unref0 (_tmp6_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch51_g_error;
		}
	}
	goto __finally51;
	__catch51_g_error:
	{
		GError* err = NULL;
		GError* _tmp7_;
		const gchar* _tmp8_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp7_ = err;
		_tmp8_ = _tmp7_->message;
		g_warning ("Radio.vala:51: %s", _tmp8_);
		result = return_value;
		_g_error_free0 (err);
		_g_object_unref0 (msg);
		_g_object_unref0 (session);
		return result;
	}
	__finally51:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (msg);
		_g_object_unref0 (session);
		_g_free0 (return_value);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return NULL;
	}
	_tmp9_ = msg;
	_tmp10_ = _tmp9_->response_headers;
	_tmp11_ = soup_message_headers_get_one (_tmp10_, "Content-Type");
	_tmp12_ = g_strdup (_tmp11_);
	content_type = _tmp12_;
	_tmp15_ = content_type;
	if (_tmp15_ != NULL) {
		const gchar* _tmp16_;
		_tmp16_ = content_type;
		_tmp14_ = !g_str_has_prefix (_tmp16_, "audio/mpeg");
	} else {
		_tmp14_ = FALSE;
	}
	if (_tmp14_) {
		const gchar* _tmp17_;
		_tmp17_ = content_type;
		_tmp13_ = !g_str_has_prefix (_tmp17_, "audio/aac");
	} else {
		_tmp13_ = FALSE;
	}
	if (_tmp13_) {
		SoupSession* _tmp18_;
		SoupMessage* _tmp19_;
		gchar* data = NULL;
		SoupMessage* _tmp20_;
		SoupMessageBody* _tmp21_;
		guint8* _tmp22_;
		gint _tmp22__length1;
		gchar* _tmp23_;
		SoupMessage* _tmp24_;
		guint _tmp25_;
		guint _tmp26_;
		_tmp18_ = session;
		_tmp19_ = msg;
		soup_session_send_message (_tmp18_, _tmp19_);
		_tmp20_ = msg;
		_tmp21_ = _tmp20_->response_body;
		_tmp22_ = _tmp21_->data;
		_tmp22__length1 = (gint) _tmp21_->length;
		_tmp23_ = g_strdup ((const gchar*) _tmp22_);
		data = _tmp23_;
		_tmp24_ = msg;
		g_object_get (_tmp24_, "status-code", &_tmp25_, NULL);
		_tmp26_ = _tmp25_;
		if (_tmp26_ == ((guint) 200)) {
			const gchar* _tmp27_;
			gchar* _tmp28_;
			_tmp27_ = data;
			_tmp28_ = g_strdup (_tmp27_);
			_g_free0 (return_value);
			return_value = _tmp28_;
		}
		_g_free0 (data);
	}
	result = return_value;
	_g_free0 (content_type);
	_g_object_unref0 (msg);
	_g_object_unref0 (session);
	return result;
}


static gint
string_index_of (const gchar* self,
                 const gchar* needle,
                 gint start_index)
{
	gint result = 0;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, 0);
	g_return_val_if_fail (needle != NULL, 0);
	_tmp0_ = strstr (((gchar*) self) + start_index, (gchar*) needle);
	_result_ = _tmp0_;
	_tmp1_ = _result_;
	if (_tmp1_ != NULL) {
		gchar* _tmp2_;
		_tmp2_ = _result_;
		result = (gint) (_tmp2_ - ((gchar*) self));
		return result;
	} else {
		result = -1;
		return result;
	}
}


static gchar*
objects_radio_get_file_from_m3u (ObjectsRadio* self,
                                 const gchar* content)
{
	gchar* result = NULL;
	gchar** lines = NULL;
	gchar** _tmp0_;
	gchar** _tmp1_;
	gint lines_length1;
	gint _lines_size_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (content != NULL, NULL);
	_tmp1_ = _tmp0_ = g_strsplit (content, "\n", 0);
	lines = _tmp1_;
	lines_length1 = _vala_array_length (_tmp0_);
	_lines_size_ = lines_length1;
	_tmp2_ = lines;
	_tmp2__length1 = lines_length1;
	{
		gchar** line_collection = NULL;
		gint line_collection_length1 = 0;
		gint _line_collection_size_ = 0;
		gint line_it = 0;
		line_collection = _tmp2_;
		line_collection_length1 = _tmp2__length1;
		for (line_it = 0; line_it < _tmp2__length1; line_it = line_it + 1) {
			const gchar* line = NULL;
			line = line_collection[line_it];
			{
				gboolean _tmp3_ = FALSE;
				const gchar* _tmp4_;
				_tmp4_ = line;
				if (g_str_has_prefix (_tmp4_, "http")) {
					const gchar* _tmp5_;
					_tmp5_ = line;
					_tmp3_ = string_index_of (_tmp5_, "#", 0) == -1;
				} else {
					_tmp3_ = FALSE;
				}
				if (_tmp3_) {
					const gchar* _tmp6_;
					gchar* _tmp7_;
					_tmp6_ = line;
					_tmp7_ = g_strdup (_tmp6_);
					result = _tmp7_;
					lines = (_vala_array_free (lines, lines_length1, (GDestroyNotify) g_free), NULL);
					return result;
				}
			}
		}
	}
	result = NULL;
	lines = (_vala_array_free (lines, lines_length1, (GDestroyNotify) g_free), NULL);
	return result;
}


static gchar*
objects_radio_get_file_from_pls (ObjectsRadio* self,
                                 const gchar* content)
{
	gchar* result = NULL;
	gchar* group = NULL;
	gchar* _tmp0_;
	GKeyFile* file = NULL;
	GKeyFile* _tmp1_;
	GKeyFile* _tmp5_;
	const gchar* _tmp6_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (content != NULL, NULL);
	_tmp0_ = g_strdup ("playlist");
	group = _tmp0_;
	_tmp1_ = g_key_file_new ();
	file = _tmp1_;
	{
		GKeyFile* _tmp2_;
		_tmp2_ = file;
		g_key_file_load_from_data (_tmp2_, content, (gsize) -1, G_KEY_FILE_NONE, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch52_g_error;
		}
	}
	goto __finally52;
	__catch52_g_error:
	{
		GError* err = NULL;
		GError* _tmp3_;
		const gchar* _tmp4_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp3_ = err;
		_tmp4_ = _tmp3_->message;
		g_warning ("Radio.vala:82: %s", _tmp4_);
		_g_error_free0 (err);
	}
	__finally52:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_key_file_unref0 (file);
		_g_free0 (group);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return NULL;
	}
	_tmp5_ = file;
	_tmp6_ = group;
	if (!g_key_file_has_group (_tmp5_, _tmp6_)) {
		result = NULL;
		_g_key_file_unref0 (file);
		_g_free0 (group);
		return result;
	}
	{
		gchar** _tmp7_ = NULL;
		GKeyFile* _tmp8_;
		const gchar* _tmp9_;
		gsize _tmp10_;
		gchar** _tmp11_;
		gint _tmp7__length1;
		gint __tmp7__size_;
		_tmp8_ = file;
		_tmp9_ = group;
		_tmp11_ = g_key_file_get_keys (_tmp8_, _tmp9_, &_tmp10_, &_inner_error_);
		_tmp7_ = _tmp11_;
		_tmp7__length1 = _tmp10_;
		__tmp7__size_ = _tmp7__length1;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch53_g_error;
		}
		{
			gchar** key_collection = NULL;
			gint key_collection_length1 = 0;
			gint _key_collection_size_ = 0;
			gint key_it = 0;
			key_collection = _tmp7_;
			key_collection_length1 = _tmp7__length1;
			for (key_it = 0; key_it < _tmp7__length1; key_it = key_it + 1) {
				const gchar* key = NULL;
				key = key_collection[key_it];
				{
					gchar* val = NULL;
					GKeyFile* _tmp12_;
					const gchar* _tmp13_;
					const gchar* _tmp14_;
					gchar* _tmp15_;
					const gchar* _tmp16_;
					gchar* _tmp17_;
					gchar* _tmp18_;
					gboolean _tmp19_;
					_tmp12_ = file;
					_tmp13_ = group;
					_tmp14_ = key;
					_tmp15_ = g_key_file_get_value (_tmp12_, _tmp13_, _tmp14_, &_inner_error_);
					val = _tmp15_;
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						_tmp7_ = (_vala_array_free (_tmp7_, _tmp7__length1, (GDestroyNotify) g_free), NULL);
						goto __catch53_g_error;
					}
					_tmp16_ = key;
					_tmp17_ = g_utf8_strdown (_tmp16_, (gssize) -1);
					_tmp18_ = _tmp17_;
					_tmp19_ = g_str_has_prefix (_tmp18_, "file");
					_g_free0 (_tmp18_);
					if (_tmp19_) {
						result = val;
						_tmp7_ = (_vala_array_free (_tmp7_, _tmp7__length1, (GDestroyNotify) g_free), NULL);
						_g_key_file_unref0 (file);
						_g_free0 (group);
						return result;
					}
					_g_free0 (val);
				}
			}
		}
		_tmp7_ = (_vala_array_free (_tmp7_, _tmp7__length1, (GDestroyNotify) g_free), NULL);
	}
	goto __finally53;
	__catch53_g_error:
	{
		GError* err = NULL;
		GError* _tmp20_;
		const gchar* _tmp21_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp20_ = err;
		_tmp21_ = _tmp20_->message;
		g_warning ("Radio.vala:97: %s", _tmp21_);
		_g_error_free0 (err);
	}
	__finally53:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_key_file_unref0 (file);
		_g_free0 (group);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return NULL;
	}
	result = NULL;
	_g_key_file_unref0 (file);
	_g_free0 (group);
	return result;
}


gint
objects_radio_get_id (ObjectsRadio* self)
{
	gint result;
	gint _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_id (ObjectsRadio* self,
                      gint value)
{
	g_return_if_fail (self != NULL);
	if (objects_radio_get_id (self) != value) {
		self->priv->_id = value;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_ID_PROPERTY]);
	}
}


const gchar*
objects_radio_get_name (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_name;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_name (ObjectsRadio* self,
                        const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, objects_radio_get_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_name);
		self->priv->_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_NAME_PROPERTY]);
	}
}


const gchar*
objects_radio_get_url (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_url;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_url (ObjectsRadio* self,
                       const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, objects_radio_get_url (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_url);
		self->priv->_url = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_URL_PROPERTY]);
	}
}


const gchar*
objects_radio_get_homepage (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_homepage;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_homepage (ObjectsRadio* self,
                            const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, objects_radio_get_homepage (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_homepage);
		self->priv->_homepage = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_HOMEPAGE_PROPERTY]);
	}
}


const gchar*
objects_radio_get_tags (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_tags;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_tags (ObjectsRadio* self,
                        const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, objects_radio_get_tags (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_tags);
		self->priv->_tags = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_TAGS_PROPERTY]);
	}
}


const gchar*
objects_radio_get_favicon (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_favicon;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_favicon (ObjectsRadio* self,
                           const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, objects_radio_get_favicon (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_favicon);
		self->priv->_favicon = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_FAVICON_PROPERTY]);
	}
}


const gchar*
objects_radio_get_country (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_country;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_country (ObjectsRadio* self,
                           const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, objects_radio_get_country (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_country);
		self->priv->_country = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_COUNTRY_PROPERTY]);
	}
}


const gchar*
objects_radio_get_state (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_state;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_state (ObjectsRadio* self,
                         const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, objects_radio_get_state (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_state);
		self->priv->_state = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_STATE_PROPERTY]);
	}
}


const gchar*
objects_radio_get_votes (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_votes;
	result = _tmp0_;
	return result;
}


void
objects_radio_set_votes (ObjectsRadio* self,
                         const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, objects_radio_get_votes (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_votes);
		self->priv->_votes = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, objects_radio_properties[OBJECTS_RADIO_VOTES_PROPERTY]);
	}
}


const gchar*
objects_radio_get_file (ObjectsRadio* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_file;
	if (_tmp0_ == NULL) {
		gchar* _tmp1_;
		_tmp1_ = objects_radio_get_stream_file (self);
		_g_free0 (self->priv->_file);
		self->priv->_file = _tmp1_;
	}
	_tmp2_ = self->priv->_file;
	result = _tmp2_;
	return result;
}


static void
objects_radio_class_init (ObjectsRadioClass * klass)
{
	objects_radio_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (ObjectsRadioPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_objects_radio_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_objects_radio_set_property;
	G_OBJECT_CLASS (klass)->finalize = objects_radio_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_ID_PROPERTY, objects_radio_properties[OBJECTS_RADIO_ID_PROPERTY] = g_param_spec_int ("id", "id", "id", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_NAME_PROPERTY, objects_radio_properties[OBJECTS_RADIO_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_URL_PROPERTY, objects_radio_properties[OBJECTS_RADIO_URL_PROPERTY] = g_param_spec_string ("url", "url", "url", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_HOMEPAGE_PROPERTY, objects_radio_properties[OBJECTS_RADIO_HOMEPAGE_PROPERTY] = g_param_spec_string ("homepage", "homepage", "homepage", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_TAGS_PROPERTY, objects_radio_properties[OBJECTS_RADIO_TAGS_PROPERTY] = g_param_spec_string ("tags", "tags", "tags", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_FAVICON_PROPERTY, objects_radio_properties[OBJECTS_RADIO_FAVICON_PROPERTY] = g_param_spec_string ("favicon", "favicon", "favicon", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_COUNTRY_PROPERTY, objects_radio_properties[OBJECTS_RADIO_COUNTRY_PROPERTY] = g_param_spec_string ("country", "country", "country", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_STATE_PROPERTY, objects_radio_properties[OBJECTS_RADIO_STATE_PROPERTY] = g_param_spec_string ("state", "state", "state", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_VOTES_PROPERTY, objects_radio_properties[OBJECTS_RADIO_VOTES_PROPERTY] = g_param_spec_string ("votes", "votes", "votes", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_RADIO_FILE_PROPERTY, objects_radio_properties[OBJECTS_RADIO_FILE_PROPERTY] = g_param_spec_string ("file", "file", "file", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
}


static void
objects_radio_instance_init (ObjectsRadio * self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	self->priv = OBJECTS_RADIO_GET_PRIVATE (self);
	self->priv->_id = 0;
	_tmp0_ = g_strdup ("");
	self->priv->_name = _tmp0_;
	_tmp1_ = g_strdup ("");
	self->priv->_url = _tmp1_;
	_tmp2_ = g_strdup ("");
	self->priv->_homepage = _tmp2_;
	_tmp3_ = g_strdup ("");
	self->priv->_tags = _tmp3_;
	_tmp4_ = g_strdup ("");
	self->priv->_favicon = _tmp4_;
	_tmp5_ = g_strdup ("");
	self->priv->_country = _tmp5_;
	_tmp6_ = g_strdup ("");
	self->priv->_state = _tmp6_;
	_tmp7_ = g_strdup ("");
	self->priv->_votes = _tmp7_;
	self->priv->_file = NULL;
}


static void
objects_radio_finalize (GObject * obj)
{
	ObjectsRadio * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_RADIO, ObjectsRadio);
	_g_free0 (self->priv->_name);
	_g_free0 (self->priv->_url);
	_g_free0 (self->priv->_homepage);
	_g_free0 (self->priv->_tags);
	_g_free0 (self->priv->_favicon);
	_g_free0 (self->priv->_country);
	_g_free0 (self->priv->_state);
	_g_free0 (self->priv->_votes);
	_g_free0 (self->priv->_file);
	G_OBJECT_CLASS (objects_radio_parent_class)->finalize (obj);
}


GType
objects_radio_get_type (void)
{
	static volatile gsize objects_radio_type_id__volatile = 0;
	if (g_once_init_enter (&objects_radio_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ObjectsRadioClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_radio_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsRadio), 0, (GInstanceInitFunc) objects_radio_instance_init, NULL };
		GType objects_radio_type_id;
		objects_radio_type_id = g_type_register_static (G_TYPE_OBJECT, "ObjectsRadio", &g_define_type_info, 0);
		g_once_init_leave (&objects_radio_type_id__volatile, objects_radio_type_id);
	}
	return objects_radio_type_id__volatile;
}


static void
_vala_objects_radio_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	ObjectsRadio * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_RADIO, ObjectsRadio);
	switch (property_id) {
		case OBJECTS_RADIO_ID_PROPERTY:
		g_value_set_int (value, objects_radio_get_id (self));
		break;
		case OBJECTS_RADIO_NAME_PROPERTY:
		g_value_set_string (value, objects_radio_get_name (self));
		break;
		case OBJECTS_RADIO_URL_PROPERTY:
		g_value_set_string (value, objects_radio_get_url (self));
		break;
		case OBJECTS_RADIO_HOMEPAGE_PROPERTY:
		g_value_set_string (value, objects_radio_get_homepage (self));
		break;
		case OBJECTS_RADIO_TAGS_PROPERTY:
		g_value_set_string (value, objects_radio_get_tags (self));
		break;
		case OBJECTS_RADIO_FAVICON_PROPERTY:
		g_value_set_string (value, objects_radio_get_favicon (self));
		break;
		case OBJECTS_RADIO_COUNTRY_PROPERTY:
		g_value_set_string (value, objects_radio_get_country (self));
		break;
		case OBJECTS_RADIO_STATE_PROPERTY:
		g_value_set_string (value, objects_radio_get_state (self));
		break;
		case OBJECTS_RADIO_VOTES_PROPERTY:
		g_value_set_string (value, objects_radio_get_votes (self));
		break;
		case OBJECTS_RADIO_FILE_PROPERTY:
		g_value_set_string (value, objects_radio_get_file (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_objects_radio_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	ObjectsRadio * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_RADIO, ObjectsRadio);
	switch (property_id) {
		case OBJECTS_RADIO_ID_PROPERTY:
		objects_radio_set_id (self, g_value_get_int (value));
		break;
		case OBJECTS_RADIO_NAME_PROPERTY:
		objects_radio_set_name (self, g_value_get_string (value));
		break;
		case OBJECTS_RADIO_URL_PROPERTY:
		objects_radio_set_url (self, g_value_get_string (value));
		break;
		case OBJECTS_RADIO_HOMEPAGE_PROPERTY:
		objects_radio_set_homepage (self, g_value_get_string (value));
		break;
		case OBJECTS_RADIO_TAGS_PROPERTY:
		objects_radio_set_tags (self, g_value_get_string (value));
		break;
		case OBJECTS_RADIO_FAVICON_PROPERTY:
		objects_radio_set_favicon (self, g_value_get_string (value));
		break;
		case OBJECTS_RADIO_COUNTRY_PROPERTY:
		objects_radio_set_country (self, g_value_get_string (value));
		break;
		case OBJECTS_RADIO_STATE_PROPERTY:
		objects_radio_set_state (self, g_value_get_string (value));
		break;
		case OBJECTS_RADIO_VOTES_PROPERTY:
		objects_radio_set_votes (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



